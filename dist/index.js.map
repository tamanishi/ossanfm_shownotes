{
  "version": 3,
  "sources": ["wrangler-modules-watch:wrangler:modules-watch", "../../../../../../opt/homebrew/Cellar/cloudflare-wrangler2/3.22.1/libexec/lib/node_modules/wrangler/templates/modules-watch-stub.js", "../node_modules/fast-xml-parser/src/util.js", "../node_modules/fast-xml-parser/src/validator.js", "../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../node_modules/strnum/strnum.js", "../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../node_modules/fast-xml-parser/src/fxp.js", "../node_modules/kysely/dist/cjs/util/object-utils.js", "../node_modules/kysely/dist/cjs/operation-node/alter-table-node.js", "../node_modules/kysely/dist/cjs/operation-node/identifier-node.js", "../node_modules/kysely/dist/cjs/operation-node/create-index-node.js", "../node_modules/kysely/dist/cjs/operation-node/create-schema-node.js", "../node_modules/kysely/dist/cjs/operation-node/create-table-node.js", "../node_modules/kysely/dist/cjs/operation-node/schemable-identifier-node.js", "../node_modules/kysely/dist/cjs/operation-node/drop-index-node.js", "../node_modules/kysely/dist/cjs/operation-node/drop-schema-node.js", "../node_modules/kysely/dist/cjs/operation-node/drop-table-node.js", "../node_modules/kysely/dist/cjs/operation-node/alias-node.js", "../node_modules/kysely/dist/cjs/operation-node/table-node.js", "../node_modules/kysely/dist/cjs/operation-node/operation-node-source.js", "../node_modules/kysely/dist/cjs/expression/expression.js", "../node_modules/kysely/dist/cjs/operation-node/select-modifier-node.js", "../node_modules/kysely/dist/cjs/operation-node/and-node.js", "../node_modules/kysely/dist/cjs/operation-node/or-node.js", "../node_modules/kysely/dist/cjs/operation-node/on-node.js", "../node_modules/kysely/dist/cjs/operation-node/join-node.js", "../node_modules/kysely/dist/cjs/operation-node/binary-operation-node.js", "../node_modules/kysely/dist/cjs/operation-node/operator-node.js", "../node_modules/kysely/dist/cjs/operation-node/column-node.js", "../node_modules/kysely/dist/cjs/operation-node/select-all-node.js", "../node_modules/kysely/dist/cjs/operation-node/reference-node.js", "../node_modules/kysely/dist/cjs/dynamic/dynamic-reference-builder.js", "../node_modules/kysely/dist/cjs/operation-node/order-by-item-node.js", "../node_modules/kysely/dist/cjs/operation-node/raw-node.js", "../node_modules/kysely/dist/cjs/parser/order-by-parser.js", "../node_modules/kysely/dist/cjs/operation-node/json-reference-node.js", "../node_modules/kysely/dist/cjs/operation-node/json-operator-chain-node.js", "../node_modules/kysely/dist/cjs/operation-node/json-path-node.js", "../node_modules/kysely/dist/cjs/parser/reference-parser.js", "../node_modules/kysely/dist/cjs/operation-node/primitive-value-list-node.js", "../node_modules/kysely/dist/cjs/operation-node/value-list-node.js", "../node_modules/kysely/dist/cjs/operation-node/value-node.js", "../node_modules/kysely/dist/cjs/parser/value-parser.js", "../node_modules/kysely/dist/cjs/operation-node/parens-node.js", "../node_modules/kysely/dist/cjs/parser/binary-operation-parser.js", "../node_modules/kysely/dist/cjs/operation-node/order-by-node.js", "../node_modules/kysely/dist/cjs/operation-node/partition-by-node.js", "../node_modules/kysely/dist/cjs/operation-node/over-node.js", "../node_modules/kysely/dist/cjs/operation-node/from-node.js", "../node_modules/kysely/dist/cjs/operation-node/group-by-node.js", "../node_modules/kysely/dist/cjs/operation-node/having-node.js", "../node_modules/kysely/dist/cjs/operation-node/select-query-node.js", "../node_modules/kysely/dist/cjs/util/prevent-await.js", "../node_modules/kysely/dist/cjs/query-builder/join-builder.js", "../node_modules/kysely/dist/cjs/operation-node/partition-by-item-node.js", "../node_modules/kysely/dist/cjs/parser/partition-by-parser.js", "../node_modules/kysely/dist/cjs/query-builder/over-builder.js", "../node_modules/kysely/dist/cjs/operation-node/selection-node.js", "../node_modules/kysely/dist/cjs/parser/select-parser.js", "../node_modules/kysely/dist/cjs/operation-node/values-node.js", "../node_modules/kysely/dist/cjs/operation-node/default-insert-value-node.js", "../node_modules/kysely/dist/cjs/parser/insert-values-parser.js", "../node_modules/kysely/dist/cjs/operation-node/insert-query-node.js", "../node_modules/kysely/dist/cjs/operation-node/update-query-node.js", "../node_modules/kysely/dist/cjs/operation-node/using-node.js", "../node_modules/kysely/dist/cjs/operation-node/delete-query-node.js", "../node_modules/kysely/dist/cjs/operation-node/where-node.js", "../node_modules/kysely/dist/cjs/operation-node/returning-node.js", "../node_modules/kysely/dist/cjs/operation-node/explain-node.js", "../node_modules/kysely/dist/cjs/operation-node/query-node.js", "../node_modules/kysely/dist/cjs/operation-node/column-update-node.js", "../node_modules/kysely/dist/cjs/parser/update-set-parser.js", "../node_modules/kysely/dist/cjs/operation-node/on-duplicate-key-node.js", "../node_modules/kysely/dist/cjs/query-builder/insert-result.js", "../node_modules/kysely/dist/cjs/query-builder/no-result-error.js", "../node_modules/kysely/dist/cjs/operation-node/on-conflict-node.js", "../node_modules/kysely/dist/cjs/query-builder/on-conflict-builder.js", "../node_modules/kysely/dist/cjs/query-builder/insert-query-builder.js", "../node_modules/kysely/dist/cjs/query-builder/delete-result.js", "../node_modules/kysely/dist/cjs/operation-node/limit-node.js", "../node_modules/kysely/dist/cjs/query-builder/delete-query-builder.js", "../node_modules/kysely/dist/cjs/query-builder/update-result.js", "../node_modules/kysely/dist/cjs/query-builder/update-query-builder.js", "../node_modules/kysely/dist/cjs/operation-node/common-table-expression-name-node.js", "../node_modules/kysely/dist/cjs/operation-node/common-table-expression-node.js", "../node_modules/kysely/dist/cjs/query-builder/cte-builder.js", "../node_modules/kysely/dist/cjs/parser/with-parser.js", "../node_modules/kysely/dist/cjs/operation-node/with-node.js", "../node_modules/kysely/dist/cjs/util/random-string.js", "../node_modules/kysely/dist/cjs/util/query-id.js", "../node_modules/kysely/dist/cjs/util/require-all-props.js", "../node_modules/kysely/dist/cjs/operation-node/operation-node-transformer.js", "../node_modules/kysely/dist/cjs/plugin/with-schema/with-schema-transformer.js", "../node_modules/kysely/dist/cjs/plugin/with-schema/with-schema-plugin.js", "../node_modules/kysely/dist/cjs/query-creator.js", "../node_modules/kysely/dist/cjs/util/deferred.js", "../node_modules/kysely/dist/cjs/util/log-once.js", "../node_modules/kysely/dist/cjs/query-executor/query-executor-base.js", "../node_modules/kysely/dist/cjs/query-executor/noop-query-executor.js", "../node_modules/kysely/dist/cjs/parser/parse-utils.js", "../node_modules/kysely/dist/cjs/parser/join-parser.js", "../node_modules/kysely/dist/cjs/operation-node/offset-node.js", "../node_modules/kysely/dist/cjs/operation-node/group-by-item-node.js", "../node_modules/kysely/dist/cjs/parser/group-by-parser.js", "../node_modules/kysely/dist/cjs/operation-node/set-operation-node.js", "../node_modules/kysely/dist/cjs/parser/set-operation-parser.js", "../node_modules/kysely/dist/cjs/expression/expression-wrapper.js", "../node_modules/kysely/dist/cjs/query-builder/select-query-builder.js", "../node_modules/kysely/dist/cjs/operation-node/aggregate-function-node.js", "../node_modules/kysely/dist/cjs/operation-node/function-node.js", "../node_modules/kysely/dist/cjs/query-builder/aggregate-function-builder.js", "../node_modules/kysely/dist/cjs/query-builder/function-module.js", "../node_modules/kysely/dist/cjs/operation-node/unary-operation-node.js", "../node_modules/kysely/dist/cjs/parser/unary-operation-parser.js", "../node_modules/kysely/dist/cjs/operation-node/when-node.js", "../node_modules/kysely/dist/cjs/operation-node/case-node.js", "../node_modules/kysely/dist/cjs/query-builder/case-builder.js", "../node_modules/kysely/dist/cjs/operation-node/json-path-leg-node.js", "../node_modules/kysely/dist/cjs/query-builder/json-path-builder.js", "../node_modules/kysely/dist/cjs/operation-node/tuple-node.js", "../node_modules/kysely/dist/cjs/expression/expression-builder.js", "../node_modules/kysely/dist/cjs/parser/expression-parser.js", "../node_modules/kysely/dist/cjs/parser/table-parser.js", "../node_modules/kysely/dist/cjs/operation-node/add-column-node.js", "../node_modules/kysely/dist/cjs/operation-node/column-definition-node.js", "../node_modules/kysely/dist/cjs/operation-node/drop-column-node.js", "../node_modules/kysely/dist/cjs/operation-node/rename-column-node.js", "../node_modules/kysely/dist/cjs/operation-node/check-constraint-node.js", "../node_modules/kysely/dist/cjs/operation-node/references-node.js", "../node_modules/kysely/dist/cjs/parser/default-value-parser.js", "../node_modules/kysely/dist/cjs/operation-node/generated-node.js", "../node_modules/kysely/dist/cjs/operation-node/default-value-node.js", "../node_modules/kysely/dist/cjs/parser/on-modify-action-parser.js", "../node_modules/kysely/dist/cjs/schema/column-definition-builder.js", "../node_modules/kysely/dist/cjs/operation-node/modify-column-node.js", "../node_modules/kysely/dist/cjs/operation-node/data-type-node.js", "../node_modules/kysely/dist/cjs/parser/data-type-parser.js", "../node_modules/kysely/dist/cjs/operation-node/foreign-key-constraint-node.js", "../node_modules/kysely/dist/cjs/schema/foreign-key-constraint-builder.js", "../node_modules/kysely/dist/cjs/operation-node/add-constraint-node.js", "../node_modules/kysely/dist/cjs/operation-node/unique-constraint-node.js", "../node_modules/kysely/dist/cjs/operation-node/drop-constraint-node.js", "../node_modules/kysely/dist/cjs/operation-node/alter-column-node.js", "../node_modules/kysely/dist/cjs/schema/alter-column-builder.js", "../node_modules/kysely/dist/cjs/schema/alter-table-executor.js", "../node_modules/kysely/dist/cjs/schema/alter-table-add-foreign-key-constraint-builder.js", "../node_modules/kysely/dist/cjs/schema/alter-table-drop-constraint-builder.js", "../node_modules/kysely/dist/cjs/operation-node/primary-constraint-node.js", "../node_modules/kysely/dist/cjs/schema/alter-table-builder.js", "../node_modules/kysely/dist/cjs/plugin/immediate-value/immediate-value-transformer.js", "../node_modules/kysely/dist/cjs/schema/create-index-builder.js", "../node_modules/kysely/dist/cjs/schema/create-schema-builder.js", "../node_modules/kysely/dist/cjs/parser/on-commit-action-parse.js", "../node_modules/kysely/dist/cjs/schema/create-table-builder.js", "../node_modules/kysely/dist/cjs/schema/drop-index-builder.js", "../node_modules/kysely/dist/cjs/schema/drop-schema-builder.js", "../node_modules/kysely/dist/cjs/schema/drop-table-builder.js", "../node_modules/kysely/dist/cjs/operation-node/create-view-node.js", "../node_modules/kysely/dist/cjs/plugin/immediate-value/immediate-value-plugin.js", "../node_modules/kysely/dist/cjs/schema/create-view-builder.js", "../node_modules/kysely/dist/cjs/operation-node/drop-view-node.js", "../node_modules/kysely/dist/cjs/schema/drop-view-builder.js", "../node_modules/kysely/dist/cjs/operation-node/create-type-node.js", "../node_modules/kysely/dist/cjs/schema/create-type-builder.js", "../node_modules/kysely/dist/cjs/operation-node/drop-type-node.js", "../node_modules/kysely/dist/cjs/schema/drop-type-builder.js", "../node_modules/kysely/dist/cjs/parser/identifier-parser.js", "../node_modules/kysely/dist/cjs/schema/schema.js", "../node_modules/kysely/dist/cjs/dynamic/dynamic.js", "../node_modules/kysely/dist/cjs/driver/default-connection-provider.js", "../node_modules/kysely/dist/cjs/query-executor/default-query-executor.js", "../node_modules/kysely/dist/cjs/util/performance-now.js", "../node_modules/kysely/dist/cjs/driver/runtime-driver.js", "../node_modules/kysely/dist/cjs/driver/single-connection-provider.js", "../node_modules/kysely/dist/cjs/driver/driver.js", "../node_modules/kysely/dist/cjs/util/log.js", "../node_modules/kysely/dist/cjs/util/compilable.js", "../node_modules/kysely/dist/cjs/kysely.js", "../node_modules/kysely/dist/cjs/query-builder/where-interface.js", "../node_modules/kysely/dist/cjs/query-builder/returning-interface.js", "../node_modules/kysely/dist/cjs/query-builder/having-interface.js", "../node_modules/kysely/dist/cjs/raw-builder/raw-builder.js", "../node_modules/kysely/dist/cjs/raw-builder/sql.js", "../node_modules/kysely/dist/cjs/query-executor/query-executor.js", "../node_modules/kysely/dist/cjs/query-executor/query-executor-provider.js", "../node_modules/kysely/dist/cjs/operation-node/operation-node-visitor.js", "../node_modules/kysely/dist/cjs/query-compiler/default-query-compiler.js", "../node_modules/kysely/dist/cjs/query-compiler/compiled-query.js", "../node_modules/kysely/dist/cjs/driver/database-connection.js", "../node_modules/kysely/dist/cjs/driver/connection-provider.js", "../node_modules/kysely/dist/cjs/driver/dummy-driver.js", "../node_modules/kysely/dist/cjs/dialect/dialect.js", "../node_modules/kysely/dist/cjs/dialect/dialect-adapter.js", "../node_modules/kysely/dist/cjs/dialect/dialect-adapter-base.js", "../node_modules/kysely/dist/cjs/dialect/database-introspector.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-driver.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-query-compiler.js", "../node_modules/kysely/dist/cjs/plugin/noop-plugin.js", "../node_modules/kysely/dist/cjs/migration/migrator.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-introspector.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-adapter.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-dialect.js", "../node_modules/kysely/dist/cjs/dialect/sqlite/sqlite-dialect-config.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-query-compiler.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-introspector.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-adapter.js", "../node_modules/kysely/dist/cjs/util/stack-trace-utils.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-driver.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-query-compiler.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-introspector.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-adapter.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-dialect.js", "../node_modules/kysely/dist/cjs/dialect/mysql/mysql-dialect-config.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-driver.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-dialect-config.js", "../node_modules/kysely/dist/cjs/dialect/postgres/postgres-dialect.js", "../node_modules/kysely/dist/cjs/query-compiler/query-compiler.js", "../node_modules/kysely/dist/cjs/migration/file-migration-provider.js", "../node_modules/kysely/dist/cjs/plugin/kysely-plugin.js", "../node_modules/kysely/dist/cjs/plugin/camel-case/camel-case-transformer.js", "../node_modules/kysely/dist/cjs/plugin/camel-case/camel-case.js", "../node_modules/kysely/dist/cjs/plugin/camel-case/camel-case-plugin.js", "../node_modules/kysely/dist/cjs/plugin/deduplicate-joins/deduplicate-joins-transformer.js", "../node_modules/kysely/dist/cjs/plugin/deduplicate-joins/deduplicate-joins-plugin.js", "../node_modules/kysely/dist/cjs/plugin/parse-json-results/parse-json-results-plugin.js", "../node_modules/kysely/dist/cjs/operation-node/constraint-node.js", "../node_modules/kysely/dist/cjs/operation-node/list-node.js", "../node_modules/kysely/dist/cjs/operation-node/operation-node.js", "../node_modules/kysely/dist/cjs/util/column-type.js", "../node_modules/kysely/dist/cjs/util/explainable.js", "../node_modules/kysely/dist/cjs/util/streamable.js", "../node_modules/kysely/dist/cjs/util/infer-result.js", "../node_modules/kysely/dist/cjs/index.js", "../node_modules/kysely-d1/dist/index.js", "../src/index.ts", "../node_modules/kysely/dist/esm/kysely.js", "../node_modules/kysely/dist/esm/schema/schema.js", "../node_modules/kysely/dist/esm/operation-node/alter-table-node.js", "../node_modules/kysely/dist/esm/util/object-utils.js", "../node_modules/kysely/dist/esm/operation-node/create-index-node.js", "../node_modules/kysely/dist/esm/operation-node/identifier-node.js", "../node_modules/kysely/dist/esm/operation-node/create-schema-node.js", "../node_modules/kysely/dist/esm/operation-node/create-table-node.js", "../node_modules/kysely/dist/esm/operation-node/drop-index-node.js", "../node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js", "../node_modules/kysely/dist/esm/operation-node/drop-schema-node.js", "../node_modules/kysely/dist/esm/operation-node/drop-table-node.js", "../node_modules/kysely/dist/esm/parser/table-parser.js", "../node_modules/kysely/dist/esm/operation-node/alias-node.js", "../node_modules/kysely/dist/esm/operation-node/table-node.js", "../node_modules/kysely/dist/esm/parser/expression-parser.js", "../node_modules/kysely/dist/esm/expression/expression.js", "../node_modules/kysely/dist/esm/operation-node/operation-node-source.js", "../node_modules/kysely/dist/esm/expression/expression-builder.js", "../node_modules/kysely/dist/esm/query-builder/select-query-builder.js", "../node_modules/kysely/dist/esm/operation-node/select-modifier-node.js", "../node_modules/kysely/dist/esm/parser/join-parser.js", "../node_modules/kysely/dist/esm/operation-node/join-node.js", "../node_modules/kysely/dist/esm/operation-node/on-node.js", "../node_modules/kysely/dist/esm/operation-node/and-node.js", "../node_modules/kysely/dist/esm/operation-node/or-node.js", "../node_modules/kysely/dist/esm/parser/binary-operation-parser.js", "../node_modules/kysely/dist/esm/operation-node/binary-operation-node.js", "../node_modules/kysely/dist/esm/operation-node/operator-node.js", "../node_modules/kysely/dist/esm/parser/reference-parser.js", "../node_modules/kysely/dist/esm/operation-node/column-node.js", "../node_modules/kysely/dist/esm/operation-node/reference-node.js", "../node_modules/kysely/dist/esm/operation-node/select-all-node.js", "../node_modules/kysely/dist/esm/parser/order-by-parser.js", "../node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js", "../node_modules/kysely/dist/esm/operation-node/order-by-item-node.js", "../node_modules/kysely/dist/esm/operation-node/raw-node.js", "../node_modules/kysely/dist/esm/operation-node/json-reference-node.js", "../node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js", "../node_modules/kysely/dist/esm/operation-node/json-path-node.js", "../node_modules/kysely/dist/esm/parser/value-parser.js", "../node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js", "../node_modules/kysely/dist/esm/operation-node/value-list-node.js", "../node_modules/kysely/dist/esm/operation-node/value-node.js", "../node_modules/kysely/dist/esm/operation-node/parens-node.js", "../node_modules/kysely/dist/esm/parser/parse-utils.js", "../node_modules/kysely/dist/esm/operation-node/over-node.js", "../node_modules/kysely/dist/esm/operation-node/order-by-node.js", "../node_modules/kysely/dist/esm/operation-node/partition-by-node.js", "../node_modules/kysely/dist/esm/operation-node/select-query-node.js", "../node_modules/kysely/dist/esm/operation-node/from-node.js", "../node_modules/kysely/dist/esm/operation-node/group-by-node.js", "../node_modules/kysely/dist/esm/operation-node/having-node.js", "../node_modules/kysely/dist/esm/query-builder/join-builder.js", "../node_modules/kysely/dist/esm/util/prevent-await.js", "../node_modules/kysely/dist/esm/query-builder/over-builder.js", "../node_modules/kysely/dist/esm/parser/partition-by-parser.js", "../node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js", "../node_modules/kysely/dist/esm/query-creator.js", "../node_modules/kysely/dist/esm/query-builder/insert-query-builder.js", "../node_modules/kysely/dist/esm/parser/select-parser.js", "../node_modules/kysely/dist/esm/operation-node/selection-node.js", "../node_modules/kysely/dist/esm/parser/insert-values-parser.js", "../node_modules/kysely/dist/esm/operation-node/values-node.js", "../node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js", "../node_modules/kysely/dist/esm/operation-node/insert-query-node.js", "../node_modules/kysely/dist/esm/operation-node/query-node.js", "../node_modules/kysely/dist/esm/operation-node/update-query-node.js", "../node_modules/kysely/dist/esm/operation-node/delete-query-node.js", "../node_modules/kysely/dist/esm/operation-node/using-node.js", "../node_modules/kysely/dist/esm/operation-node/where-node.js", "../node_modules/kysely/dist/esm/operation-node/returning-node.js", "../node_modules/kysely/dist/esm/operation-node/explain-node.js", "../node_modules/kysely/dist/esm/parser/update-set-parser.js", "../node_modules/kysely/dist/esm/operation-node/column-update-node.js", "../node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js", "../node_modules/kysely/dist/esm/query-builder/insert-result.js", "../node_modules/kysely/dist/esm/query-builder/no-result-error.js", "../node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js", "../node_modules/kysely/dist/esm/operation-node/on-conflict-node.js", "../node_modules/kysely/dist/esm/query-builder/delete-query-builder.js", "../node_modules/kysely/dist/esm/query-builder/delete-result.js", "../node_modules/kysely/dist/esm/operation-node/limit-node.js", "../node_modules/kysely/dist/esm/query-builder/update-query-builder.js", "../node_modules/kysely/dist/esm/query-builder/update-result.js", "../node_modules/kysely/dist/esm/parser/with-parser.js", "../node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js", "../node_modules/kysely/dist/esm/query-builder/cte-builder.js", "../node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js", "../node_modules/kysely/dist/esm/operation-node/with-node.js", "../node_modules/kysely/dist/esm/util/query-id.js", "../node_modules/kysely/dist/esm/util/random-string.js", "../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js", "../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js", "../node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js", "../node_modules/kysely/dist/esm/util/require-all-props.js", "../node_modules/kysely/dist/esm/query-executor/noop-query-executor.js", "../node_modules/kysely/dist/esm/query-executor/query-executor-base.js", "../node_modules/kysely/dist/esm/util/deferred.js", "../node_modules/kysely/dist/esm/util/log-once.js", "../node_modules/kysely/dist/esm/operation-node/offset-node.js", "../node_modules/kysely/dist/esm/parser/group-by-parser.js", "../node_modules/kysely/dist/esm/operation-node/group-by-item-node.js", "../node_modules/kysely/dist/esm/parser/set-operation-parser.js", "../node_modules/kysely/dist/esm/operation-node/set-operation-node.js", "../node_modules/kysely/dist/esm/expression/expression-wrapper.js", "../node_modules/kysely/dist/esm/query-builder/function-module.js", "../node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js", "../node_modules/kysely/dist/esm/operation-node/function-node.js", "../node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js", "../node_modules/kysely/dist/esm/parser/unary-operation-parser.js", "../node_modules/kysely/dist/esm/operation-node/unary-operation-node.js", "../node_modules/kysely/dist/esm/query-builder/case-builder.js", "../node_modules/kysely/dist/esm/operation-node/case-node.js", "../node_modules/kysely/dist/esm/operation-node/when-node.js", "../node_modules/kysely/dist/esm/query-builder/json-path-builder.js", "../node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js", "../node_modules/kysely/dist/esm/operation-node/tuple-node.js", "../node_modules/kysely/dist/esm/schema/alter-table-builder.js", "../node_modules/kysely/dist/esm/operation-node/add-column-node.js", "../node_modules/kysely/dist/esm/operation-node/column-definition-node.js", "../node_modules/kysely/dist/esm/operation-node/drop-column-node.js", "../node_modules/kysely/dist/esm/operation-node/rename-column-node.js", "../node_modules/kysely/dist/esm/schema/column-definition-builder.js", "../node_modules/kysely/dist/esm/operation-node/check-constraint-node.js", "../node_modules/kysely/dist/esm/operation-node/references-node.js", "../node_modules/kysely/dist/esm/parser/default-value-parser.js", "../node_modules/kysely/dist/esm/operation-node/generated-node.js", "../node_modules/kysely/dist/esm/operation-node/default-value-node.js", "../node_modules/kysely/dist/esm/parser/on-modify-action-parser.js", "../node_modules/kysely/dist/esm/operation-node/modify-column-node.js", "../node_modules/kysely/dist/esm/parser/data-type-parser.js", "../node_modules/kysely/dist/esm/operation-node/data-type-node.js", "../node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js", "../node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js", "../node_modules/kysely/dist/esm/operation-node/add-constraint-node.js", "../node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js", "../node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js", "../node_modules/kysely/dist/esm/schema/alter-column-builder.js", "../node_modules/kysely/dist/esm/operation-node/alter-column-node.js", "../node_modules/kysely/dist/esm/schema/alter-table-executor.js", "../node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js", "../node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js", "../node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js", "../node_modules/kysely/dist/esm/schema/create-index-builder.js", "../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js", "../node_modules/kysely/dist/esm/schema/create-schema-builder.js", "../node_modules/kysely/dist/esm/schema/create-table-builder.js", "../node_modules/kysely/dist/esm/parser/on-commit-action-parse.js", "../node_modules/kysely/dist/esm/schema/drop-index-builder.js", "../node_modules/kysely/dist/esm/schema/drop-schema-builder.js", "../node_modules/kysely/dist/esm/schema/drop-table-builder.js", "../node_modules/kysely/dist/esm/schema/create-view-builder.js", "../node_modules/kysely/dist/esm/operation-node/create-view-node.js", "../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js", "../node_modules/kysely/dist/esm/schema/drop-view-builder.js", "../node_modules/kysely/dist/esm/operation-node/drop-view-node.js", "../node_modules/kysely/dist/esm/schema/create-type-builder.js", "../node_modules/kysely/dist/esm/operation-node/create-type-node.js", "../node_modules/kysely/dist/esm/schema/drop-type-builder.js", "../node_modules/kysely/dist/esm/operation-node/drop-type-node.js", "../node_modules/kysely/dist/esm/parser/identifier-parser.js", "../node_modules/kysely/dist/esm/dynamic/dynamic.js", "../node_modules/kysely/dist/esm/driver/default-connection-provider.js", "../node_modules/kysely/dist/esm/query-executor/default-query-executor.js", "../node_modules/kysely/dist/esm/driver/runtime-driver.js", "../node_modules/kysely/dist/esm/util/performance-now.js", "../node_modules/kysely/dist/esm/driver/single-connection-provider.js", "../node_modules/kysely/dist/esm/driver/driver.js", "../node_modules/kysely/dist/esm/util/log.js", "../node_modules/kysely/dist/esm/util/compilable.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n", "'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n", "\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;", "'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;", "const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n", "'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"\u00A2\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"\u00A3\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"\u00A5\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"\u20AC\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"\u00A9\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"\u00AE\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"\u20B9\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n", "'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n", "const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;", "const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n", "'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n", "'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compare = exports.noop = exports.isReadonlyArray = exports.asReadonlyArray = exports.asArray = exports.freeze = exports.getLast = exports.isPlainObject = exports.isArrayBufferOrView = exports.isObject = exports.isFunction = exports.isBuffer = exports.isBigInt = exports.isDate = exports.isNull = exports.isBoolean = exports.isNumber = exports.isString = exports.isUndefined = exports.isEmpty = void 0;\nfunction isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexports.isEmpty = isEmpty;\nfunction isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexports.isUndefined = isUndefined;\nfunction isString(obj) {\n    return typeof obj === 'string';\n}\nexports.isString = isString;\nfunction isNumber(obj) {\n    return typeof obj === 'number';\n}\nexports.isNumber = isNumber;\nfunction isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexports.isBoolean = isBoolean;\nfunction isNull(obj) {\n    return obj === null;\n}\nexports.isNull = isNull;\nfunction isDate(obj) {\n    return obj instanceof Date;\n}\nexports.isDate = isDate;\nfunction isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\nexports.isBigInt = isBigInt;\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nfunction isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexports.isBuffer = isBuffer;\nfunction isFunction(obj) {\n    return typeof obj === 'function';\n}\nexports.isFunction = isFunction;\nfunction isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexports.isObject = isObject;\nfunction isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexports.isArrayBufferOrView = isArrayBufferOrView;\nfunction isPlainObject(obj) {\n    return (isObject(obj) &&\n        !Array.isArray(obj) &&\n        !isDate(obj) &&\n        !isBuffer(obj) &&\n        !isArrayBufferOrView(obj));\n}\nexports.isPlainObject = isPlainObject;\nfunction getLast(arr) {\n    return arr[arr.length - 1];\n}\nexports.getLast = getLast;\nfunction freeze(obj) {\n    return Object.freeze(obj);\n}\nexports.freeze = freeze;\nfunction asArray(arg) {\n    if (Array.isArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexports.asArray = asArray;\nfunction asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexports.asReadonlyArray = asReadonlyArray;\nfunction isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexports.isReadonlyArray = isReadonlyArray;\nfunction noop(obj) {\n    return obj;\n}\nexports.noop = noop;\nfunction compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nexports.compare = compare;\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterTableNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.AlterTableNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AlterTableNode',\n            table,\n        });\n    },\n    cloneWithTableProps(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumnAlteration(node, columnAlteration) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            columnAlterations: node.columnAlterations\n                ? [...node.columnAlterations, columnAlteration]\n                : [columnAlteration],\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentifierNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.IdentifierNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateIndexNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.CreateIndexNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CreateIndexNode',\n            name: identifier_node_js_1.IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSchemaNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.CreateSchemaNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CreateSchemaNode',\n            schema: identifier_node_js_1.IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateTableNode = exports.ON_COMMIT_ACTIONS = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nexports.ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexports.CreateTableNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CreateTableNode',\n            table,\n            columns: (0, object_utils_js_1.freeze)([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return (0, object_utils_js_1.freeze)({\n            ...createTable,\n            columns: (0, object_utils_js_1.freeze)([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return (0, object_utils_js_1.freeze)({\n            ...createTable,\n            constraints: createTable.constraints\n                ? (0, object_utils_js_1.freeze)([...createTable.constraints, constraint])\n                : (0, object_utils_js_1.freeze)([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? (0, object_utils_js_1.freeze)([...createTable.frontModifiers, modifier])\n                : (0, object_utils_js_1.freeze)([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? (0, object_utils_js_1.freeze)([...createTable.endModifiers, modifier])\n                : (0, object_utils_js_1.freeze)([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemableIdentifierNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.SchemableIdentifierNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SchemableIdentifierNode',\n            identifier: identifier_node_js_1.IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SchemableIdentifierNode',\n            schema: identifier_node_js_1.IdentifierNode.create(schema),\n            identifier: identifier_node_js_1.IdentifierNode.create(identifier),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropIndexNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst schemable_identifier_node_js_1 = require(\"./schemable-identifier-node.js\");\n/**\n * @internal\n */\nexports.DropIndexNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropIndexNode',\n            name: schemable_identifier_node_js_1.SchemableIdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropSchemaNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.DropSchemaNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropSchemaNode',\n            schema: identifier_node_js_1.IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropTableNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.DropTableNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.AliasNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TableNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst schemable_identifier_node_js_1 = require(\"./schemable-identifier-node.js\");\n/**\n * @internal\n */\nexports.TableNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'TableNode',\n            table: schemable_identifier_node_js_1.SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'TableNode',\n            table: schemable_identifier_node_js_1.SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isOperationNodeSource = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nfunction isOperationNodeSource(obj) {\n    return (0, object_utils_js_1.isObject)(obj) && (0, object_utils_js_1.isFunction)(obj.toOperationNode);\n}\nexports.isOperationNodeSource = isOperationNodeSource;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAliasedExpression = exports.isExpression = void 0;\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nfunction isExpression(obj) {\n    return (0, object_utils_js_1.isObject)(obj) && 'expressionType' in obj && (0, operation_node_source_js_1.isOperationNodeSource)(obj);\n}\nexports.isExpression = isExpression;\nfunction isAliasedExpression(obj) {\n    return ((0, object_utils_js_1.isObject)(obj) &&\n        'expression' in obj &&\n        (0, object_utils_js_1.isString)(obj.alias) &&\n        (0, operation_node_source_js_1.isOperationNodeSource)(obj));\n}\nexports.isAliasedExpression = isAliasedExpression;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectModifierNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.SelectModifierNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectModifierNode',\n            modifier,\n        });\n    },\n    createWithExpression(modifier) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AndNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.AndNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.OrNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst and_node_js_1 = require(\"./and-node.js\");\nconst or_node_js_1 = require(\"./or-node.js\");\n/**\n * @internal\n */\nexports.OnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...onNode,\n            on: operator === 'And'\n                ? and_node_js_1.AndNode.create(onNode.on, operation)\n                : or_node_js_1.OrNode.create(onNode.on, operation),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JoinNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst on_node_js_1 = require(\"./on-node.js\");\n/**\n * @internal\n */\nexports.JoinNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: on_node_js_1.OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...joinNode,\n            on: joinNode.on\n                ? on_node_js_1.OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : on_node_js_1.OnNode.create(operation),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BinaryOperationNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.BinaryOperationNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isJSONOperator = exports.isArithmeticOperator = exports.isComparisonOperator = exports.isBinaryOperator = exports.isOperator = exports.OperatorNode = exports.OPERATORS = exports.UNARY_OPERATORS = exports.UNARY_FILTER_OPERATORS = exports.BINARY_OPERATORS = exports.JSON_OPERATORS = exports.ARITHMETIC_OPERATORS = exports.COMPARISON_OPERATORS = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nexports.COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '&&',\n    '?',\n    '?&',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n];\nexports.ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexports.JSON_OPERATORS = ['->', '->>'];\nexports.BINARY_OPERATORS = [\n    ...exports.COMPARISON_OPERATORS,\n    ...exports.ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexports.UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexports.UNARY_OPERATORS = ['not', '-', ...exports.UNARY_FILTER_OPERATORS];\nexports.OPERATORS = [\n    ...exports.BINARY_OPERATORS,\n    ...exports.JSON_OPERATORS,\n    ...exports.UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexports.OperatorNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nfunction isOperator(op) {\n    return (0, object_utils_js_1.isString)(op) && exports.OPERATORS.includes(op);\n}\nexports.isOperator = isOperator;\nfunction isBinaryOperator(op) {\n    return (0, object_utils_js_1.isString)(op) && exports.BINARY_OPERATORS.includes(op);\n}\nexports.isBinaryOperator = isBinaryOperator;\nfunction isComparisonOperator(op) {\n    return (0, object_utils_js_1.isString)(op) && exports.COMPARISON_OPERATORS.includes(op);\n}\nexports.isComparisonOperator = isComparisonOperator;\nfunction isArithmeticOperator(op) {\n    return (0, object_utils_js_1.isString)(op) && exports.ARITHMETIC_OPERATORS.includes(op);\n}\nexports.isArithmeticOperator = isArithmeticOperator;\nfunction isJSONOperator(op) {\n    return (0, object_utils_js_1.isString)(op) && exports.JSON_OPERATORS.includes(op);\n}\nexports.isJSONOperator = isJSONOperator;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.ColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ColumnNode',\n            column: identifier_node_js_1.IdentifierNode.create(column),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectAllNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.SelectAllNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReferenceNode = void 0;\nconst select_all_node_js_1 = require(\"./select-all-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ReferenceNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ReferenceNode',\n            table,\n            column: select_all_node_js_1.SelectAllNode.create(),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDynamicReferenceBuilder = exports.DynamicReferenceBuilder = void 0;\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return (0, reference_parser_js_1.parseSimpleReferenceExpression)(this.#dynamicReference);\n    }\n}\nexports.DynamicReferenceBuilder = DynamicReferenceBuilder;\nfunction isDynamicReferenceBuilder(obj) {\n    return ((0, object_utils_js_1.isObject)(obj) &&\n        (0, operation_node_source_js_1.isOperationNodeSource)(obj) &&\n        (0, object_utils_js_1.isString)(obj.dynamicReference));\n}\nexports.isDynamicReferenceBuilder = isDynamicReferenceBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderByItemNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.OrderByItemNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RawNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.RawNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'RawNode',\n            sqlFragments: (0, object_utils_js_1.freeze)(sqlFragments),\n            parameters: (0, object_utils_js_1.freeze)(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return exports.RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return exports.RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return exports.RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseOrderByItem = exports.parseOrderBy = exports.isOrderByDirection = void 0;\nconst dynamic_reference_builder_js_1 = require(\"../dynamic/dynamic-reference-builder.js\");\nconst order_by_item_node_js_1 = require(\"../operation-node/order-by-item-node.js\");\nconst raw_node_js_1 = require(\"../operation-node/raw-node.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nfunction isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexports.isOrderByDirection = isOrderByDirection;\nfunction parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexports.parseOrderBy = parseOrderBy;\nfunction parseOrderByItem(ref, direction) {\n    const parsedRef = parseOrderByExpression(ref);\n    if (order_by_item_node_js_1.OrderByItemNode.is(parsedRef)) {\n        if (direction) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return order_by_item_node_js_1.OrderByItemNode.create(parsedRef, parseOrderByDirectionExpression(direction));\n}\nexports.parseOrderByItem = parseOrderByItem;\nfunction parseOrderByExpression(expr) {\n    if ((0, expression_parser_js_1.isExpressionOrFactory)(expr)) {\n        return (0, expression_parser_js_1.parseExpression)(expr);\n    }\n    if ((0, dynamic_reference_builder_js_1.isDynamicReferenceBuilder)(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        if (!isOrderByDirection(direction)) {\n            throw new Error(`Invalid order by direction: ${direction}`);\n        }\n        return order_by_item_node_js_1.OrderByItemNode.create((0, reference_parser_js_1.parseStringReference)(ref), parseOrderByDirectionExpression(direction));\n    }\n    return (0, reference_parser_js_1.parseStringReference)(expr);\n}\nfunction parseOrderByDirectionExpression(expr) {\n    if (!expr) {\n        return undefined;\n    }\n    if (expr === 'asc' || expr === 'desc') {\n        return raw_node_js_1.RawNode.createWithSql(expr);\n    }\n    return expr.toOperationNode();\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSONReferenceNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.JSONReferenceNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            traversal,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSONOperatorChainNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.JSONOperatorChainNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: (0, object_utils_js_1.freeze)([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            values: (0, object_utils_js_1.freeze)([...node.values, value]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSONPathNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.JSONPathNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: (0, object_utils_js_1.freeze)([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return (0, object_utils_js_1.freeze)({\n            ...jsonPathNode,\n            pathLegs: (0, object_utils_js_1.freeze)([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseOrderedColumnName = exports.parseColumnName = exports.parseAliasedStringReference = exports.parseStringReference = exports.parseJSONReference = exports.parseReferenceExpression = exports.parseReferenceExpressionOrList = exports.parseSimpleReferenceExpression = void 0;\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst reference_node_js_1 = require(\"../operation-node/reference-node.js\");\nconst table_node_js_1 = require(\"../operation-node/table-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst order_by_parser_js_1 = require(\"./order-by-parser.js\");\nconst operator_node_js_1 = require(\"../operation-node/operator-node.js\");\nconst json_reference_node_js_1 = require(\"../operation-node/json-reference-node.js\");\nconst json_operator_chain_node_js_1 = require(\"../operation-node/json-operator-chain-node.js\");\nconst json_path_node_js_1 = require(\"../operation-node/json-path-node.js\");\nfunction parseSimpleReferenceExpression(exp) {\n    if ((0, object_utils_js_1.isString)(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexports.parseSimpleReferenceExpression = parseSimpleReferenceExpression;\nfunction parseReferenceExpressionOrList(arg) {\n    if ((0, object_utils_js_1.isReadonlyArray)(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexports.parseReferenceExpressionOrList = parseReferenceExpressionOrList;\nfunction parseReferenceExpression(exp) {\n    if ((0, expression_parser_js_1.isExpressionOrFactory)(exp)) {\n        return (0, expression_parser_js_1.parseExpression)(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexports.parseReferenceExpression = parseReferenceExpression;\nfunction parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if ((0, operator_node_js_1.isJSONOperator)(op)) {\n        return json_reference_node_js_1.JSONReferenceNode.create(referenceNode, json_operator_chain_node_js_1.JSONOperatorChainNode.create(operator_node_js_1.OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if ((0, operator_node_js_1.isJSONOperator)(opWithoutLastChar)) {\n        return json_reference_node_js_1.JSONReferenceNode.create(referenceNode, json_path_node_js_1.JSONPathNode.create(operator_node_js_1.OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexports.parseJSONReference = parseJSONReference;\nfunction parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return reference_node_js_1.ReferenceNode.create(column_node_js_1.ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexports.parseStringReference = parseStringReference;\nfunction parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return alias_node_js_1.AliasNode.create(parseStringReference(columnRef), identifier_node_js_1.IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexports.parseAliasedStringReference = parseAliasedStringReference;\nfunction parseColumnName(column) {\n    return column_node_js_1.ColumnNode.create(column);\n}\nexports.parseColumnName = parseColumnName;\nfunction parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!(0, order_by_parser_js_1.isOrderByDirection)(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return (0, order_by_parser_js_1.parseOrderBy)([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nexports.parseOrderedColumnName = parseOrderedColumnName;\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return reference_node_js_1.ReferenceNode.create(column_node_js_1.ColumnNode.create(column), table_node_js_1.TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return reference_node_js_1.ReferenceNode.create(column_node_js_1.ColumnNode.create(column), table_node_js_1.TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrimitiveValueListNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.PrimitiveValueListNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'PrimitiveValueListNode',\n            values: (0, object_utils_js_1.freeze)([...values]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueListNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ValueListNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ValueListNode',\n            values: (0, object_utils_js_1.freeze)(values),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ValueNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSafeImmediateValue = exports.isSafeImmediateValue = exports.parseValueExpression = exports.parseValueExpressionOrList = void 0;\nconst primitive_value_list_node_js_1 = require(\"../operation-node/primitive-value-list-node.js\");\nconst value_list_node_js_1 = require(\"../operation-node/value-list-node.js\");\nconst value_node_js_1 = require(\"../operation-node/value-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nfunction parseValueExpressionOrList(arg) {\n    if ((0, object_utils_js_1.isReadonlyArray)(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexports.parseValueExpressionOrList = parseValueExpressionOrList;\nfunction parseValueExpression(exp) {\n    if ((0, expression_parser_js_1.isExpressionOrFactory)(exp)) {\n        return (0, expression_parser_js_1.parseExpression)(exp);\n    }\n    return value_node_js_1.ValueNode.create(exp);\n}\nexports.parseValueExpression = parseValueExpression;\nfunction isSafeImmediateValue(value) {\n    return (0, object_utils_js_1.isNumber)(value) || (0, object_utils_js_1.isBoolean)(value) || (0, object_utils_js_1.isNull)(value);\n}\nexports.isSafeImmediateValue = isSafeImmediateValue;\nfunction parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return value_node_js_1.ValueNode.createImmediate(value);\n}\nexports.parseSafeImmediateValue = parseSafeImmediateValue;\nfunction parseValueExpressionList(arg) {\n    if (arg.some(expression_parser_js_1.isExpressionOrFactory)) {\n        return value_list_node_js_1.ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return primitive_value_list_node_js_1.PrimitiveValueListNode.create(arg);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParensNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ParensNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFilterList = exports.parseFilterObject = exports.parseReferentialBinaryOperation = exports.parseValueBinaryOperation = exports.parseValueBinaryOperationOrExpression = void 0;\nconst binary_operation_node_js_1 = require(\"../operation-node/binary-operation-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst operator_node_js_1 = require(\"../operation-node/operator-node.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nconst value_parser_js_1 = require(\"./value-parser.js\");\nconst value_node_js_1 = require(\"../operation-node/value-node.js\");\nconst and_node_js_1 = require(\"../operation-node/and-node.js\");\nconst parens_node_js_1 = require(\"../operation-node/parens-node.js\");\nconst or_node_js_1 = require(\"../operation-node/or-node.js\");\nfunction parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return (0, value_parser_js_1.parseValueExpression)(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexports.parseValueBinaryOperationOrExpression = parseValueBinaryOperationOrExpression;\nfunction parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(left), parseOperator(operator), value_node_js_1.ValueNode.createImmediate(right));\n    }\n    return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(left), parseOperator(operator), (0, value_parser_js_1.parseValueExpressionOrList)(right));\n}\nexports.parseValueBinaryOperation = parseValueBinaryOperation;\nfunction parseReferentialBinaryOperation(left, operator, right) {\n    return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(left), parseOperator(operator), (0, reference_parser_js_1.parseReferenceExpression)(right));\n}\nexports.parseReferentialBinaryOperation = parseReferentialBinaryOperation;\nfunction parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !(0, object_utils_js_1.isUndefined)(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexports.parseFilterObject = parseFilterObject;\nfunction parseFilterList(list, combinator) {\n    const combine = combinator === 'and' ? and_node_js_1.AndNode.create : or_node_js_1.OrNode.create;\n    if (list.length === 0) {\n        return value_node_js_1.ValueNode.createImmediate(combinator === 'and');\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1) {\n        return parens_node_js_1.ParensNode.create(node);\n    }\n    return node;\n}\nexports.parseFilterList = parseFilterList;\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return (0, object_utils_js_1.isNull)(value) || (0, object_utils_js_1.isBoolean)(value);\n}\nfunction parseOperator(operator) {\n    if ((0, object_utils_js_1.isString)(operator) && operator_node_js_1.OPERATORS.includes(operator)) {\n        return operator_node_js_1.OperatorNode.create(operator);\n    }\n    if ((0, operation_node_source_js_1.isOperationNodeSource)(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return (0, operation_node_source_js_1.isOperationNodeSource)(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderByNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.OrderByNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OrderByNode',\n            items: (0, object_utils_js_1.freeze)([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...orderBy,\n            items: (0, object_utils_js_1.freeze)([...orderBy.items, ...items]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionByNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.PartitionByNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'PartitionByNode',\n            items: (0, object_utils_js_1.freeze)(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...partitionBy,\n            items: (0, object_utils_js_1.freeze)([...partitionBy.items, ...items]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OverNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst order_by_node_js_1 = require(\"./order-by-node.js\");\nconst partition_by_node_js_1 = require(\"./partition-by-node.js\");\n/**\n * @internal\n */\nexports.OverNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? order_by_node_js_1.OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : order_by_node_js_1.OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? partition_by_node_js_1.PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : partition_by_node_js_1.PartitionByNode.create(items),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FromNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.FromNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'FromNode',\n            froms: (0, object_utils_js_1.freeze)(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return (0, object_utils_js_1.freeze)({\n            ...from,\n            froms: (0, object_utils_js_1.freeze)([...from.froms, ...froms]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GroupByNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.GroupByNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'GroupByNode',\n            items: (0, object_utils_js_1.freeze)(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...groupBy,\n            items: (0, object_utils_js_1.freeze)([...groupBy.items, ...items]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HavingNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst and_node_js_1 = require(\"./and-node.js\");\nconst or_node_js_1 = require(\"./or-node.js\");\n/**\n * @internal\n */\nexports.HavingNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...havingNode,\n            having: operator === 'And'\n                ? and_node_js_1.AndNode.create(havingNode.having, operation)\n                : or_node_js_1.OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectQueryNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst from_node_js_1 = require(\"./from-node.js\");\nconst group_by_node_js_1 = require(\"./group-by-node.js\");\nconst having_node_js_1 = require(\"./having-node.js\");\nconst order_by_node_js_1 = require(\"./order-by-node.js\");\n/**\n * @internal\n */\nexports.SelectQueryNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectQueryNode',\n            from: from_node_js_1.FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            selections: select.selections\n                ? (0, object_utils_js_1.freeze)([...select.selections, ...selections])\n                : (0, object_utils_js_1.freeze)(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            distinctOn: select.distinctOn\n                ? (0, object_utils_js_1.freeze)([...select.distinctOn, ...expressions])\n                : (0, object_utils_js_1.freeze)(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? (0, object_utils_js_1.freeze)([...select.frontModifiers, modifier])\n                : (0, object_utils_js_1.freeze)([modifier]),\n        });\n    },\n    cloneWithEndModifier(select, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            endModifiers: select.endModifiers\n                ? (0, object_utils_js_1.freeze)([...select.endModifiers, modifier])\n                : (0, object_utils_js_1.freeze)([modifier]),\n        });\n    },\n    cloneWithOrderByItems(selectNode, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            orderBy: selectNode.orderBy\n                ? order_by_node_js_1.OrderByNode.cloneWithItems(selectNode.orderBy, items)\n                : order_by_node_js_1.OrderByNode.create(items),\n        });\n    },\n    cloneWithGroupByItems(selectNode, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? group_by_node_js_1.GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : group_by_node_js_1.GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            having: selectNode.having\n                ? having_node_js_1.HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : having_node_js_1.HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return (0, object_utils_js_1.freeze)({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? (0, object_utils_js_1.freeze)([...selectNode.setOperations, ...setOperations])\n                : (0, object_utils_js_1.freeze)([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            offset: undefined,\n        });\n    },\n    cloneWithoutOrderBy(select) {\n        return (0, object_utils_js_1.freeze)({\n            ...select,\n            orderBy: undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.preventAwait = void 0;\nfunction preventAwait(clazz, message) {\n    Object.defineProperties(clazz.prototype, {\n        then: {\n            enumerable: false,\n            value: () => {\n                throw new Error(message);\n            },\n        },\n    });\n}\nexports.preventAwait = preventAwait;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JoinBuilder = void 0;\nconst join_node_js_1 = require(\"../operation-node/join-node.js\");\nconst raw_node_js_1 = require(\"../operation-node/raw-node.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: join_node_js_1.JoinNode.cloneWithOn(this.#props.joinNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: join_node_js_1.JoinNode.cloneWithOn(this.#props.joinNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: join_node_js_1.JoinNode.cloneWithOn(this.#props.joinNode, raw_node_js_1.RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\nexports.JoinBuilder = JoinBuilder;\n(0, prevent_await_js_1.preventAwait)(JoinBuilder, \"don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionByItemNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.PartitionByItemNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parsePartitionBy = void 0;\nconst partition_by_item_node_js_1 = require(\"../operation-node/partition-by-item-node.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nfunction parsePartitionBy(partitionBy) {\n    return (0, reference_parser_js_1.parseReferenceExpressionOrList)(partitionBy).map(partition_by_item_node_js_1.PartitionByItemNode.create);\n}\nexports.parsePartitionBy = parsePartitionBy;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OverBuilder = void 0;\nconst over_node_js_1 = require(\"../operation-node/over-node.js\");\nconst order_by_parser_js_1 = require(\"../parser/order-by-parser.js\");\nconst partition_by_parser_js_1 = require(\"../parser/partition-by-parser.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Adds an order by clause item inside the over function.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.orderBy('first_name', 'asc').orderBy('last_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(order by \"first_name\" asc, \"last_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new OverBuilder({\n            overNode: over_node_js_1.OverNode.cloneWithOrderByItems(this.#props.overNode, (0, order_by_parser_js_1.parseOrderBy)([orderBy, direction])),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: over_node_js_1.OverNode.cloneWithPartitionByItems(this.#props.overNode, (0, partition_by_parser_js_1.parsePartitionBy)(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\nexports.OverBuilder = OverBuilder;\n(0, prevent_await_js_1.preventAwait)(OverBuilder, \"don't await OverBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectionNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst reference_node_js_1 = require(\"./reference-node.js\");\nconst select_all_node_js_1 = require(\"./select-all-node.js\");\n/**\n * @internal\n */\nexports.SelectionNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectionNode',\n            selection: select_all_node_js_1.SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SelectionNode',\n            selection: reference_node_js_1.ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSelectAll = exports.parseSelectArg = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst selection_node_js_1 = require(\"../operation-node/selection-node.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nconst dynamic_reference_builder_js_1 = require(\"../dynamic/dynamic-reference-builder.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nconst table_parser_js_1 = require(\"./table-parser.js\");\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nfunction parseSelectArg(selection) {\n    if ((0, object_utils_js_1.isFunction)(selection)) {\n        return parseSelectArg(selection((0, expression_builder_js_1.expressionBuilder)()));\n    }\n    else if ((0, object_utils_js_1.isReadonlyArray)(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nexports.parseSelectArg = parseSelectArg;\nfunction parseSelectExpression(selection) {\n    if ((0, object_utils_js_1.isString)(selection)) {\n        return selection_node_js_1.SelectionNode.create((0, reference_parser_js_1.parseAliasedStringReference)(selection));\n    }\n    else if ((0, dynamic_reference_builder_js_1.isDynamicReferenceBuilder)(selection)) {\n        return selection_node_js_1.SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return selection_node_js_1.SelectionNode.create((0, expression_parser_js_1.parseAliasedExpression)(selection));\n    }\n}\nfunction parseSelectAll(table) {\n    if (!table) {\n        return [selection_node_js_1.SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nexports.parseSelectAll = parseSelectAll;\nfunction parseSelectAllArg(table) {\n    if ((0, object_utils_js_1.isString)(table)) {\n        return selection_node_js_1.SelectionNode.createSelectAllFromTable((0, table_parser_js_1.parseTable)(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValuesNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ValuesNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ValuesNode',\n            values: (0, object_utils_js_1.freeze)(values),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultInsertValueNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.DefaultInsertValueNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseInsertExpression = void 0;\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst primitive_value_list_node_js_1 = require(\"../operation-node/primitive-value-list-node.js\");\nconst value_list_node_js_1 = require(\"../operation-node/value-list-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst value_parser_js_1 = require(\"./value-parser.js\");\nconst values_node_js_1 = require(\"../operation-node/values-node.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nconst default_insert_value_node_js_1 = require(\"../operation-node/default-insert-value-node.js\");\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nfunction parseInsertExpression(arg) {\n    const objectOrList = (0, object_utils_js_1.isFunction)(arg) ? arg((0, expression_builder_js_1.expressionBuilder)()) : arg;\n    const list = (0, object_utils_js_1.isReadonlyArray)(objectOrList)\n        ? objectOrList\n        : (0, object_utils_js_1.freeze)([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nexports.parseInsertExpression = parseInsertExpression;\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        (0, object_utils_js_1.freeze)([...columns.keys()].map(column_node_js_1.ColumnNode.create)),\n        values_node_js_1.ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if ((0, object_utils_js_1.isUndefined)(columnIdx)) {\n            continue;\n        }\n        const value = row[col];\n        if ((0, object_utils_js_1.isUndefined)(value) || (0, expression_parser_js_1.isExpressionOrFactory)(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = rowColumns.length < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = default_insert_value_node_js_1.DefaultInsertValueNode.create();\n        return value_list_node_js_1.ValueListNode.create(rowValues.map((it) => (0, object_utils_js_1.isUndefined)(it) ? defaultValue : (0, value_parser_js_1.parseValueExpression)(it)));\n    }\n    return primitive_value_list_node_js_1.PrimitiveValueListNode.create(rowValues);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertQueryNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.InsertQueryNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateQueryNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst from_node_js_1 = require(\"./from-node.js\");\n/**\n * @internal\n */\nexports.UpdateQueryNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(table, withNode) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'UpdateQueryNode',\n            table,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return (0, object_utils_js_1.freeze)({\n            ...updateQuery,\n            from: updateQuery.from\n                ? from_node_js_1.FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : from_node_js_1.FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return (0, object_utils_js_1.freeze)({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? (0, object_utils_js_1.freeze)([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsingNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.UsingNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'UsingNode',\n            tables: (0, object_utils_js_1.freeze)(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return (0, object_utils_js_1.freeze)({\n            ...using,\n            tables: (0, object_utils_js_1.freeze)([...using.tables, ...tables]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteQueryNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst from_node_js_1 = require(\"./from-node.js\");\nconst order_by_node_js_1 = require(\"./order-by-node.js\");\nconst using_node_js_1 = require(\"./using-node.js\");\n/**\n * @internal\n */\nexports.DeleteQueryNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DeleteQueryNode',\n            from: from_node_js_1.FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithOrderByItems(deleteNode, items) {\n        return (0, object_utils_js_1.freeze)({\n            ...deleteNode,\n            orderBy: deleteNode.orderBy\n                ? order_by_node_js_1.OrderByNode.cloneWithItems(deleteNode.orderBy, items)\n                : order_by_node_js_1.OrderByNode.create(items),\n        });\n    },\n    cloneWithLimit(deleteNode, limit) {\n        return (0, object_utils_js_1.freeze)({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return (0, object_utils_js_1.freeze)({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? using_node_js_1.UsingNode.cloneWithTables(deleteNode.using, tables)\n                : using_node_js_1.UsingNode.create(tables),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WhereNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst and_node_js_1 = require(\"./and-node.js\");\nconst or_node_js_1 = require(\"./or-node.js\");\n/**\n * @internal\n */\nexports.WhereNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...whereNode,\n            where: operator === 'And'\n                ? and_node_js_1.AndNode.create(whereNode.where, operation)\n                : or_node_js_1.OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReturningNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ReturningNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ReturningNode',\n            selections: (0, object_utils_js_1.freeze)(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return (0, object_utils_js_1.freeze)({\n            ...returning,\n            selections: returning.selections\n                ? (0, object_utils_js_1.freeze)([...returning.selections, ...selections])\n                : (0, object_utils_js_1.freeze)(selections),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplainNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ExplainNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryNode = void 0;\nconst insert_query_node_js_1 = require(\"./insert-query-node.js\");\nconst select_query_node_js_1 = require(\"./select-query-node.js\");\nconst update_query_node_js_1 = require(\"./update-query-node.js\");\nconst delete_query_node_js_1 = require(\"./delete-query-node.js\");\nconst where_node_js_1 = require(\"./where-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst returning_node_js_1 = require(\"./returning-node.js\");\nconst explain_node_js_1 = require(\"./explain-node.js\");\n/**\n * @internal\n */\nexports.QueryNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return (select_query_node_js_1.SelectQueryNode.is(node) ||\n            insert_query_node_js_1.InsertQueryNode.is(node) ||\n            update_query_node_js_1.UpdateQueryNode.is(node) ||\n            delete_query_node_js_1.DeleteQueryNode.is(node));\n    },\n    cloneWithWhere(node, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            where: node.where\n                ? where_node_js_1.WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : where_node_js_1.WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            joins: node.joins ? (0, object_utils_js_1.freeze)([...node.joins, join]) : (0, object_utils_js_1.freeze)([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            returning: node.returning\n                ? returning_node_js_1.ReturningNode.cloneWithSelections(node.returning, selections)\n                : returning_node_js_1.ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutWhere(node) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            explain: explain_node_js_1.ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnUpdateNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ColumnUpdateNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseUpdateExpression = void 0;\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst column_update_node_js_1 = require(\"../operation-node/column-update-node.js\");\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst value_parser_js_1 = require(\"./value-parser.js\");\nfunction parseUpdateExpression(update) {\n    const updateObj = (0, object_utils_js_1.isFunction)(update) ? update((0, expression_builder_js_1.expressionBuilder)()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return column_update_node_js_1.ColumnUpdateNode.create(column_node_js_1.ColumnNode.create(key), (0, value_parser_js_1.parseValueExpression)(value));\n    });\n}\nexports.parseUpdateExpression = parseUpdateExpression;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OnDuplicateKeyNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.OnDuplicateKeyNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertResult = void 0;\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * const result = await db\n *   .insertInto('person')\n *   .values(person)\n *   .executeTakeFirst()\n *\n * console.log(result.insertId)\n * ```\n */\nclass InsertResult {\n    /**\n     * The auto incrementing primary key\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\nexports.InsertResult = InsertResult;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNoResultErrorConstructor = exports.NoResultError = void 0;\nclass NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexports.NoResultError = NoResultError;\nfunction isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\nexports.isNoResultErrorConstructor = isNoResultErrorConstructor;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OnConflictNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst where_node_js_1 = require(\"./where-node.js\");\n/**\n * @internal\n */\nexports.OnConflictNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            indexWhere: node.indexWhere\n                ? where_node_js_1.WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : where_node_js_1.WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            indexWhere: node.indexWhere\n                ? where_node_js_1.WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : where_node_js_1.WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            updateWhere: node.updateWhere\n                ? where_node_js_1.WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : where_node_js_1.WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            updateWhere: node.updateWhere\n                ? where_node_js_1.WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : where_node_js_1.WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OnConflictUpdateBuilder = exports.OnConflictDoNothingBuilder = exports.OnConflictBuilder = void 0;\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst on_conflict_node_js_1 = require(\"../operation-node/on-conflict-node.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst update_set_parser_js_1 = require(\"../parser/update-set-parser.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = column_node_js_1.ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? (0, object_utils_js_1.freeze)([...this.#props.onConflictNode.columns, columnNode])\n                    : (0, object_utils_js_1.freeze)([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(column_node_js_1.ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? (0, object_utils_js_1.freeze)([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : (0, object_utils_js_1.freeze)(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: identifier_node_js_1.IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doNothing()\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doUpdateSet({ first_name })\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet((eb) => ({\n     *       first_name: eb.ref('excluded.first_name'),\n     *       last_name: eb.ref('excluded.last_name')\n     *     }))\n     *   )\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: (0, update_set_parser_js_1.parseUpdateExpression)(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexports.OnConflictBuilder = OnConflictBuilder;\n(0, prevent_await_js_1.preventAwait)(OnConflictBuilder, \"don't await OnConflictBuilder instances.\");\nclass OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\nexports.OnConflictDoNothingBuilder = OnConflictDoNothingBuilder;\n(0, prevent_await_js_1.preventAwait)(OnConflictDoNothingBuilder, \"don't await OnConflictDoNothingBuilder instances.\");\nclass OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: on_conflict_node_js_1.OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\nexports.OnConflictUpdateBuilder = OnConflictUpdateBuilder;\n(0, prevent_await_js_1.preventAwait)(OnConflictUpdateBuilder, \"don't await OnConflictUpdateBuilder instances.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertQueryBuilder = void 0;\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst insert_values_parser_js_1 = require(\"../parser/insert-values-parser.js\");\nconst insert_query_node_js_1 = require(\"../operation-node/insert-query-node.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst update_set_parser_js_1 = require(\"../parser/update-set-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst on_duplicate_key_node_js_1 = require(\"../operation-node/on-duplicate-key-node.js\");\nconst insert_result_js_1 = require(\"./insert-result.js\");\nconst no_result_error_js_1 = require(\"./no-result-error.js\");\nconst expression_parser_js_1 = require(\"../parser/expression-parser.js\");\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst on_conflict_builder_js_1 = require(\"./on-conflict-builder.js\");\nconst on_conflict_node_js_1 = require(\"../operation-node/on-conflict-node.js\");\nclass InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    values(insert) {\n        const [columns, values] = (0, insert_values_parser_js_1.parseInsertExpression)(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: (0, object_utils_js_1.freeze)(columns.map(column_node_js_1.ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method:\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.val(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"first_name\", $2 as \"last_name\" from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: (0, expression_parser_js_1.parseExpression)(expression),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * This is only supported on some dialects like MySQL. On most dialects you should\n     * use the {@link onConflict} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values(values)\n     *   .execute()\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                ignore: true,\n            }),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (lower(name))\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto'')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * where \"excluded\".\"name\" != $4\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new on_conflict_builder_js_1.OnConflictBuilder({\n                    onConflictNode: on_conflict_node_js_1.OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values(values)\n     *   .onDuplicateKeyUpdate({ species: 'hamster' })\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: insert_query_node_js_1.InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: on_duplicate_key_node_js_1.OnDuplicateKeyNode.create((0, update_set_parser_js_1.parseUpdateExpression)(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectArg)(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectAll)()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (qb) => qb\n     *     .insertInto('person')\n     *     .values(person)\n     *     .returning('id')\n     *     .$assertType<{ id: string }>()\n     *   )\n     *   .with('new_pet', (qb) => qb\n     *     .insertInto('pet')\n     *     .values((eb) => ({ owner_id: eb.selectFrom('new_person').select('id'), ...pet }))\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new insert_result_js_1.InsertResult(result.insertId, \n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = no_result_error_js_1.NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = (0, no_result_error_js_1.isNoResultErrorConstructor)(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\nexports.InsertQueryBuilder = InsertQueryBuilder;\n(0, prevent_await_js_1.preventAwait)(InsertQueryBuilder, \"don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteResult = void 0;\nclass DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\nexports.DeleteResult = DeleteResult;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LimitNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst value_node_js_1 = require(\"./value-node.js\");\n/**\n * @internal\n */\nexports.LimitNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'LimitNode',\n            limit: value_node_js_1.ValueNode.create(limit),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteQueryBuilder = void 0;\nconst join_parser_js_1 = require(\"../parser/join-parser.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst no_result_error_js_1 = require(\"./no-result-error.js\");\nconst delete_result_js_1 = require(\"./delete-result.js\");\nconst delete_query_node_js_1 = require(\"../operation-node/delete-query-node.js\");\nconst limit_node_js_1 = require(\"../operation-node/limit-node.js\");\nconst order_by_parser_js_1 = require(\"../parser/order-by-parser.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nclass DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: delete_query_node_js_1.DeleteQueryNode.cloneWithUsing(this.#props.queryNode, (0, table_parser_js_1.parseTableExpressionOrList)(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('FullJoin', args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectArg)(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectAll)(table)),\n        });\n    }\n    /**\n     * Adds an `order by` clause to the query.\n     *\n     * `orderBy` calls are additive. To order by multiple columns, call `orderBy`\n     * multiple times.\n     *\n     * The first argument is the expression to order by and the second is the\n     * order (`asc` or `desc`).\n     *\n     * An `order by` clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * See {@link SelectQueryBuilder.orderBy} for more examples.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet`\n     * order by `created_at`\n     * limit ?\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: delete_query_node_js_1.DeleteQueryNode.cloneWithOrderByItems(this.#props.queryNode, (0, order_by_parser_js_1.parseOrderBy)([orderBy, direction])),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: delete_query_node_js_1.DeleteQueryNode.cloneWithLimit(this.#props.queryNode, limit_node_js_1.LimitNode.create(limit)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('deleted_person', (qb) => qb\n     *     .deleteFrom('person')\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('deleted_pet', (qb) => qb\n     *     .deleteFrom('pet')\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['deleted_person', 'deleted_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new delete_result_js_1.DeleteResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = no_result_error_js_1.NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = (0, no_result_error_js_1.isNoResultErrorConstructor)(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\nexports.DeleteQueryBuilder = DeleteQueryBuilder;\n(0, prevent_await_js_1.preventAwait)(DeleteQueryBuilder, \"don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateResult = void 0;\nclass UpdateResult {\n    numUpdatedRows;\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\nexports.UpdateResult = UpdateResult;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateQueryBuilder = void 0;\nconst join_parser_js_1 = require(\"../parser/join-parser.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst update_query_node_js_1 = require(\"../operation-node/update-query-node.js\");\nconst update_set_parser_js_1 = require(\"../parser/update-set-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst update_result_js_1 = require(\"./update-result.js\");\nconst no_result_error_js_1 = require(\"./no-result-error.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nclass UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: update_query_node_js_1.UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, (0, table_parser_js_1.parseTableExpressionOrList)(from)),\n        });\n    }\n    innerJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('FullJoin', args)),\n        });\n    }\n    set(update) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: update_query_node_js_1.UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, (0, update_set_parser_js_1.parseUpdateExpression)(update)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectArg)(selection)),\n        });\n    }\n    returningAll() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithReturning(this.#props.queryNode, (0, select_parser_js_1.parseSelectAll)()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deletedAt: Date; nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new update_result_js_1.UpdateResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            // TODO: https://github.com/kysely-org/kysely/pull/431#discussion_r1172330899\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = no_result_error_js_1.NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = (0, no_result_error_js_1.isNoResultErrorConstructor)(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\nexports.UpdateQueryBuilder = UpdateQueryBuilder;\n(0, prevent_await_js_1.preventAwait)(UpdateQueryBuilder, \"don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonTableExpressionNameNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\nconst table_node_js_1 = require(\"./table-node.js\");\n/**\n * @internal\n */\nexports.CommonTableExpressionNameNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CommonTableExpressionNameNode',\n            table: table_node_js_1.TableNode.create(tableName),\n            columns: columnNames\n                ? (0, object_utils_js_1.freeze)(columnNames.map(column_node_js_1.ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonTableExpressionNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.CommonTableExpressionNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CTEBuilder = void 0;\nconst common_table_expression_node_js_1 = require(\"../operation-node/common-table-expression-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: common_table_expression_node_js_1.CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: common_table_expression_node_js_1.CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\nexports.CTEBuilder = CTEBuilder;\n(0, prevent_await_js_1.preventAwait)(CTEBuilder, \"don't await CTEBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseCommonTableExpression = void 0;\nconst common_table_expression_name_node_js_1 = require(\"../operation-node/common-table-expression-name-node.js\");\nconst parse_utils_js_1 = require(\"./parse-utils.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst cte_builder_js_1 = require(\"../query-builder/cte-builder.js\");\nconst common_table_expression_node_js_1 = require(\"../operation-node/common-table-expression-node.js\");\nfunction parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression((0, parse_utils_js_1.createQueryCreator)()).toOperationNode();\n    if ((0, object_utils_js_1.isFunction)(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return common_table_expression_node_js_1.CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nexports.parseCommonTableExpression = parseCommonTableExpression;\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new cte_builder_js_1.CTEBuilder({\n            node: common_table_expression_node_js_1.CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return common_table_expression_name_node_js_1.CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return common_table_expression_name_node_js_1.CommonTableExpressionNameNode.create(name);\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.WithNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'WithNode',\n            expressions: (0, object_utils_js_1.freeze)([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return (0, object_utils_js_1.freeze)({\n            ...withNode,\n            expressions: (0, object_utils_js_1.freeze)([...withNode.expressions, expression]),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomString = void 0;\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nfunction randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nexports.randomString = randomString;\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createQueryId = void 0;\nconst random_string_js_1 = require(\"./random-string.js\");\nfunction createQueryId() {\n    return new LazyQueryId();\n}\nexports.createQueryId = createQueryId;\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = (0, random_string_js_1.randomString)(8);\n        }\n        return this.#queryId;\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requireAllProps = void 0;\n/**\n * Helper function to check listed properties according to given type. Check if all properties has been used when object is initialised.\n *\n * Example use:\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n *\n * // propB has to be mentioned even it is optional. It still should be initialized with undefined.\n * const a: SomeType = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n *\n * // checked type is implicit for variable.\n * const b = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n * ```\n *\n * Wrong use of this helper:\n *\n * 1. Omit checked type - all checked properties will be expect as of type never\n *\n * ```ts\n * const z: SomeType = requireAllProps({ propC: \"no type will work\" });\n * ```\n *\n * 2. Apply to spreaded object - there is no way how to check in compile time if spreaded object contains all properties\n *\n * ```ts\n * const y: SomeType = { propA: \"\" }; // valid object according to SomeType declaration\n * const x = requireAllProps<SomeType>( { ... y } );\n * ```\n *\n * @param obj object to check if all properties has been used\n * @returns untouched obj parameter is returned\n */\nfunction requireAllProps(obj) {\n    return obj;\n}\nexports.requireAllProps = requireAllProps;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationNodeTransformer = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst require_all_props_js_1 = require(\"../util/require-all-props.js\");\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node),\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n * const tree = transformer.transformNode(tree)\n * ```\n */\nclass OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = (0, object_utils_js_1.freeze)({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n    });\n    transformNode(node) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node);\n        this.nodeStack.pop();\n        return (0, object_utils_js_1.freeze)(out);\n    }\n    transformNodeImpl(node) {\n        return this.#transformers[node.kind](node);\n    }\n    transformNodeList(list) {\n        if (!list) {\n            return list;\n        }\n        return (0, object_utils_js_1.freeze)(list.map((node) => this.transformNode(node)));\n    }\n    transformSelectQuery(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from),\n            selections: this.transformNodeList(node.selections),\n            distinctOn: this.transformNodeList(node.distinctOn),\n            joins: this.transformNodeList(node.joins),\n            groupBy: this.transformNode(node.groupBy),\n            orderBy: this.transformNode(node.orderBy),\n            where: this.transformNode(node.where),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            limit: this.transformNode(node.limit),\n            offset: this.transformNode(node.offset),\n            with: this.transformNode(node.with),\n            having: this.transformNode(node.having),\n            explain: this.transformNode(node.explain),\n            setOperations: this.transformNodeList(node.setOperations),\n        });\n    }\n    transformSelection(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection),\n        });\n    }\n    transformColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAlias(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node),\n            alias: this.transformNode(node.alias),\n        });\n    }\n    transformTable(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'TableNode',\n            table: this.transformNode(node.table),\n        });\n    }\n    transformFrom(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms),\n        });\n    }\n    transformReference(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column),\n            table: this.transformNode(node.table),\n        });\n    }\n    transformAnd(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AndNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformOr(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OrNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformValueList(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformParens(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node),\n        });\n    }\n    transformJoin(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table),\n            on: this.transformNode(node.on),\n        });\n    }\n    transformRaw(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'RawNode',\n            sqlFragments: (0, object_utils_js_1.freeze)([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters),\n        });\n    }\n    transformWhere(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where),\n        });\n    }\n    transformInsertQuery(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into),\n            columns: this.transformNodeList(node.columns),\n            values: this.transformNode(node.values),\n            returning: this.transformNode(node.returning),\n            onConflict: this.transformNode(node.onConflict),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey),\n            with: this.transformNode(node.with),\n            ignore: node.ignore,\n            replace: node.replace,\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformValues(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDeleteQuery(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from),\n            using: this.transformNode(node.using),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            orderBy: this.transformNode(node.orderBy),\n            limit: this.transformNode(node.limit),\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformReturning(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections),\n        });\n    }\n    transformCreateTable(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            constraints: this.transformNodeList(node.constraints),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n        });\n    }\n    transformColumnDefinition(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            references: this.transformNode(node.references),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo),\n            check: this.transformNode(node.check),\n            generated: this.transformNode(node.generated),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n        });\n    }\n    transformAddColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformDropTable(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformOrderByItem(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy),\n            direction: this.transformNode(node.direction),\n        });\n    }\n    transformGroupBy(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformGroupByItem(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy),\n        });\n    }\n    transformUpdateQuery(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table),\n            from: this.transformNode(node.from),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            updates: this.transformNodeList(node.updates),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformColumnUpdate(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column),\n            value: this.transformNode(node.value),\n        });\n    }\n    transformLimit(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit),\n        });\n    }\n    transformOffset(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset),\n        });\n    }\n    transformOnConflict(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns),\n            constraint: this.transformNode(node.constraint),\n            indexExpression: this.transformNode(node.indexExpression),\n            indexWhere: this.transformNode(node.indexWhere),\n            updates: this.transformNodeList(node.updates),\n            updateWhere: this.transformNode(node.updateWhere),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates),\n        });\n    }\n    transformCreateIndex(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where),\n        });\n    }\n    transformList(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformDropIndex(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformUniqueConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformForeignKeyConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            references: this.transformNode(node.references),\n            name: this.transformNode(node.name),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformSetOperation(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression),\n            all: node.all,\n        });\n    }\n    transformReferences(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformWith(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformCommonTableExpressionName(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n        });\n    }\n    transformHaving(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having),\n        });\n    }\n    transformCreateSchema(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table),\n            renameTo: this.transformNode(node.renameTo),\n            setSchema: this.transformNode(node.setSchema),\n            columnAlterations: this.transformNodeList(node.columnAlterations),\n            addConstraint: this.transformNode(node.addConstraint),\n            dropConstraint: this.transformNode(node.dropConstraint),\n        });\n    }\n    transformDropColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformRenameColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column),\n            renameTo: this.transformNode(node.renameTo),\n        });\n    }\n    transformAlterColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression),\n            setDefault: this.transformNode(node.setDefault),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAddConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint),\n        });\n    }\n    transformDropConstraint(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformCreateView(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns),\n            as: this.transformNode(node.as),\n        });\n    }\n    transformDropView(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformDefaultValue(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue),\n        });\n    }\n    transformOn(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OnNode',\n            on: this.transformNode(node.on),\n        });\n    }\n    transformSelectModifier(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier),\n        });\n    }\n    transformCreateType(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name),\n            enum: this.transformNode(node.enum),\n        });\n    }\n    transformDropType(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options),\n        });\n    }\n    transformSchemableIdentifier(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema),\n            identifier: this.transformNode(node.identifier),\n        });\n    }\n    transformAggregateFunction(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'AggregateFunctionNode',\n            aggregated: this.transformNodeList(node.aggregated),\n            distinct: node.distinct,\n            filter: this.transformNode(node.filter),\n            func: node.func,\n            over: this.transformNode(node.over),\n        });\n    }\n    transformOver(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy),\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformPartitionBy(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformPartitionByItem(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformBinaryOperation(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand),\n            operator: this.transformNode(node.operator),\n            rightOperand: this.transformNode(node.rightOperand),\n        });\n    }\n    transformUnaryOperation(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator),\n            operand: this.transformNode(node.operand),\n        });\n    }\n    transformUsing(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables),\n        });\n    }\n    transformFunction(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments),\n        });\n    }\n    transformCase(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value),\n            when: this.transformNodeList(node.when),\n            else: this.transformNode(node.else),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition),\n            result: this.transformNode(node.result),\n        });\n    }\n    transformJSONReference(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference),\n            traversal: this.transformNode(node.traversal),\n        });\n    }\n    transformJSONPath(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator),\n            pathLegs: this.transformNodeList(node.pathLegs),\n        });\n    }\n    transformJSONPathLeg(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator),\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformTuple(node) {\n        return (0, require_all_props_js_1.requireAllProps)({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDataType(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\nexports.OperationNodeTransformer = OperationNodeTransformer;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithSchemaTransformer = void 0;\nconst alias_node_js_1 = require(\"../../operation-node/alias-node.js\");\nconst identifier_node_js_1 = require(\"../../operation-node/identifier-node.js\");\nconst operation_node_transformer_js_1 = require(\"../../operation-node/operation-node-transformer.js\");\nconst schemable_identifier_node_js_1 = require(\"../../operation-node/schemable-identifier-node.js\");\nconst table_node_js_1 = require(\"../../operation-node/table-node.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = (0, object_utils_js_1.freeze)({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n});\nclass WithSchemaTransformer extends operation_node_transformer_js_1.OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node) {\n        const transformed = super.transformSchemableIdentifier(node);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: identifier_node_js_1.IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node) {\n        const transformed = super.transformReferences(node);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: table_node_js_1.TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && schemable_identifier_node_js_1.SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        const table = table_node_js_1.TableNode.is(node)\n            ? node\n            : alias_node_js_1.AliasNode.is(node) && table_node_js_1.TableNode.is(node.node)\n                ? node.node\n                : null;\n        if (table) {\n            this.#collectSchemableId(table.table, schemableIds);\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\nexports.WithSchemaTransformer = WithSchemaTransformer;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithSchemaPlugin = void 0;\nconst with_schema_transformer_js_1 = require(\"./with-schema-transformer.js\");\nclass WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new with_schema_transformer_js_1.WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\nexports.WithSchemaPlugin = WithSchemaPlugin;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryCreator = void 0;\nconst select_query_builder_js_1 = require(\"./query-builder/select-query-builder.js\");\nconst insert_query_builder_js_1 = require(\"./query-builder/insert-query-builder.js\");\nconst delete_query_builder_js_1 = require(\"./query-builder/delete-query-builder.js\");\nconst update_query_builder_js_1 = require(\"./query-builder/update-query-builder.js\");\nconst delete_query_node_js_1 = require(\"./operation-node/delete-query-node.js\");\nconst insert_query_node_js_1 = require(\"./operation-node/insert-query-node.js\");\nconst select_query_node_js_1 = require(\"./operation-node/select-query-node.js\");\nconst update_query_node_js_1 = require(\"./operation-node/update-query-node.js\");\nconst table_parser_js_1 = require(\"./parser/table-parser.js\");\nconst with_parser_js_1 = require(\"./parser/with-parser.js\");\nconst with_node_js_1 = require(\"./operation-node/with-node.js\");\nconst query_id_js_1 = require(\"./util/query-id.js\");\nconst with_schema_plugin_js_1 = require(\"./plugin/with-schema/with-schema-plugin.js\");\nconst object_utils_js_1 = require(\"./util/object-utils.js\");\nconst select_parser_js_1 = require(\"./parser/select-parser.js\");\nclass QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    selectFrom(from) {\n        return (0, select_query_builder_js_1.createSelectQueryBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: select_query_node_js_1.SelectQueryNode.createFrom((0, table_parser_js_1.parseTableExpressionOrList)(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return (0, select_query_builder_js_1.createSelectQueryBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSelections(select_query_node_js_1.SelectQueryNode.create(this.#props.withNode), (0, select_parser_js_1.parseSelectArg)(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirst()\n     * ```\n     */\n    insertInto(table) {\n        return new insert_query_builder_js_1.InsertQueryBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: insert_query_node_js_1.InsertQueryNode.create((0, table_parser_js_1.parseTable)(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a replace query.\n     *\n     * A MySQL-only statement similar to {@link InsertQueryBuilder.onDuplicateKeyUpdate}\n     * that deletes and inserts values on collision instead of updating existing rows.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     */\n    replaceInto(table) {\n        return new insert_query_builder_js_1.InsertQueryBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: insert_query_node_js_1.InsertQueryNode.create((0, table_parser_js_1.parseTable)(table), this.#props.withNode, true),\n        });\n    }\n    deleteFrom(tables) {\n        return new delete_query_builder_js_1.DeleteQueryBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: delete_query_node_js_1.DeleteQueryNode.create((0, table_parser_js_1.parseTableExpressionOrList)(tables), this.#props.withNode),\n        });\n    }\n    updateTable(table) {\n        return new update_query_builder_js_1.UpdateQueryBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#props.executor,\n            queryNode: update_query_node_js_1.UpdateQueryNode.create((0, table_parser_js_1.parseTableExpression)(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = (0, with_parser_js_1.parseCommonTableExpression)(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? with_node_js_1.WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : with_node_js_1.WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = (0, with_parser_js_1.parseCommonTableExpression)(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? with_node_js_1.WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : with_node_js_1.WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)),\n        });\n    }\n}\nexports.QueryCreator = QueryCreator;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Deferred = void 0;\nclass Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\nexports.Deferred = Deferred;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logOnce = void 0;\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nfunction logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\nexports.logOnce = logOnce;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryExecutorBase = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst deferred_js_1 = require(\"../util/deferred.js\");\nconst log_once_js_1 = require(\"../util/log-once.js\");\nconst NO_PLUGINS = (0, object_utils_js_1.freeze)([]);\nclass QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery, queryId) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            const transformedResult = await this.#transformResult(result, queryId);\n            // TODO: remove.\n            warnOfOutdatedDriverOrPlugins(result, transformedResult);\n            return transformedResult;\n        });\n    }\n    async *stream(compiledQuery, chunkSize, queryId) {\n        const connectionDefer = new deferred_js_1.Deferred();\n        const connectionReleaseDefer = new deferred_js_1.Deferred();\n        this.provideConnection(async (connection) => {\n            connectionDefer.resolve(connection);\n            // Lets wait until we don't need connection before returning here (returning releases connection)\n            return await connectionReleaseDefer.promise;\n        }).catch((ex) => connectionDefer.reject(ex));\n        const connection = await connectionDefer.promise;\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, queryId);\n            }\n        }\n        finally {\n            connectionReleaseDefer.resolve();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\nexports.QueryExecutorBase = QueryExecutorBase;\n// TODO: remove.\nfunction warnOfOutdatedDriverOrPlugins(result, transformedResult) {\n    const { numAffectedRows } = result;\n    if ((numAffectedRows === undefined &&\n        result.numUpdatedOrDeletedRows === undefined) ||\n        (numAffectedRows !== undefined &&\n            transformedResult.numAffectedRows !== undefined)) {\n        return;\n    }\n    (0, log_once_js_1.logOnce)('kysely:warning: outdated driver/plugin detected! QueryResult.numUpdatedOrDeletedRows is deprecated and will be removed in a future release.');\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_QUERY_EXECUTOR = exports.NoopQueryExecutor = void 0;\nconst query_executor_base_js_1 = require(\"./query-executor-base.js\");\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nclass NoopQueryExecutor extends query_executor_base_js_1.QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexports.NoopQueryExecutor = NoopQueryExecutor;\nexports.NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createOverBuilder = exports.createJoinBuilder = exports.createQueryCreator = exports.createSelectQueryBuilder = void 0;\nconst join_node_js_1 = require(\"../operation-node/join-node.js\");\nconst over_node_js_1 = require(\"../operation-node/over-node.js\");\nconst select_query_node_js_1 = require(\"../operation-node/select-query-node.js\");\nconst join_builder_js_1 = require(\"../query-builder/join-builder.js\");\nconst over_builder_js_1 = require(\"../query-builder/over-builder.js\");\nconst select_query_builder_js_1 = require(\"../query-builder/select-query-builder.js\");\nconst query_creator_js_1 = require(\"../query-creator.js\");\nconst noop_query_executor_js_1 = require(\"../query-executor/noop-query-executor.js\");\nconst query_id_js_1 = require(\"../util/query-id.js\");\nconst table_parser_js_1 = require(\"./table-parser.js\");\nfunction createSelectQueryBuilder() {\n    return (0, select_query_builder_js_1.createSelectQueryBuilder)({\n        queryId: (0, query_id_js_1.createQueryId)(),\n        executor: noop_query_executor_js_1.NOOP_QUERY_EXECUTOR,\n        queryNode: select_query_node_js_1.SelectQueryNode.createFrom((0, table_parser_js_1.parseTableExpressionOrList)([])),\n    });\n}\nexports.createSelectQueryBuilder = createSelectQueryBuilder;\nfunction createQueryCreator() {\n    return new query_creator_js_1.QueryCreator({\n        executor: noop_query_executor_js_1.NOOP_QUERY_EXECUTOR,\n    });\n}\nexports.createQueryCreator = createQueryCreator;\nfunction createJoinBuilder(joinType, table) {\n    return new join_builder_js_1.JoinBuilder({\n        joinNode: join_node_js_1.JoinNode.create(joinType, (0, table_parser_js_1.parseTableExpression)(table)),\n    });\n}\nexports.createJoinBuilder = createJoinBuilder;\nfunction createOverBuilder() {\n    return new over_builder_js_1.OverBuilder({\n        overNode: over_node_js_1.OverNode.create(),\n    });\n}\nexports.createOverBuilder = createOverBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseJoin = void 0;\nconst join_node_js_1 = require(\"../operation-node/join-node.js\");\nconst table_parser_js_1 = require(\"./table-parser.js\");\nconst binary_operation_parser_js_1 = require(\"./binary-operation-parser.js\");\nconst parse_utils_js_1 = require(\"./parse-utils.js\");\nfunction parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nexports.parseJoin = parseJoin;\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback((0, parse_utils_js_1.createJoinBuilder)(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return join_node_js_1.JoinNode.createWithOn(joinType, (0, table_parser_js_1.parseTableExpression)(from), (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhsColumn, '=', rhsColumn));\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OffsetNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst value_node_js_1 = require(\"./value-node.js\");\n/**\n * @internal\n */\nexports.OffsetNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'OffsetNode',\n            offset: value_node_js_1.ValueNode.create(offset),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GroupByItemNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.GroupByItemNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGroupBy = void 0;\nconst group_by_item_node_js_1 = require(\"../operation-node/group-by-item-node.js\");\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nfunction parseGroupBy(groupBy) {\n    groupBy = (0, object_utils_js_1.isFunction)(groupBy) ? groupBy((0, expression_builder_js_1.expressionBuilder)()) : groupBy;\n    return (0, reference_parser_js_1.parseReferenceExpressionOrList)(groupBy).map(group_by_item_node_js_1.GroupByItemNode.create);\n}\nexports.parseGroupBy = parseGroupBy;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetOperationNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.SetOperationNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSetOperations = void 0;\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nconst set_operation_node_js_1 = require(\"../operation-node/set-operation-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nfunction parseSetOperations(operator, expression, all) {\n    if ((0, object_utils_js_1.isFunction)(expression)) {\n        expression = expression((0, expression_builder_js_1.createExpressionBuilder)());\n    }\n    if (!(0, object_utils_js_1.isReadonlyArray)(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => set_operation_node_js_1.SetOperationNode.create(operator, (0, expression_parser_js_1.parseExpression)(expr), all));\n}\nexports.parseSetOperations = parseSetOperations;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AndWrapper = exports.OrWrapper = exports.AliasedExpressionWrapper = exports.ExpressionWrapper = void 0;\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst and_node_js_1 = require(\"../operation-node/and-node.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst or_node_js_1 = require(\"../operation-node/or-node.js\");\nconst parens_node_js_1 = require(\"../operation-node/parens-node.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nclass ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(or_node_js_1.OrNode.create(this.#node, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)));\n    }\n    and(...args) {\n        return new AndWrapper(and_node_js_1.AndNode.create(this.#node, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexports.ExpressionWrapper = ExpressionWrapper;\nclass AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return alias_node_js_1.AliasNode.create(this.#expr.toOperationNode(), (0, operation_node_source_js_1.isOperationNodeSource)(this.#alias)\n            ? this.#alias.toOperationNode()\n            : identifier_node_js_1.IdentifierNode.create(this.#alias));\n    }\n}\nexports.AliasedExpressionWrapper = AliasedExpressionWrapper;\nclass OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(or_node_js_1.OrNode.create(this.#node, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return parens_node_js_1.ParensNode.create(this.#node);\n    }\n}\nexports.OrWrapper = OrWrapper;\nclass AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(and_node_js_1.AndNode.create(this.#node, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return parens_node_js_1.ParensNode.create(this.#node);\n    }\n}\nexports.AndWrapper = AndWrapper;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSelectQueryBuilder = void 0;\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst select_modifier_node_js_1 = require(\"../operation-node/select-modifier-node.js\");\nconst join_parser_js_1 = require(\"../parser/join-parser.js\");\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst select_query_node_js_1 = require(\"../operation-node/select-query-node.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst order_by_parser_js_1 = require(\"../parser/order-by-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst limit_node_js_1 = require(\"../operation-node/limit-node.js\");\nconst offset_node_js_1 = require(\"../operation-node/offset-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst group_by_parser_js_1 = require(\"../parser/group-by-parser.js\");\nconst no_result_error_js_1 = require(\"./no-result-error.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst set_operation_parser_js_1 = require(\"../parser/set-operation-parser.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst expression_wrapper_js_1 = require(\"../expression/expression-wrapper.js\");\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithWhere(this.#props.queryNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithHaving(this.#props.queryNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithHaving(this.#props.queryNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSelections(this.#props.queryNode, (0, select_parser_js_1.parseSelectArg)(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, (0, reference_parser_js_1.parseReferenceExpressionOrList)(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('ForUpdate')),\n        });\n    }\n    forShare() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('ForShare')),\n        });\n    }\n    forKeyShare() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('ForKeyShare')),\n        });\n    }\n    forNoKeyUpdate() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('ForNoKeyUpdate')),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, select_modifier_node_js_1.SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSelections(this.#props.queryNode, (0, select_parser_js_1.parseSelectAll)(table)),\n        });\n    }\n    innerJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('FullJoin', args)),\n        });\n    }\n    innerJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('LateralInnerJoin', args)),\n        });\n    }\n    leftJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithJoin(this.#props.queryNode, (0, join_parser_js_1.parseJoin)('LateralLeftJoin', args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithOrderByItems(this.#props.queryNode, (0, order_by_parser_js_1.parseOrderBy)(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, (0, group_by_parser_js_1.parseGroupBy)(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithLimit(this.#props.queryNode, limit_node_js_1.LimitNode.create(limit)),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithOffset(this.#props.queryNode, offset_node_js_1.OffsetNode.create(offset)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, (0, set_operation_parser_js_1.parseSetOperations)('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: select_query_node_js_1.SelectQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new expression_wrapper_js_1.ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = no_result_error_js_1.NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = (0, no_result_error_js_1.isNoResultErrorConstructor)(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: query_node_js_1.QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n(0, prevent_await_js_1.preventAwait)(SelectQueryBuilderImpl, \"don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\nfunction createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\nexports.createSelectQueryBuilder = createSelectQueryBuilder;\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return alias_node_js_1.AliasNode.create(this.#queryBuilder.toOperationNode(), identifier_node_js_1.IdentifierNode.create(this.#alias));\n    }\n}\n(0, prevent_await_js_1.preventAwait)(AliasedSelectQueryBuilderImpl, \"don't await AliasedSelectQueryBuilder instances directly. AliasedSelectQueryBuilder should never be executed directly since it's always a part of another query.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateFunctionNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst where_node_js_1 = require(\"./where-node.js\");\n/**\n * @internal\n */\nexports.AggregateFunctionNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return (0, object_utils_js_1.freeze)({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return (0, object_utils_js_1.freeze)({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? where_node_js_1.WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : where_node_js_1.WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return (0, object_utils_js_1.freeze)({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? where_node_js_1.WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : where_node_js_1.WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return (0, object_utils_js_1.freeze)({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.FunctionNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasedAggregateFunctionBuilder = exports.AggregateFunctionBuilder = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst aggregate_function_node_js_1 = require(\"../operation-node/aggregate-function-node.js\");\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst parse_utils_js_1 = require(\"../parser/parse-utils.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nclass AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, (0, binary_operation_parser_js_1.parseReferentialBinaryOperation)(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = (0, parse_utils_js_1.createOverBuilder)();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\nexports.AggregateFunctionBuilder = AggregateFunctionBuilder;\n(0, prevent_await_js_1.preventAwait)(AggregateFunctionBuilder, \"don't await AggregateFunctionBuilder instances. They are never executed directly and are always just a part of a query.\");\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nclass AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return alias_node_js_1.AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), identifier_node_js_1.IdentifierNode.create(this.#alias));\n    }\n}\nexports.AliasedAggregateFunctionBuilder = AliasedAggregateFunctionBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFunctionModule = void 0;\nconst expression_wrapper_js_1 = require(\"../expression/expression-wrapper.js\");\nconst aggregate_function_node_js_1 = require(\"../operation-node/aggregate-function-node.js\");\nconst function_node_js_1 = require(\"../operation-node/function-node.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst aggregate_function_builder_js_1 = require(\"./aggregate-function-builder.js\");\nfunction createFunctionModule() {\n    const fn = (name, args) => {\n        return new expression_wrapper_js_1.ExpressionWrapper(function_node_js_1.FunctionNode.create(name, (0, reference_parser_js_1.parseReferenceExpressionOrList)(args)));\n    };\n    const agg = (name, args) => {\n        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({\n            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create(name, args ? (0, reference_parser_js_1.parseReferenceExpressionOrList)(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(value, ...otherValues) {\n            return fn('coalesce', [value, ...otherValues]);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new aggregate_function_builder_js_1.AggregateFunctionBuilder({\n                aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('count', (0, select_parser_js_1.parseSelectAll)(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n    });\n}\nexports.createFunctionModule = createFunctionModule;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnaryOperationNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.UnaryOperationNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseUnaryOperation = exports.parseNotExists = exports.parseExists = void 0;\nconst operator_node_js_1 = require(\"../operation-node/operator-node.js\");\nconst unary_operation_node_js_1 = require(\"../operation-node/unary-operation-node.js\");\nconst reference_parser_js_1 = require(\"./reference-parser.js\");\nfunction parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexports.parseExists = parseExists;\nfunction parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexports.parseNotExists = parseNotExists;\nfunction parseUnaryOperation(operator, operand) {\n    return unary_operation_node_js_1.UnaryOperationNode.create(operator_node_js_1.OperatorNode.create(operator), (0, reference_parser_js_1.parseReferenceExpression)(operand));\n}\nexports.parseUnaryOperation = parseUnaryOperation;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WhenNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.WhenNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return (0, object_utils_js_1.freeze)({\n            ...whenNode,\n            result,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CaseNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst when_node_js_1 = require(\"./when-node.js\");\n/**\n * @internal\n */\nexports.CaseNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return (0, object_utils_js_1.freeze)({\n            ...caseNode,\n            when: (0, object_utils_js_1.freeze)(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return (0, object_utils_js_1.freeze)({\n            ...caseNode,\n            when: caseNode.when\n                ? (0, object_utils_js_1.freeze)([\n                    ...caseNode.when.slice(0, -1),\n                    when_node_js_1.WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CaseEndBuilder = exports.CaseWhenBuilder = exports.CaseThenBuilder = exports.CaseBuilder = void 0;\nconst expression_wrapper_js_1 = require(\"../expression/expression-wrapper.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst case_node_js_1 = require(\"../operation-node/case-node.js\");\nconst when_node_js_1 = require(\"../operation-node/when-node.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst value_parser_js_1 = require(\"../parser/value-parser.js\");\nclass CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: case_node_js_1.CaseNode.cloneWithWhen(this.#props.node, when_node_js_1.WhenNode.create((0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args))),\n        });\n    }\n}\nexports.CaseBuilder = CaseBuilder;\nclass CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: case_node_js_1.CaseNode.cloneWithThen(this.#props.node, (0, value_parser_js_1.isSafeImmediateValue)(valueExpression)\n                ? (0, value_parser_js_1.parseSafeImmediateValue)(valueExpression)\n                : (0, value_parser_js_1.parseValueExpression)(valueExpression)),\n        });\n    }\n}\nexports.CaseThenBuilder = CaseThenBuilder;\nclass CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: case_node_js_1.CaseNode.cloneWithWhen(this.#props.node, when_node_js_1.WhenNode.create((0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: case_node_js_1.CaseNode.cloneWith(this.#props.node, {\n                else: (0, value_parser_js_1.isSafeImmediateValue)(valueExpression)\n                    ? (0, value_parser_js_1.parseSafeImmediateValue)(valueExpression)\n                    : (0, value_parser_js_1.parseValueExpression)(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new expression_wrapper_js_1.ExpressionWrapper(case_node_js_1.CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new expression_wrapper_js_1.ExpressionWrapper(case_node_js_1.CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexports.CaseWhenBuilder = CaseWhenBuilder;\nclass CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    end() {\n        return new expression_wrapper_js_1.ExpressionWrapper(case_node_js_1.CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new expression_wrapper_js_1.ExpressionWrapper(case_node_js_1.CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexports.CaseEndBuilder = CaseEndBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSONPathLegNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.JSONPathLegNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasedJSONPathBuilder = exports.TraversedJSONPathBuilder = exports.JSONPathBuilder = void 0;\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst json_operator_chain_node_js_1 = require(\"../operation-node/json-operator-chain-node.js\");\nconst json_path_leg_node_js_1 = require(\"../operation-node/json-path-leg-node.js\");\nconst json_path_node_js_1 = require(\"../operation-node/json-path-node.js\");\nconst json_reference_node_js_1 = require(\"../operation-node/json-reference-node.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst value_node_js_1 = require(\"../operation-node/value-node.js\");\nclass JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     * )\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        return new TraversedJSONPathBuilder(json_reference_node_js_1.JSONReferenceNode.cloneWithTraversal(this.#node, json_path_node_js_1.JSONPathNode.is(this.#node.traversal)\n            ? json_path_node_js_1.JSONPathNode.cloneWithLeg(this.#node.traversal, json_path_leg_node_js_1.JSONPathLegNode.create(legType, value))\n            : json_operator_chain_node_js_1.JSONOperatorChainNode.cloneWithValue(this.#node.traversal, value_node_js_1.ValueNode.createImmediate(value))));\n    }\n}\nexports.JSONPathBuilder = JSONPathBuilder;\nclass TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new JSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexports.TraversedJSONPathBuilder = TraversedJSONPathBuilder;\nclass AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return alias_node_js_1.AliasNode.create(this.#jsonPath.toOperationNode(), (0, operation_node_source_js_1.isOperationNodeSource)(this.#alias)\n            ? this.#alias.toOperationNode()\n            : identifier_node_js_1.IdentifierNode.create(this.#alias));\n    }\n}\nexports.AliasedJSONPathBuilder = AliasedJSONPathBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TupleNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.TupleNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'TupleNode',\n            values: (0, object_utils_js_1.freeze)(values),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expressionBuilder = exports.createExpressionBuilder = void 0;\nconst select_query_builder_js_1 = require(\"../query-builder/select-query-builder.js\");\nconst select_query_node_js_1 = require(\"../operation-node/select-query-node.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst with_schema_plugin_js_1 = require(\"../plugin/with-schema/with-schema-plugin.js\");\nconst query_id_js_1 = require(\"../util/query-id.js\");\nconst function_module_js_1 = require(\"../query-builder/function-module.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst parens_node_js_1 = require(\"../operation-node/parens-node.js\");\nconst expression_wrapper_js_1 = require(\"./expression-wrapper.js\");\nconst operator_node_js_1 = require(\"../operation-node/operator-node.js\");\nconst unary_operation_parser_js_1 = require(\"../parser/unary-operation-parser.js\");\nconst value_parser_js_1 = require(\"../parser/value-parser.js\");\nconst noop_query_executor_js_1 = require(\"../query-executor/noop-query-executor.js\");\nconst case_builder_js_1 = require(\"../query-builder/case-builder.js\");\nconst case_node_js_1 = require(\"../operation-node/case-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst json_path_builder_js_1 = require(\"../query-builder/json-path-builder.js\");\nconst binary_operation_node_js_1 = require(\"../operation-node/binary-operation-node.js\");\nconst and_node_js_1 = require(\"../operation-node/and-node.js\");\nconst select_parser_js_1 = require(\"../parser/select-parser.js\");\nconst tuple_node_js_1 = require(\"../operation-node/tuple-node.js\");\nfunction createExpressionBuilder(executor = noop_query_executor_js_1.NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseValueBinaryOperation)(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new expression_wrapper_js_1.ExpressionWrapper((0, unary_operation_parser_js_1.parseUnaryOperation)(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return (0, select_query_builder_js_1.createSelectQueryBuilder)({\n                queryId: (0, query_id_js_1.createQueryId)(),\n                executor,\n                queryNode: select_query_node_js_1.SelectQueryNode.createFrom((0, table_parser_js_1.parseTableExpressionOrList)(table)),\n            });\n        },\n        selectNoFrom(selection) {\n            return (0, select_query_builder_js_1.createSelectQueryBuilder)({\n                queryId: (0, query_id_js_1.createQueryId)(),\n                executor,\n                queryNode: select_query_node_js_1.SelectQueryNode.cloneWithSelections(select_query_node_js_1.SelectQueryNode.create(), (0, select_parser_js_1.parseSelectArg)(selection)),\n            });\n        },\n        case(reference) {\n            return new case_builder_js_1.CaseBuilder({\n                node: case_node_js_1.CaseNode.create((0, object_utils_js_1.isUndefined)(reference)\n                    ? undefined\n                    : (0, reference_parser_js_1.parseReferenceExpression)(reference)),\n            });\n        },\n        ref(reference, op) {\n            if ((0, object_utils_js_1.isUndefined)(op)) {\n                return new expression_wrapper_js_1.ExpressionWrapper((0, reference_parser_js_1.parseStringReference)(reference));\n            }\n            return new json_path_builder_js_1.JSONPathBuilder((0, reference_parser_js_1.parseJSONReference)(reference, op));\n        },\n        val(value) {\n            return new expression_wrapper_js_1.ExpressionWrapper((0, value_parser_js_1.parseValueExpressionOrList)(value));\n        },\n        refTuple(...values) {\n            return new expression_wrapper_js_1.ExpressionWrapper(tuple_node_js_1.TupleNode.create(values.map(reference_parser_js_1.parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new expression_wrapper_js_1.ExpressionWrapper(tuple_node_js_1.TupleNode.create(values.map(value_parser_js_1.parseValueExpression)));\n        },\n        lit(value) {\n            return new expression_wrapper_js_1.ExpressionWrapper((0, value_parser_js_1.parseSafeImmediateValue)(value));\n        },\n        // @deprecated\n        cmpr(lhs, op, rhs) {\n            return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseValueBinaryOperation)(lhs, op, rhs));\n        },\n        // @deprecated\n        bxp(lhs, op, rhs) {\n            return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseValueBinaryOperation)(lhs, op, rhs));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new expression_wrapper_js_1.ExpressionWrapper(binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(expr), operator_node_js_1.OperatorNode.create('between'), and_node_js_1.AndNode.create((0, value_parser_js_1.parseValueExpression)(start), (0, value_parser_js_1.parseValueExpression)(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new expression_wrapper_js_1.ExpressionWrapper(binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(expr), operator_node_js_1.OperatorNode.create('between symmetric'), and_node_js_1.AndNode.create((0, value_parser_js_1.parseValueExpression)(start), (0, value_parser_js_1.parseValueExpression)(end))));\n        },\n        and(exprs) {\n            if ((0, object_utils_js_1.isReadonlyArray)(exprs)) {\n                return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseFilterList)(exprs, 'and'));\n            }\n            return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseFilterObject)(exprs, 'and'));\n        },\n        or(exprs) {\n            if ((0, object_utils_js_1.isReadonlyArray)(exprs)) {\n                return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseFilterList)(exprs, 'or'));\n            }\n            return new expression_wrapper_js_1.ExpressionWrapper((0, binary_operation_parser_js_1.parseFilterObject)(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = (0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args);\n            if (parens_node_js_1.ParensNode.is(node)) {\n                // No double wrapping.\n                return new expression_wrapper_js_1.ExpressionWrapper(node);\n            }\n            else {\n                return new expression_wrapper_js_1.ExpressionWrapper(parens_node_js_1.ParensNode.create(node));\n            }\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = (0, function_module_js_1.createFunctionModule)();\n    eb.eb = eb;\n    return eb;\n}\nexports.createExpressionBuilder = createExpressionBuilder;\nfunction expressionBuilder(_) {\n    return createExpressionBuilder();\n}\nexports.expressionBuilder = expressionBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isExpressionOrFactory = exports.parseAliasedExpression = exports.parseExpression = void 0;\nconst expression_js_1 = require(\"../expression/expression.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst expression_builder_js_1 = require(\"../expression/expression-builder.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nfunction parseExpression(exp) {\n    if ((0, operation_node_source_js_1.isOperationNodeSource)(exp)) {\n        return exp.toOperationNode();\n    }\n    else if ((0, object_utils_js_1.isFunction)(exp)) {\n        return exp((0, expression_builder_js_1.expressionBuilder)()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexports.parseExpression = parseExpression;\nfunction parseAliasedExpression(exp) {\n    if ((0, operation_node_source_js_1.isOperationNodeSource)(exp)) {\n        return exp.toOperationNode();\n    }\n    else if ((0, object_utils_js_1.isFunction)(exp)) {\n        return exp((0, expression_builder_js_1.expressionBuilder)()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexports.parseAliasedExpression = parseAliasedExpression;\nfunction isExpressionOrFactory(obj) {\n    return (0, expression_js_1.isExpression)(obj) || (0, expression_js_1.isAliasedExpression)(obj) || (0, object_utils_js_1.isFunction)(obj);\n}\nexports.isExpressionOrFactory = isExpressionOrFactory;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTable = exports.parseAliasedTable = exports.parseTableExpression = exports.parseTableExpressionOrList = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst table_node_js_1 = require(\"../operation-node/table-node.js\");\nconst expression_parser_js_1 = require(\"./expression-parser.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nfunction parseTableExpressionOrList(table) {\n    if ((0, object_utils_js_1.isReadonlyArray)(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexports.parseTableExpressionOrList = parseTableExpressionOrList;\nfunction parseTableExpression(table) {\n    if ((0, object_utils_js_1.isString)(table)) {\n        return parseAliasedTable(table);\n    }\n    else {\n        return (0, expression_parser_js_1.parseAliasedExpression)(table);\n    }\n}\nexports.parseTableExpression = parseTableExpression;\nfunction parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return alias_node_js_1.AliasNode.create(parseTable(table), identifier_node_js_1.IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexports.parseAliasedTable = parseAliasedTable;\nfunction parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return table_node_js_1.TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return table_node_js_1.TableNode.create(from);\n    }\n}\nexports.parseTable = parseTable;\nfunction trim(str) {\n    return str.trim();\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.AddColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnDefinitionNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\n/**\n * @internal\n */\nexports.ColumnDefinitionNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ColumnDefinitionNode',\n            column: column_node_js_1.ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWithFrontModifier(node, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            frontModifiers: node.frontModifiers\n                ? (0, object_utils_js_1.freeze)([...node.frontModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWithEndModifier(node, modifier) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            endModifiers: node.endModifiers\n                ? (0, object_utils_js_1.freeze)([...node.endModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWith(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\n/**\n * @internal\n */\nexports.DropColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropColumnNode',\n            column: column_node_js_1.ColumnNode.create(column),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenameColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\n/**\n * @internal\n */\nexports.RenameColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'RenameColumnNode',\n            column: column_node_js_1.ColumnNode.create(column),\n            renameTo: column_node_js_1.ColumnNode.create(newColumn),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CheckConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.CheckConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? identifier_node_js_1.IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReferencesNode = exports.ON_MODIFY_FOREIGN_ACTIONS = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nexports.ON_MODIFY_FOREIGN_ACTIONS = [\n    'no action',\n    'restrict',\n    'cascade',\n    'set null',\n    'set default',\n];\n/**\n * @internal\n */\nexports.ReferencesNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ReferencesNode',\n            table,\n            columns: (0, object_utils_js_1.freeze)([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return (0, object_utils_js_1.freeze)({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return (0, object_utils_js_1.freeze)({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDefaultValueExpression = void 0;\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nconst value_node_js_1 = require(\"../operation-node/value-node.js\");\nfunction parseDefaultValueExpression(value) {\n    return (0, operation_node_source_js_1.isOperationNodeSource)(value)\n        ? value.toOperationNode()\n        : value_node_js_1.ValueNode.createImmediate(value);\n}\nexports.parseDefaultValueExpression = parseDefaultValueExpression;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GeneratedNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.GeneratedNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultValueNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.DefaultValueNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseOnModifyForeignAction = void 0;\nconst references_node_js_1 = require(\"../operation-node/references-node.js\");\nfunction parseOnModifyForeignAction(action) {\n    if (references_node_js_1.ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\nexports.parseOnModifyForeignAction = parseOnModifyForeignAction;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnDefinitionBuilder = void 0;\nconst check_constraint_node_js_1 = require(\"../operation-node/check-constraint-node.js\");\nconst references_node_js_1 = require(\"../operation-node/references-node.js\");\nconst select_all_node_js_1 = require(\"../operation-node/select-all-node.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst column_definition_node_js_1 = require(\"../operation-node/column-definition-node.js\");\nconst default_value_parser_js_1 = require(\"../parser/default-value-parser.js\");\nconst generated_node_js_1 = require(\"../operation-node/generated-node.js\");\nconst default_value_node_js_1 = require(\"../operation-node/default-value-node.js\");\nconst on_modify_action_parser_js_1 = require(\"../parser/on-modify-action-parser.js\");\nclass ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `auto_increment` or `autoincrement` to the column definition\n     * depending on the dialect.\n     *\n     * Some dialects like PostgreSQL don't support this. On PostgreSQL\n     * you can use the `serial` or `bigserial` data type instead.\n     */\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    /**\n     * Makes the column the primary key.\n     *\n     * If you want to specify a composite primary key use the\n     * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.\n     */\n    primaryKey() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    /**\n     * Adds a foreign key constraint for the column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id')\n     * ```\n     */\n    references(ref) {\n        const references = (0, reference_parser_js_1.parseStringReference)(ref);\n        if (!references.table || select_all_node_js_1.SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            references: references_node_js_1.ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    /**\n     * Adds an `on delete` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onDelete('cascade')\n     * ```\n     */\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            references: references_node_js_1.ReferencesNode.cloneWithOnDelete(this.#node.references, (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onDelete)),\n        }));\n    }\n    /**\n     * Adds an `on update` constraint for the foreign key column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onUpdate('cascade')\n     * ```\n     */\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            references: references_node_js_1.ReferencesNode.cloneWithOnUpdate(this.#node.references, (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onUpdate)),\n        }));\n    }\n    /**\n     * Adds a unique constraint for the column.\n     */\n    unique() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    /**\n     * Adds a `not null` constraint for the column.\n     */\n    notNull() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    /**\n     * Adds a `unsigned` modifier for the column.\n     *\n     * This only works on some dialects like MySQL.\n     */\n    unsigned() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    /**\n     * Adds a default value constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))\n     *   .execute()\n     * ```\n     *\n     * Values passed to `defaultTo` are interpreted as value literals by default. You can define\n     * an arbitrary SQL expression using the {@link sql} template tag:\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'number_of_legs',\n     *     'integer',\n     *     (col) => col.defaultTo(sql`any SQL here`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: default_value_node_js_1.DefaultValueNode.create((0, default_value_parser_js_1.parseDefaultValueExpression)(value)),\n        }));\n    }\n    /**\n     * Adds a check constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) =>\n     *     col.check(sql`number_of_legs < 5`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    check(expression) {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            check: check_constraint_node_js_1.CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Makes the column a generated column using a `generated always as` statement.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)',\n     *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: generated_node_js_1.GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Adds the `generated always as identity` specifier on supported dialects.\n     */\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: generated_node_js_1.GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    /**\n     * Adds the `generated by default as identity` specifier on supported dialects.\n     */\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: generated_node_js_1.GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    /**\n     * Makes a generated column stored instead of virtual. This method can only\n     * be used with {@link generatedAlwaysAs}\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)', (col) => col\n     *     .generatedAlwaysAs(\"concat(first_name, ' ', last_name)\")\n     *     .stored()\n     *   )\n     *   .execute()\n     * ```\n     */\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: generated_node_js_1.GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    /**\n     * This can be used to add any additional SQL right after the column's data type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(36)', col => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(36) collate utf8mb4_general_ci not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the column definition.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('age', 'integer', col => col.unsigned().notNull().modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`))\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'\n     * )\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexports.ColumnDefinitionBuilder = ColumnDefinitionBuilder;\n(0, prevent_await_js_1.preventAwait)(ColumnDefinitionBuilder, \"don't await ColumnDefinitionBuilder instances directly.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ModifyColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ModifyColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataTypeNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.DataTypeNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDataTypeExpression = void 0;\nconst data_type_node_js_1 = require(\"../operation-node/data-type-node.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nfunction parseDataTypeExpression(dataType) {\n    return (0, operation_node_source_js_1.isOperationNodeSource)(dataType)\n        ? dataType.toOperationNode()\n        : data_type_node_js_1.DataTypeNode.create(dataType);\n}\nexports.parseDataTypeExpression = parseDataTypeExpression;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForeignKeyConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\nconst references_node_js_1 = require(\"./references-node.js\");\n/**\n * @internal\n */\nexports.ForeignKeyConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: references_node_js_1.ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? identifier_node_js_1.IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForeignKeyConstraintBuilder = void 0;\nconst foreign_key_constraint_node_js_1 = require(\"../operation-node/foreign-key-constraint-node.js\");\nconst on_modify_action_parser_js_1 = require(\"../parser/on-modify-action-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(foreign_key_constraint_node_js_1.ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete: (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(foreign_key_constraint_node_js_1.ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate: (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onUpdate),\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexports.ForeignKeyConstraintBuilder = ForeignKeyConstraintBuilder;\n(0, prevent_await_js_1.preventAwait)(ForeignKeyConstraintBuilder, \"don't await ForeignKeyConstraintBuilder instances directly.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.AddConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UniqueConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.UniqueConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'UniqueConstraintNode',\n            columns: (0, object_utils_js_1.freeze)(columns.map(column_node_js_1.ColumnNode.create)),\n            name: constraintName ? identifier_node_js_1.IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.DropConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropConstraintNode',\n            constraintName: identifier_node_js_1.IdentifierNode.create(constraintName),\n        });\n    },\n    cloneWith(dropConstraint, props) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropConstraint,\n            ...props,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterColumnNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\n/**\n * @internal\n */\nexports.AlterColumnNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column, prop, value) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'AlterColumnNode',\n            column: column_node_js_1.ColumnNode.create(column),\n            [prop]: value,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlteredColumnBuilder = exports.AlterColumnBuilder = void 0;\nconst alter_column_node_js_1 = require(\"../operation-node/alter-column-node.js\");\nconst data_type_parser_js_1 = require(\"../parser/data-type-parser.js\");\nconst default_value_parser_js_1 = require(\"../parser/default-value-parser.js\");\nclass AlterColumnBuilder {\n    #column;\n    constructor(column) {\n        this.#column = column;\n    }\n    setDataType(dataType) {\n        return new AlteredColumnBuilder(alter_column_node_js_1.AlterColumnNode.create(this.#column, 'dataType', (0, data_type_parser_js_1.parseDataTypeExpression)(dataType)));\n    }\n    setDefault(value) {\n        return new AlteredColumnBuilder(alter_column_node_js_1.AlterColumnNode.create(this.#column, 'setDefault', (0, default_value_parser_js_1.parseDefaultValueExpression)(value)));\n    }\n    dropDefault() {\n        return new AlteredColumnBuilder(alter_column_node_js_1.AlterColumnNode.create(this.#column, 'dropDefault', true));\n    }\n    setNotNull() {\n        return new AlteredColumnBuilder(alter_column_node_js_1.AlterColumnNode.create(this.#column, 'setNotNull', true));\n    }\n    dropNotNull() {\n        return new AlteredColumnBuilder(alter_column_node_js_1.AlterColumnNode.create(this.#column, 'dropNotNull', true));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexports.AlterColumnBuilder = AlterColumnBuilder;\n/**\n * Allows us to force consumers to do exactly one alteration to a column.\n *\n * Basically, deny the following:\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac)\n * ```\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac.dropNotNull().setNotNull())\n * ```\n *\n * Which would now throw a compilation error, instead of a runtime error.\n */\nclass AlteredColumnBuilder {\n    #alterColumnNode;\n    constructor(alterColumnNode) {\n        this.#alterColumnNode = alterColumnNode;\n    }\n    toOperationNode() {\n        return this.#alterColumnNode;\n    }\n}\nexports.AlteredColumnBuilder = AlteredColumnBuilder;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterTableExecutor = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.AlterTableExecutor = AlterTableExecutor;\n(0, prevent_await_js_1.preventAwait)(AlterTableExecutor, \"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterTableAddForeignKeyConstraintBuilder = void 0;\nconst add_constraint_node_js_1 = require(\"../operation-node/add-constraint-node.js\");\nconst alter_table_node_js_1 = require(\"../operation-node/alter-table-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n            addConstraint: add_constraint_node_js_1.AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.AlterTableAddForeignKeyConstraintBuilder = AlterTableAddForeignKeyConstraintBuilder;\n(0, prevent_await_js_1.preventAwait)(AlterTableAddForeignKeyConstraintBuilder, \"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterTableDropConstraintBuilder = void 0;\nconst alter_table_node_js_1 = require(\"../operation-node/alter-table-node.js\");\nconst drop_constraint_node_js_1 = require(\"../operation-node/drop-constraint-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nclass AlterTableDropConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    ifExists() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: drop_constraint_node_js_1.DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    ifExists: true,\n                }),\n            }),\n        });\n    }\n    cascade() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: drop_constraint_node_js_1.DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'cascade',\n                }),\n            }),\n        });\n    }\n    restrict() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: drop_constraint_node_js_1.DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'restrict',\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.AlterTableDropConstraintBuilder = AlterTableDropConstraintBuilder;\n(0, prevent_await_js_1.preventAwait)(AlterTableDropConstraintBuilder, \"don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrimaryConstraintNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst column_node_js_1 = require(\"./column-node.js\");\nconst identifier_node_js_1 = require(\"./identifier-node.js\");\n/**\n * @internal\n */\nexports.PrimaryConstraintNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: (0, object_utils_js_1.freeze)(columns.map(column_node_js_1.ColumnNode.create)),\n            name: constraintName ? identifier_node_js_1.IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlterTableColumnAlteringBuilder = exports.AlterTableBuilder = void 0;\nconst add_column_node_js_1 = require(\"../operation-node/add-column-node.js\");\nconst alter_table_node_js_1 = require(\"../operation-node/alter-table-node.js\");\nconst column_definition_node_js_1 = require(\"../operation-node/column-definition-node.js\");\nconst drop_column_node_js_1 = require(\"../operation-node/drop-column-node.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst rename_column_node_js_1 = require(\"../operation-node/rename-column-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst column_definition_builder_js_1 = require(\"./column-definition-builder.js\");\nconst modify_column_node_js_1 = require(\"../operation-node/modify-column-node.js\");\nconst data_type_parser_js_1 = require(\"../parser/data-type-parser.js\");\nconst foreign_key_constraint_builder_js_1 = require(\"./foreign-key-constraint-builder.js\");\nconst add_constraint_node_js_1 = require(\"../operation-node/add-constraint-node.js\");\nconst unique_constraint_node_js_1 = require(\"../operation-node/unique-constraint-node.js\");\nconst check_constraint_node_js_1 = require(\"../operation-node/check-constraint-node.js\");\nconst foreign_key_constraint_node_js_1 = require(\"../operation-node/foreign-key-constraint-node.js\");\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst drop_constraint_node_js_1 = require(\"../operation-node/drop-constraint-node.js\");\nconst alter_column_builder_js_1 = require(\"./alter-column-builder.js\");\nconst alter_table_executor_js_1 = require(\"./alter-table-executor.js\");\nconst alter_table_add_foreign_key_constraint_builder_js_1 = require(\"./alter-table-add-foreign-key-constraint-builder.js\");\nconst alter_table_drop_constraint_builder_js_1 = require(\"./alter-table-drop-constraint-builder.js\");\nconst primary_constraint_node_js_1 = require(\"../operation-node/primary-constraint-node.js\");\n/**\n * This builder can be used to create a `alter table` query.\n */\nclass AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    renameTo(newTableName) {\n        return new alter_table_executor_js_1.AlterTableExecutor({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameTo: (0, table_parser_js_1.parseTable)(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new alter_table_executor_js_1.AlterTableExecutor({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                setSchema: identifier_node_js_1.IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new alter_column_builder_js_1.AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, drop_column_node_js_1.DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, rename_column_node_js_1.RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = object_utils_js_1.noop) {\n        const builder = build(new column_definition_builder_js_1.ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.create(columnName, (0, data_type_parser_js_1.parseDataTypeExpression)(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, add_column_node_js_1.AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = object_utils_js_1.noop) {\n        const builder = build(new column_definition_builder_js_1.ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.create(columnName, (0, data_type_parser_js_1.parseDataTypeExpression)(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, modify_column_node_js_1.ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addUniqueConstraint}\n     */\n    addUniqueConstraint(constraintName, columns) {\n        return new alter_table_executor_js_1.AlterTableExecutor({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: add_constraint_node_js_1.AddConstraintNode.create(unique_constraint_node_js_1.UniqueConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addCheckConstraint}\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new alter_table_executor_js_1.AlterTableExecutor({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: add_constraint_node_js_1.AddConstraintNode.create(check_constraint_node_js_1.CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addForeignKeyConstraint}\n     *\n     * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns\n     * the constraint builder and doesn't take a callback as the last argument. This\n     * is because you can only add one column per `ALTER TABLE` query.\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {\n        return new alter_table_add_foreign_key_constraint_builder_js_1.AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: new foreign_key_constraint_builder_js_1.ForeignKeyConstraintBuilder(foreign_key_constraint_node_js_1.ForeignKeyConstraintNode.create(columns.map(column_node_js_1.ColumnNode.create), (0, table_parser_js_1.parseTable)(targetTable), targetColumns.map(column_node_js_1.ColumnNode.create), constraintName)),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addPrimaryKeyConstraint}\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new alter_table_executor_js_1.AlterTableExecutor({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: add_constraint_node_js_1.AddConstraintNode.create(primary_constraint_node_js_1.PrimaryConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    dropConstraint(constraintName) {\n        return new alter_table_drop_constraint_builder_js_1.AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: drop_constraint_node_js_1.DropConstraintNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * See {@link CreateTableBuilder.$call}\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexports.AlterTableBuilder = AlterTableBuilder;\nclass AlterTableColumnAlteringBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new alter_column_builder_js_1.AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, drop_column_node_js_1.DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, rename_column_node_js_1.RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = object_utils_js_1.noop) {\n        const builder = build(new column_definition_builder_js_1.ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.create(columnName, (0, data_type_parser_js_1.parseDataTypeExpression)(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, add_column_node_js_1.AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = object_utils_js_1.noop) {\n        const builder = build(new column_definition_builder_js_1.ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.create(columnName, (0, data_type_parser_js_1.parseDataTypeExpression)(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: alter_table_node_js_1.AlterTableNode.cloneWithColumnAlteration(this.#props.node, modify_column_node_js_1.ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.AlterTableColumnAlteringBuilder = AlterTableColumnAlteringBuilder;\n(0, prevent_await_js_1.preventAwait)(AlterTableBuilder, \"don't await AlterTableBuilder instances\");\n(0, prevent_await_js_1.preventAwait)(alter_column_builder_js_1.AlterColumnBuilder, \"don't await AlterColumnBuilder instances\");\n(0, prevent_await_js_1.preventAwait)(AlterTableColumnAlteringBuilder, \"don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImmediateValueTransformer = void 0;\nconst operation_node_transformer_js_1 = require(\"../../operation-node/operation-node-transformer.js\");\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nclass ImmediateValueTransformer extends operation_node_transformer_js_1.OperationNodeTransformer {\n    transformValue(node) {\n        return {\n            ...super.transformValue(node),\n            immediate: true,\n        };\n    }\n}\nexports.ImmediateValueTransformer = ImmediateValueTransformer;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateIndexBuilder = void 0;\nconst create_index_node_js_1 = require(\"../operation-node/create-index-node.js\");\nconst raw_node_js_1 = require(\"../operation-node/raw-node.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst binary_operation_parser_js_1 = require(\"../parser/binary-operation-parser.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst immediate_value_transformer_js_1 = require(\"../plugin/immediate-value/immediate-value-transformer.js\");\nclass CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the index already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWith(this.#props.node, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWith(this.#props.node, {\n                table: (0, table_parser_js_1.parseTable)(table),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWithColumns(this.#props.node, [\n                (0, reference_parser_js_1.parseOrderedColumnName)(column),\n            ]),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(reference_parser_js_1.parseOrderedColumnName)),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(sql`first_name COLLATE \"fi_FI\"`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\" on \"person\" (first_name COLLATE \"fi_FI\")\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWithColumns(this.#props.node, [\n                expression.toOperationNode(),\n            ]),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: create_index_node_js_1.CreateIndexNode.cloneWith(this.#props.node, {\n                using: raw_node_js_1.RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    where(...args) {\n        const transformer = new immediate_value_transformer_js_1.ImmediateValueTransformer();\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: query_node_js_1.QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode((0, binary_operation_parser_js_1.parseValueBinaryOperationOrExpression)(args))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.CreateIndexBuilder = CreateIndexBuilder;\n(0, prevent_await_js_1.preventAwait)(CreateIndexBuilder, \"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSchemaBuilder = void 0;\nconst create_schema_node_js_1 = require(\"../operation-node/create-schema-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            node: create_schema_node_js_1.CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.CreateSchemaBuilder = CreateSchemaBuilder;\n(0, prevent_await_js_1.preventAwait)(CreateSchemaBuilder, \"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseOnCommitAction = void 0;\nconst create_table_node_js_1 = require(\"../operation-node/create-table-node.js\");\nfunction parseOnCommitAction(action) {\n    if (create_table_node_js_1.ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\nexports.parseOnCommitAction = parseOnCommitAction;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateTableBuilder = void 0;\nconst column_definition_node_js_1 = require(\"../operation-node/column-definition-node.js\");\nconst create_table_node_js_1 = require(\"../operation-node/create-table-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst column_definition_builder_js_1 = require(\"./column-definition-builder.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst foreign_key_constraint_node_js_1 = require(\"../operation-node/foreign-key-constraint-node.js\");\nconst column_node_js_1 = require(\"../operation-node/column-node.js\");\nconst foreign_key_constraint_builder_js_1 = require(\"./foreign-key-constraint-builder.js\");\nconst data_type_parser_js_1 = require(\"../parser/data-type-parser.js\");\nconst primary_constraint_node_js_1 = require(\"../operation-node/primary-constraint-node.js\");\nconst unique_constraint_node_js_1 = require(\"../operation-node/unique-constraint-node.js\");\nconst check_constraint_node_js_1 = require(\"../operation-node/check-constraint-node.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst on_commit_action_parse_js_1 = require(\"../parser/on-commit-action-parse.js\");\n/**\n * This builder can be used to create a `create table` query.\n */\nclass CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWith(this.#props.node, {\n                onCommit: (0, on_commit_action_parse_js_1.parseOnCommitAction)(onCommit),\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   // You can specify any data type using the `sql` tag if the types\n     *   // don't include it.\n     *   .addColumn('data', sql`any_type_here`)\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade'))\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the\n     * query and doesn't provide the same API for all databses. For example, some\n     * databases like older MySQL don't support the `references` statement in the\n     * column definition. Instead foreign key constraints need to be defined in the\n     * `create table` query. See the next example:\n     *\n     * ```ts\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey()),\n     * ```\n     */\n    addColumn(columnName, dataType, build = object_utils_js_1.noop) {\n        const columnBuilder = build(new column_definition_builder_js_1.ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.create(columnName, (0, data_type_parser_js_1.parseDataTypeExpression)(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithConstraint(this.#props.node, primary_constraint_node_js_1.PrimaryConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithConstraint(this.#props.node, unique_constraint_node_js_1.UniqueConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * addCheckConstraint('check_legs', sql`number_of_legs < 5`)\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithConstraint(this.#props.node, check_constraint_node_js_1.CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id'],\n     *   'person',\n     *   ['id'],\n     * )\n     * ```\n     *\n     * Add constraint for multiple columns:\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id1', 'owner_id2'],\n     *   'person',\n     *   ['id1', 'id2'],\n     *   (cb) => cb.onDelete('cascade')\n     * )\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = object_utils_js_1.noop) {\n        const builder = build(new foreign_key_constraint_builder_js_1.ForeignKeyConstraintBuilder(foreign_key_constraint_node_js_1.ForeignKeyConstraintNode.create(columns.map(column_node_js_1.ColumnNode.create), (0, table_parser_js_1.parseTable)(targetTable), targetColumns.map(column_node_js_1.ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.\n     *\n     * Also see {@link temporary}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .modifyFront(sql`global temporary`)\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (Postgres):\n     *\n     * ```sql\n     * create global temporary table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(64) not null,\n     *   \"last_name\" varchar(64) not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * Also see {@link onCommit}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .addColumn('id', 'integer', col => col => primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .modifyEnd(sql`collate utf8_unicode_ci`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(64) not null,\n     *   `last_name` varchar(64) not null\n     * ) collate utf8_unicode_ci\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: create_table_node_js_1.CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('test')\n     *   .$call((builder) => builder.addColumn('id', 'integer'))\n     *   .execute()\n     * ```\n     *\n     * ```ts\n     * const addDefaultColumns = <T extends string, C extends string = never>(\n     *   builder: CreateTableBuilder<T, C>\n     * ) => {\n     *   return builder\n     *     .addColumn('id', 'integer', (col) => col.notNull())\n     *     .addColumn('created_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     *     .addColumn('updated_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     * }\n     *\n     * db.schema\n     *   .createTable('test')\n     *   .$call(addDefaultColumns)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.CreateTableBuilder = CreateTableBuilder;\n(0, prevent_await_js_1.preventAwait)(CreateTableBuilder, \"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropIndexBuilder = void 0;\nconst drop_index_node_js_1 = require(\"../operation-node/drop-index-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: drop_index_node_js_1.DropIndexNode.cloneWith(this.#props.node, {\n                table: (0, table_parser_js_1.parseTable)(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: drop_index_node_js_1.DropIndexNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: drop_index_node_js_1.DropIndexNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.DropIndexBuilder = DropIndexBuilder;\n(0, prevent_await_js_1.preventAwait)(DropIndexBuilder, \"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropSchemaBuilder = void 0;\nconst drop_schema_node_js_1 = require(\"../operation-node/drop-schema-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: drop_schema_node_js_1.DropSchemaNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: drop_schema_node_js_1.DropSchemaNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.DropSchemaBuilder = DropSchemaBuilder;\n(0, prevent_await_js_1.preventAwait)(DropSchemaBuilder, \"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropTableBuilder = void 0;\nconst drop_table_node_js_1 = require(\"../operation-node/drop-table-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: drop_table_node_js_1.DropTableNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: drop_table_node_js_1.DropTableNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.DropTableBuilder = DropTableBuilder;\n(0, prevent_await_js_1.preventAwait)(DropTableBuilder, \"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateViewNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst schemable_identifier_node_js_1 = require(\"./schemable-identifier-node.js\");\n/**\n * @internal\n */\nexports.CreateViewNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CreateViewNode',\n            name: schemable_identifier_node_js_1.SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...createView,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImmediateValuePlugin = void 0;\nconst immediate_value_transformer_js_1 = require(\"./immediate-value-transformer.js\");\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nclass ImmediateValuePlugin {\n    #transformer = new immediate_value_transformer_js_1.ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\nexports.ImmediateValuePlugin = ImmediateValuePlugin;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateViewBuilder = void 0;\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst create_view_node_js_1 = require(\"../operation-node/create-view-node.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst immediate_value_plugin_js_1 = require(\"../plugin/immediate-value/immediate-value-plugin.js\");\nclass CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                columns: columns.map(reference_parser_js_1.parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or raw {@link sql } expression passed here is interpolated into a single\n     * string opening an SQL injection vulnerability. DO NOT pass unchecked user input\n     * into the query or raw expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new immediate_value_plugin_js_1.ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: create_view_node_js_1.CreateViewNode.cloneWith(this.#props.node, {\n                as: queryNode,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.CreateViewBuilder = CreateViewBuilder;\n(0, prevent_await_js_1.preventAwait)(CreateViewBuilder, \"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropViewNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst schemable_identifier_node_js_1 = require(\"./schemable-identifier-node.js\");\n/**\n * @internal\n */\nexports.DropViewNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropViewNode',\n            name: schemable_identifier_node_js_1.SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropViewBuilder = void 0;\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst drop_view_node_js_1 = require(\"../operation-node/drop-view-node.js\");\nclass DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: drop_view_node_js_1.DropViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: drop_view_node_js_1.DropViewNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: drop_view_node_js_1.DropViewNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.DropViewBuilder = DropViewBuilder;\n(0, prevent_await_js_1.preventAwait)(DropViewBuilder, \"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateTypeNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst value_list_node_js_1 = require(\"./value-list-node.js\");\nconst value_node_js_1 = require(\"./value-node.js\");\n/**\n * @internal\n */\nexports.CreateTypeNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'CreateTypeNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'CreateTypeNode',\n            name,\n        });\n    },\n    cloneWithEnum(createType, values) {\n        return (0, object_utils_js_1.freeze)({\n            ...createType,\n            enum: value_list_node_js_1.ValueListNode.create(values.map((value) => value_node_js_1.ValueNode.createImmediate(value))),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateTypeBuilder = void 0;\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst create_type_node_js_1 = require(\"../operation-node/create-type-node.js\");\nclass CreateTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    /**\n     * Creates an anum type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])\n     * ```\n     */\n    asEnum(values) {\n        return new CreateTypeBuilder({\n            ...this.#props,\n            node: create_type_node_js_1.CreateTypeNode.cloneWithEnum(this.#props.node, values),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.CreateTypeBuilder = CreateTypeBuilder;\n(0, prevent_await_js_1.preventAwait)(CreateTypeBuilder, \"don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropTypeNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.DropTypeNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'DropTypeNode';\n    },\n    create(name) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'DropTypeNode',\n            name,\n        });\n    },\n    cloneWith(dropType, params) {\n        return (0, object_utils_js_1.freeze)({\n            ...dropType,\n            ...params,\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropTypeBuilder = void 0;\nconst drop_type_node_js_1 = require(\"../operation-node/drop-type-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass DropTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    ifExists() {\n        return new DropTypeBuilder({\n            ...this.#props,\n            node: drop_type_node_js_1.DropTypeNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexports.DropTypeBuilder = DropTypeBuilder;\n(0, prevent_await_js_1.preventAwait)(DropTypeBuilder, \"don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSchemableIdentifier = void 0;\nconst schemable_identifier_node_js_1 = require(\"../operation-node/schemable-identifier-node.js\");\nfunction parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return schemable_identifier_node_js_1.SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return schemable_identifier_node_js_1.SchemableIdentifierNode.create(id);\n    }\n}\nexports.parseSchemableIdentifier = parseSchemableIdentifier;\nfunction trim(str) {\n    return str.trim();\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaModule = void 0;\nconst alter_table_node_js_1 = require(\"../operation-node/alter-table-node.js\");\nconst create_index_node_js_1 = require(\"../operation-node/create-index-node.js\");\nconst create_schema_node_js_1 = require(\"../operation-node/create-schema-node.js\");\nconst create_table_node_js_1 = require(\"../operation-node/create-table-node.js\");\nconst drop_index_node_js_1 = require(\"../operation-node/drop-index-node.js\");\nconst drop_schema_node_js_1 = require(\"../operation-node/drop-schema-node.js\");\nconst drop_table_node_js_1 = require(\"../operation-node/drop-table-node.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst alter_table_builder_js_1 = require(\"./alter-table-builder.js\");\nconst create_index_builder_js_1 = require(\"./create-index-builder.js\");\nconst create_schema_builder_js_1 = require(\"./create-schema-builder.js\");\nconst create_table_builder_js_1 = require(\"./create-table-builder.js\");\nconst drop_index_builder_js_1 = require(\"./drop-index-builder.js\");\nconst drop_schema_builder_js_1 = require(\"./drop-schema-builder.js\");\nconst drop_table_builder_js_1 = require(\"./drop-table-builder.js\");\nconst query_id_js_1 = require(\"../util/query-id.js\");\nconst with_schema_plugin_js_1 = require(\"../plugin/with-schema/with-schema-plugin.js\");\nconst create_view_builder_js_1 = require(\"./create-view-builder.js\");\nconst create_view_node_js_1 = require(\"../operation-node/create-view-node.js\");\nconst drop_view_builder_js_1 = require(\"./drop-view-builder.js\");\nconst drop_view_node_js_1 = require(\"../operation-node/drop-view-node.js\");\nconst create_type_builder_js_1 = require(\"./create-type-builder.js\");\nconst drop_type_builder_js_1 = require(\"./drop-type-builder.js\");\nconst create_type_node_js_1 = require(\"../operation-node/create-type-node.js\");\nconst drop_type_node_js_1 = require(\"../operation-node/drop-type-node.js\");\nconst identifier_parser_js_1 = require(\"../parser/identifier-parser.js\");\n/**\n * Provides methods for building database schema.\n */\nclass SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new create_table_builder_js_1.CreateTableBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: create_table_node_js_1.CreateTableNode.create((0, table_parser_js_1.parseTable)(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new drop_table_builder_js_1.DropTableBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: drop_table_node_js_1.DropTableNode.create((0, table_parser_js_1.parseTable)(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new create_index_builder_js_1.CreateIndexBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: create_index_node_js_1.CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new drop_index_builder_js_1.DropIndexBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: drop_index_node_js_1.DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new create_schema_builder_js_1.CreateSchemaBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: create_schema_node_js_1.CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new drop_schema_builder_js_1.DropSchemaBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: drop_schema_node_js_1.DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name', (ac) => ac.setDataType('text'))\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new alter_table_builder_js_1.AlterTableBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: alter_table_node_js_1.AlterTableNode.create((0, table_parser_js_1.parseTable)(table)),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new create_view_builder_js_1.CreateViewBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: create_view_node_js_1.CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new drop_view_builder_js_1.DropViewBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: drop_view_node_js_1.DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * Create a new type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createType('species')\n     *   .asEnum(['dog', 'cat', 'frog'])\n     *   .execute()\n     * ```\n     */\n    createType(typeName) {\n        return new create_type_builder_js_1.CreateTypeBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: create_type_node_js_1.CreateTypeNode.create((0, identifier_parser_js_1.parseSchemableIdentifier)(typeName)),\n        });\n    }\n    /**\n     * Drop a type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropType('species')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropType(typeName) {\n        return new drop_type_builder_js_1.DropTypeBuilder({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            executor: this.#executor,\n            node: drop_type_node_js_1.DropTypeNode.create((0, identifier_parser_js_1.parseSchemableIdentifier)(typeName)),\n        });\n    }\n    /**\n     * Returns a copy of this schema module with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SchemaModule(this.#executor.withPlugin(plugin));\n    }\n    /**\n     * Returns a copy of this schema module  without any plugins.\n     */\n    withoutPlugins() {\n        return new SchemaModule(this.#executor.withoutPlugins());\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)));\n    }\n}\nexports.SchemaModule = SchemaModule;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DynamicModule = void 0;\nconst dynamic_reference_builder_js_1 = require(\"./dynamic-reference-builder.js\");\nclass DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by typescript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput = req.query.select;\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | undefined = person.last_name\n     * const firstName: string | undefined = person.first_name\n     * const birthDate: string | undefined = person.birth_date\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person.id\n     * ```\n     */\n    ref(reference) {\n        return new dynamic_reference_builder_js_1.DynamicReferenceBuilder(reference);\n    }\n}\nexports.DynamicModule = DynamicModule;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultConnectionProvider = void 0;\nclass DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\nexports.DefaultConnectionProvider = DefaultConnectionProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultQueryExecutor = void 0;\nconst query_executor_base_js_1 = require(\"./query-executor-base.js\");\nclass DefaultQueryExecutor extends query_executor_base_js_1.QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node) {\n        return this.#compiler.compileQuery(node);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\nexports.DefaultQueryExecutor = DefaultQueryExecutor;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.performanceNow = void 0;\nconst object_utils_js_1 = require(\"./object-utils.js\");\nfunction performanceNow() {\n    if (typeof performance !== 'undefined' && (0, object_utils_js_1.isFunction)(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\nexports.performanceNow = performanceNow;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeDriver = void 0;\nconst performance_now_js_1 = require(\"../util/performance-now.js\");\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nclass RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        connection.executeQuery = async (compiledQuery) => {\n            const startTime = (0, performance_now_js_1.performanceNow)();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                await this.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                await this.#logQuery(compiledQuery, startTime);\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime) {\n        await this.#log.query(() => ({\n            level: 'query',\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return (0, performance_now_js_1.performanceNow)() - startTime;\n    }\n}\nexports.RuntimeDriver = RuntimeDriver;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleConnectionProvider = void 0;\nclass SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise;\n        }\n        const promise = this.#run(consumer);\n        this.#runningPromise = promise\n            .then(() => {\n            this.#runningPromise = undefined;\n        })\n            .catch(() => {\n            this.#runningPromise = undefined;\n        });\n        return promise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\nexports.SingleConnectionProvider = SingleConnectionProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TRANSACTION_ISOLATION_LEVELS = void 0;\nexports.TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n];\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Log = exports.LOG_LEVELS = void 0;\nconst object_utils_js_1 = require(\"./object-utils.js\");\nexports.LOG_LEVELS = (0, object_utils_js_1.freeze)(['query', 'error']);\nclass Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if ((0, object_utils_js_1.isFunction)(config)) {\n            this.#logger = config;\n            this.#levels = (0, object_utils_js_1.freeze)({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = (0, object_utils_js_1.freeze)({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nexports.Log = Log;\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        console.log(`kysely:query: ${event.query.sql}`);\n        console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${event}`);\n        }\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCompilable = void 0;\nconst object_utils_js_1 = require(\"./object-utils.js\");\nfunction isCompilable(value) {\n    return (0, object_utils_js_1.isObject)(value) && (0, object_utils_js_1.isFunction)(value.compile);\n}\nexports.isCompilable = isCompilable;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionBuilder = exports.ConnectionBuilder = exports.isKyselyProps = exports.Transaction = exports.Kysely = void 0;\nconst schema_js_1 = require(\"./schema/schema.js\");\nconst dynamic_js_1 = require(\"./dynamic/dynamic.js\");\nconst default_connection_provider_js_1 = require(\"./driver/default-connection-provider.js\");\nconst query_creator_js_1 = require(\"./query-creator.js\");\nconst default_query_executor_js_1 = require(\"./query-executor/default-query-executor.js\");\nconst object_utils_js_1 = require(\"./util/object-utils.js\");\nconst runtime_driver_js_1 = require(\"./driver/runtime-driver.js\");\nconst single_connection_provider_js_1 = require(\"./driver/single-connection-provider.js\");\nconst driver_js_1 = require(\"./driver/driver.js\");\nconst prevent_await_js_1 = require(\"./util/prevent-await.js\");\nconst function_module_js_1 = require(\"./query-builder/function-module.js\");\nconst log_js_1 = require(\"./util/log.js\");\nconst query_id_js_1 = require(\"./util/query-id.js\");\nconst compilable_js_1 = require(\"./util/compilable.js\");\nconst case_builder_js_1 = require(\"./query-builder/case-builder.js\");\nconst case_node_js_1 = require(\"./operation-node/case-node.js\");\nconst expression_parser_js_1 = require(\"./parser/expression-parser.js\");\nconst with_schema_plugin_js_1 = require(\"./plugin/with-schema/with-schema-plugin.js\");\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains it's own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has tables `person` and `pet`:\n *\n * ```ts\n * import {\u00A0Kysely, Generated, PostgresDialect } from 'kysely'\n *\n * interface PersonTable {\n *   id: Generated<number>\n *   first_name: string\n *   last_name: string\n * }\n *\n * interface PetTable {\n *   id: Generated<number>\n *   owner_id: number\n *   name: string\n *   species: 'cat' | 'dog'\n * }\n *\n * interface Database {\n *   person: PersonTable,\n *   pet: PetTable\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     host: 'localhost',\n *     database: 'kysely_test',\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nclass Kysely extends query_creator_js_1.QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new log_js_1.Log(args.log ?? []);\n            const runtimeDriver = new runtime_driver_js_1.RuntimeDriver(driver, log);\n            const connectionProvider = new default_connection_provider_js_1.DefaultConnectionProvider(runtimeDriver);\n            const executor = new default_query_executor_js_1.DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new schema_js_1.SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new dynamic_js_1.DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new case_builder_js_1.CaseBuilder({\n            node: case_node_js_1.CaseNode.create((0, object_utils_js_1.isUndefined)(value) ? undefined : (0, expression_parser_js_1.parseExpression)(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write type safe function\n     * calls.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return (0, function_module_js_1.createFunctionModule)();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws, the transaction is rolled back. Otherwise\n     * the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an error is thrown inside\n     * the callback passed to the `execute` method, the transaction is rolled back.\n     * Otherwise it's committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * @example\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/koskimas/kysely/blob/master/site/docs/recipes/splitting-build-compile-and-execute-code.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, queryId = (0, query_id_js_1.createQueryId)()) {\n        const compiledQuery = (0, compilable_js_1.isCompilable)(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery, queryId);\n    }\n}\nexports.Kysely = Kysely;\nclass Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexports.Transaction = Transaction;\nfunction isKyselyProps(obj) {\n    return ((0, object_utils_js_1.isObject)(obj) &&\n        (0, object_utils_js_1.isObject)(obj.config) &&\n        (0, object_utils_js_1.isObject)(obj.driver) &&\n        (0, object_utils_js_1.isObject)(obj.executor) &&\n        (0, object_utils_js_1.isObject)(obj.dialect));\n}\nexports.isKyselyProps = isKyselyProps;\nclass ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new single_connection_provider_js_1.SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\nexports.ConnectionBuilder = ConnectionBuilder;\n(0, prevent_await_js_1.preventAwait)(ConnectionBuilder, \"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method\");\nclass TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new single_connection_provider_js_1.SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                await this.#props.driver.rollbackTransaction(connection);\n                throw error;\n            }\n        });\n    }\n}\nexports.TransactionBuilder = TransactionBuilder;\n(0, prevent_await_js_1.preventAwait)(TransactionBuilder, \"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method\");\nfunction validateTransactionSettings(settings) {\n    if (settings.isolationLevel &&\n        !driver_js_1.TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createRawBuilder = void 0;\nconst alias_node_js_1 = require(\"../operation-node/alias-node.js\");\nconst prevent_await_js_1 = require(\"../util/prevent-await.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst noop_query_executor_js_1 = require(\"../query-executor/noop-query-executor.js\");\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst operation_node_source_js_1 = require(\"../operation-node/operation-node-source.js\");\nclass RawBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isRawBuilder() {\n        return true;\n    }\n    as(alias) {\n        return new AliasedRawBuilderImpl(this, alias);\n    }\n    $castTo() {\n        return new RawBuilderImpl({ ...this.#props });\n    }\n    withPlugin(plugin) {\n        return new RawBuilderImpl({\n            ...this.#props,\n            plugins: this.#props.plugins !== undefined\n                ? (0, object_utils_js_1.freeze)([...this.#props.plugins, plugin])\n                : (0, object_utils_js_1.freeze)([plugin]),\n        });\n    }\n    toOperationNode() {\n        return this.#toOperationNode(this.#getExecutor());\n    }\n    compile(executorProvider) {\n        return this.#compile(this.#getExecutor(executorProvider));\n    }\n    async execute(executorProvider) {\n        const executor = this.#getExecutor(executorProvider);\n        return executor.executeQuery(this.#compile(executor), this.#props.queryId);\n    }\n    #getExecutor(executorProvider) {\n        const executor = executorProvider !== undefined\n            ? executorProvider.getExecutor()\n            : noop_query_executor_js_1.NOOP_QUERY_EXECUTOR;\n        return this.#props.plugins !== undefined\n            ? executor.withPlugins(this.#props.plugins)\n            : executor;\n    }\n    #toOperationNode(executor) {\n        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);\n    }\n    #compile(executor) {\n        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);\n    }\n}\nfunction createRawBuilder(props) {\n    return new RawBuilderImpl(props);\n}\nexports.createRawBuilder = createRawBuilder;\n(0, prevent_await_js_1.preventAwait)(RawBuilderImpl, \"don't await RawBuilder instances directly. To execute the query you need to call `execute`\");\nclass AliasedRawBuilderImpl {\n    #rawBuilder;\n    #alias;\n    constructor(rawBuilder, alias) {\n        this.#rawBuilder = rawBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#rawBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get rawBuilder() {\n        return this.#rawBuilder;\n    }\n    toOperationNode() {\n        return alias_node_js_1.AliasNode.create(this.#rawBuilder.toOperationNode(), (0, operation_node_source_js_1.isOperationNodeSource)(this.#alias)\n            ? this.#alias.toOperationNode()\n            : identifier_node_js_1.IdentifierNode.create(this.#alias));\n    }\n}\n(0, prevent_await_js_1.preventAwait)(AliasedRawBuilderImpl, \"don't await AliasedRawBuilder instances directly. AliasedRawBuilder should never be executed directly since it's always a part of another query.\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sql = void 0;\nconst identifier_node_js_1 = require(\"../operation-node/identifier-node.js\");\nconst raw_node_js_1 = require(\"../operation-node/raw-node.js\");\nconst value_node_js_1 = require(\"../operation-node/value-node.js\");\nconst reference_parser_js_1 = require(\"../parser/reference-parser.js\");\nconst table_parser_js_1 = require(\"../parser/table-parser.js\");\nconst value_parser_js_1 = require(\"../parser/value-parser.js\");\nconst query_id_js_1 = require(\"../util/query-id.js\");\nconst raw_builder_js_1 = require(\"./raw-builder.js\");\nexports.sql = Object.assign((sqlFragments, ...parameters) => {\n    return (0, raw_builder_js_1.createRawBuilder)({\n        queryId: (0, query_id_js_1.createQueryId)(),\n        rawNode: raw_node_js_1.RawNode.create(sqlFragments, parameters?.map(value_parser_js_1.parseValueExpression) ?? []),\n    });\n}, {\n    ref(columnReference) {\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithChild((0, reference_parser_js_1.parseStringReference)(columnReference)),\n        });\n    },\n    val(value) {\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithChild((0, value_parser_js_1.parseValueExpression)(value)),\n        });\n    },\n    value(value) {\n        return this.val(value);\n    },\n    table(tableReference) {\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithChild((0, table_parser_js_1.parseTable)(tableReference)),\n        });\n    },\n    id(...ids) {\n        const fragments = new Array(ids.length + 1).fill('.');\n        fragments[0] = '';\n        fragments[fragments.length - 1] = '';\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.create(fragments, ids.map(identifier_node_js_1.IdentifierNode.create)),\n        });\n    },\n    lit(value) {\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithChild(value_node_js_1.ValueNode.createImmediate(value)),\n        });\n    },\n    literal(value) {\n        return this.lit(value);\n    },\n    raw(sql) {\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithSql(sql),\n        });\n    },\n    join(array, separator = (0, exports.sql) `, `) {\n        const nodes = new Array(2 * array.length - 1);\n        const sep = separator.toOperationNode();\n        for (let i = 0; i < array.length; ++i) {\n            nodes[2 * i] = (0, value_parser_js_1.parseValueExpression)(array[i]);\n            if (i !== array.length - 1) {\n                nodes[2 * i + 1] = sep;\n            }\n        }\n        return (0, raw_builder_js_1.createRawBuilder)({\n            queryId: (0, query_id_js_1.createQueryId)(),\n            rawNode: raw_node_js_1.RawNode.createWithChildren(nodes),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationNodeVisitor = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nclass OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = (0, object_utils_js_1.freeze)({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n        SelectModifierNode: this.visitSelectModifier.bind(this),\n        CreateTypeNode: this.visitCreateType.bind(this),\n        DropTypeNode: this.visitDropType.bind(this),\n        ExplainNode: this.visitExplain.bind(this),\n        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.visitAggregateFunction.bind(this),\n        OverNode: this.visitOver.bind(this),\n        PartitionByNode: this.visitPartitionBy.bind(this),\n        PartitionByItemNode: this.visitPartitionByItem.bind(this),\n        SetOperationNode: this.visitSetOperation.bind(this),\n        BinaryOperationNode: this.visitBinaryOperation.bind(this),\n        UnaryOperationNode: this.visitUnaryOperation.bind(this),\n        UsingNode: this.visitUsing.bind(this),\n        FunctionNode: this.visitFunction.bind(this),\n        CaseNode: this.visitCase.bind(this),\n        WhenNode: this.visitWhen.bind(this),\n        JSONReferenceNode: this.visitJSONReference.bind(this),\n        JSONPathNode: this.visitJSONPath.bind(this),\n        JSONPathLegNode: this.visitJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),\n        TupleNode: this.visitTuple.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\nexports.OperationNodeVisitor = OperationNodeVisitor;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultQueryCompiler = void 0;\nconst insert_query_node_js_1 = require(\"../operation-node/insert-query-node.js\");\nconst operation_node_visitor_js_1 = require(\"../operation-node/operation-node-visitor.js\");\nconst operator_node_js_1 = require(\"../operation-node/operator-node.js\");\nconst parens_node_js_1 = require(\"../operation-node/parens-node.js\");\nconst query_node_js_1 = require(\"../operation-node/query-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nconst create_view_node_js_1 = require(\"../operation-node/create-view-node.js\");\nconst set_operation_node_js_1 = require(\"../operation-node/set-operation-node.js\");\nclass DefaultQueryCompiler extends operation_node_visitor_js_1.OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.visitNode(node);\n        return (0, object_utils_js_1.freeze)({\n            query: node,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !parens_node_js_1.ParensNode.is(this.parentNode) &&\n            !insert_query_node_js_1.InsertQueryNode.is(this.parentNode) &&\n            !create_view_node_js_1.CreateViewNode.is(this.parentNode) &&\n            !set_operation_node_js_1.SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const isSubQuery = this.nodeStack.find(query_node_js_1.QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        if (node.ignore) {\n            this.append(' ignore');\n        }\n        this.append(' into ');\n        this.visitNode(node.into);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(query_node_js_1.QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        this.visitNode(node.from);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!(0, object_utils_js_1.isString)(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList([...node.columns, ...(node.constraints ?? [])]);\n        this.append(')');\n        if (node.onCommit) {\n            this.append(' on commit ');\n            this.append(node.onCommit);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitColumnDefinition(node) {\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const isSubQuery = this.nodeStack.find(query_node_js_1.QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        this.visitNode(node.table);\n        this.append(' set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if ((0, object_utils_js_1.isBoolean)(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileList(node.columnAlterations);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            this.append('type ');\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        this.append(')');\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return operator_node_js_1.OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if ((0, object_utils_js_1.isString)(value)) {\n            this.append(`'${value}'`);\n        }\n        else if ((0, object_utils_js_1.isNumber)(value) || (0, object_utils_js_1.isBoolean)(value)) {\n            this.append(value.toString());\n        }\n        else if ((0, object_utils_js_1.isNull)(value)) {\n            this.append('null');\n        }\n        else if ((0, object_utils_js_1.isDate)(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else if ((0, object_utils_js_1.isBigInt)(value)) {\n            this.appendImmediateValue(value.toString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return (0, object_utils_js_1.freeze)(arr);\n    }\n}\nexports.DefaultQueryCompiler = DefaultQueryCompiler;\nconst SELECT_MODIFIER_SQL = (0, object_utils_js_1.freeze)({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = (0, object_utils_js_1.freeze)({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = (0, object_utils_js_1.freeze)({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompiledQuery = void 0;\nconst raw_node_js_1 = require(\"../operation-node/raw-node.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nexports.CompiledQuery = (0, object_utils_js_1.freeze)({\n    raw(sql, parameters = []) {\n        return (0, object_utils_js_1.freeze)({\n            sql,\n            query: raw_node_js_1.RawNode.createWithSql(sql),\n            parameters: (0, object_utils_js_1.freeze)(parameters),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DummyDriver = void 0;\n/**\n * A driver that does absolutely nothing.\n *\n * You can use this to create Kysely instances solely for building queries\n *\n * ### Examples\n *\n * This example creates a Kysely instance for building postgres queries:\n *\n * ```ts\n * const db = new Kysely<Database>({\n *   dialect: {\n *     createAdapter() {\n *       return new PostgresAdapter()\n *     },\n *     createDriver() {\n *       return new DummyDriver()\n *     },\n *     createIntrospector(db: Kysely<any>) {\n *       return new PostgresIntrospector(db)\n *     },\n *     createQueryCompiler() {\n *       return new PostgresQueryCompiler()\n *     },\n *   },\n * })\n * ```\n *\n * You can use it to build a query and compile it to SQL but trying to\n * execute the query will throw an error.\n *\n * ```ts\n * const { sql } = db.selectFrom('person').selectAll().compile()\n * console.log(sql) // select * from \"person\"\n * ```\n */\nclass DummyDriver {\n    async init() {\n        // Nothing to do here.\n    }\n    async acquireConnection() {\n        return new DummyConnection();\n    }\n    async beginTransaction() {\n        // Nothing to do here.\n    }\n    async commitTransaction() {\n        // Nothing to do here.\n    }\n    async rollbackTransaction() {\n        // Nothing to do here.\n    }\n    async releaseConnection() {\n        // Nothing to do here.\n    }\n    async destroy() {\n        // Nothing to do here.\n    }\n}\nexports.DummyDriver = DummyDriver;\nclass DummyConnection {\n    async executeQuery() {\n        return {\n            rows: [],\n        };\n    }\n    async *streamQuery() {\n        // Nothing to do here.\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DialectAdapterBase = void 0;\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * 3rd party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nclass DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n}\nexports.DialectAdapterBase = DialectAdapterBase;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SqliteDriver = void 0;\nconst compiled_query_js_1 = require(\"../../query-compiler/compiled-query.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nclass SqliteDriver {\n    #config;\n    #connectionMutex = new ConnectionMutex();\n    #db;\n    #connection;\n    constructor(config) {\n        this.#config = (0, object_utils_js_1.freeze)({ ...config });\n    }\n    async init() {\n        this.#db = (0, object_utils_js_1.isFunction)(this.#config.database)\n            ? await this.#config.database()\n            : this.#config.database;\n        this.#connection = new SqliteConnection(this.#db);\n        if (this.#config.onCreateConnection) {\n            await this.#config.onCreateConnection(this.#connection);\n        }\n    }\n    async acquireConnection() {\n        // SQLite only has one single connection. We use a mutex here to wait\n        // until the single connection has been released.\n        await this.#connectionMutex.lock();\n        return this.#connection;\n    }\n    async beginTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection() {\n        this.#connectionMutex.unlock();\n    }\n    async destroy() {\n        this.#db?.close();\n    }\n}\nexports.SqliteDriver = SqliteDriver;\nclass SqliteConnection {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    executeQuery(compiledQuery) {\n        const { sql, parameters } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (stmt.reader) {\n            return Promise.resolve({\n                rows: stmt.all(parameters),\n            });\n        }\n        else {\n            const { changes, lastInsertRowid } = stmt.run(parameters);\n            const numAffectedRows = changes !== undefined && changes !== null ? BigInt(changes) : undefined;\n            return Promise.resolve({\n                // TODO: remove.\n                numUpdatedOrDeletedRows: numAffectedRows,\n                numAffectedRows,\n                insertId: lastInsertRowid !== undefined && lastInsertRowid !== null\n                    ? BigInt(lastInsertRowid)\n                    : undefined,\n                rows: [],\n            });\n        }\n    }\n    async *streamQuery() {\n        throw new Error(\"Sqlite driver doesn't support streaming\");\n    }\n}\nclass ConnectionMutex {\n    #promise;\n    #resolve;\n    async lock() {\n        while (this.#promise) {\n            await this.#promise;\n        }\n        this.#promise = new Promise((resolve) => {\n            this.#resolve = resolve;\n        });\n    }\n    unlock() {\n        const resolve = this.#resolve;\n        this.#promise = undefined;\n        this.#resolve = undefined;\n        resolve?.();\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SqliteQueryCompiler = void 0;\nconst default_query_compiler_js_1 = require(\"../../query-compiler/default-query-compiler.js\");\nconst ID_WRAP_REGEX = /\"/g;\nclass SqliteQueryCompiler extends default_query_compiler_js_1.DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n    visitDefaultInsertValue(_) {\n        // sqlite doesn't support the `default` keyword in inserts.\n        this.append('null');\n    }\n}\nexports.SqliteQueryCompiler = SqliteQueryCompiler;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopPlugin = void 0;\nclass NoopPlugin {\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\nexports.NoopPlugin = NoopPlugin;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Migrator = exports.NO_MIGRATIONS = exports.MIGRATION_LOCK_ID = exports.DEFAULT_MIGRATION_LOCK_TABLE = exports.DEFAULT_MIGRATION_TABLE = void 0;\nconst noop_plugin_js_1 = require(\"../plugin/noop-plugin.js\");\nconst with_schema_plugin_js_1 = require(\"../plugin/with-schema/with-schema-plugin.js\");\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\nexports.DEFAULT_MIGRATION_TABLE = 'kysely_migration';\nexports.DEFAULT_MIGRATION_LOCK_TABLE = 'kysely_migration_lock';\nexports.MIGRATION_LOCK_ID = 'migration_lock';\nexports.NO_MIGRATIONS = (0, object_utils_js_1.freeze)({ __noMigrations__: true });\n/**\n * A class for running migrations.\n *\n * ### Example\n *\n * This example uses the {@link FileMigrationProvider} that reads migrations\n * files from a single folder. You can easily implement your own\n * {@link MigrationProvider} if you want to provide migrations some\n * other way.\n *\n * ```ts\n * import { promises as fs } from 'fs'\n * import path from 'path'\n *\n * const migrator = new Migrator({\n *   db,\n *   provider: new FileMigrationProvider({\n *     fs,\n *     path,\n *     // Path to the folder that contains all your migrations.\n *     migrationFolder: 'some/path/to/migrations'\n *   })\n * })\n * ```\n */\nclass Migrator {\n    #props;\n    constructor(props) {\n        this.#props = (0, object_utils_js_1.freeze)(props);\n    }\n    /**\n     * Returns a {@link MigrationInfo} object for each migration.\n     *\n     * The returned array is sorted by migration name.\n     */\n    async getMigrations() {\n        const executedMigrations = (await this.#doesTableExists(this.#migrationTable))\n            ? await this.#props.db\n                .withPlugin(this.#schemaPlugin)\n                .selectFrom(this.#migrationTable)\n                .select(['name', 'timestamp'])\n                .execute()\n            : [];\n        const migrations = await this.#resolveMigrations();\n        return migrations.map(({ name, ...migration }) => {\n            const executed = executedMigrations.find((it) => it.name === name);\n            return {\n                name,\n                migration,\n                executedAt: executed ? new Date(executed.timestamp) : undefined,\n            };\n        });\n    }\n    /**\n     * Runs all migrations that have not yet been run.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed. See the examples below.\n     *\n     * This method goes through all possible migrations provided by the provider and runs the\n     * ones whose names come alphabetically after the last migration that has been run. If the\n     * list of executed migrations doesn't match the beginning of the list of possible migrations\n     * an error is thrown.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const db = new Kysely<Database>({\n     *   dialect: new PostgresDialect({\n     *     host: 'localhost',\n     *     database: 'kysely_test',\n     *   }),\n     * })\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider(\n     *     // Path to the folder that contains all your migrations.\n     *     'some/path/to/migrations'\n     *   )\n     * })\n     *\n     * const { error, results } = await migrator.migrateToLatest()\n     *\n     * results?.forEach((it) => {\n     *   if (it.status === 'Success') {\n     *     console.log(`migration \"${it.migrationName}\" was executed successfully`)\n     *   } else if (it.status === 'Error') {\n     *     console.error(`failed to execute migration \"${it.migrationName}\"`)\n     *   }\n     * })\n     *\n     * if (error) {\n     *   console.error('failed to run `migrateToLatest`')\n     *   console.error(error)\n     * }\n     * ```\n     */\n    async migrateToLatest() {\n        return this.#migrate(({ migrations }) => migrations.length - 1);\n    }\n    /**\n     * Migrate up/down to a specific migration.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateTo('some_migration')\n     * ```\n     *\n     * If you specify the name of the first migration, this method migrates\n     * down to the first migration, but doesn't run the `down` method of\n     * the first migration. In case you want to migrate all the way down,\n     * you can use a special constant `NO_MIGRATIONS`:\n     *\n     * ```ts\n     * await migrator.migrateTo(NO_MIGRATIONS)\n     * ```\n     */\n    async migrateTo(targetMigrationName) {\n        return this.#migrate(({ migrations }) => {\n            if (targetMigrationName === exports.NO_MIGRATIONS) {\n                return -1;\n            }\n            const index = migrations.findIndex((it) => it.name === targetMigrationName);\n            if (index === -1) {\n                throw new Error(`migration \"${targetMigrationName}\" doesn't exist`);\n            }\n            return index;\n        });\n    }\n    /**\n     * Migrate one step up.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateUp()\n     * ```\n     */\n    async migrateUp() {\n        return this.#migrate(({ currentIndex, migrations }) => Math.min(currentIndex + 1, migrations.length - 1));\n    }\n    /**\n     * Migrate one step down.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateDown()\n     * ```\n     */\n    async migrateDown() {\n        return this.#migrate(({ currentIndex }) => Math.max(currentIndex - 1, -1));\n    }\n    async #migrate(getTargetMigrationIndex) {\n        try {\n            await this.#ensureMigrationTablesExists();\n            return await this.#runMigrations(getTargetMigrationIndex);\n        }\n        catch (error) {\n            if (error instanceof MigrationResultSetError) {\n                return error.resultSet;\n            }\n            return { error };\n        }\n    }\n    get #migrationTableSchema() {\n        return this.#props.migrationTableSchema;\n    }\n    get #migrationTable() {\n        return this.#props.migrationTableName ?? exports.DEFAULT_MIGRATION_TABLE;\n    }\n    get #migrationLockTable() {\n        return this.#props.migrationLockTableName ?? exports.DEFAULT_MIGRATION_LOCK_TABLE;\n    }\n    get #schemaPlugin() {\n        if (this.#migrationTableSchema) {\n            return new with_schema_plugin_js_1.WithSchemaPlugin(this.#migrationTableSchema);\n        }\n        return new noop_plugin_js_1.NoopPlugin();\n    }\n    async #ensureMigrationTablesExists() {\n        await this.#ensureMigrationTableSchemaExists();\n        await this.#ensureMigrationTableExists();\n        await this.#ensureMigrationLockTableExists();\n        await this.#ensureLockRowExists();\n    }\n    async #ensureMigrationTableSchemaExists() {\n        if (!this.#migrationTableSchema) {\n            // Use default schema. Nothing to do.\n            return;\n        }\n        if (!(await this.#doesSchemaExists())) {\n            try {\n                await this.#props.db.schema\n                    .createSchema(this.#migrationTableSchema)\n                    .ifNotExists()\n                    .execute();\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create schema`\n                // query doesn't throw if the schema already exits. That's why we check if\n                // the schema exist here and ignore the error if it does.\n                if (!(await this.#doesSchemaExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationTable))) {\n            try {\n                if (this.#migrationTableSchema) {\n                    await this.#props.db.schema\n                        .createSchema(this.#migrationTableSchema)\n                        .ifNotExists()\n                        .execute();\n                }\n                await this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationTable)\n                    .ifNotExists()\n                    .addColumn('name', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    // The migration run time as ISO string. This is not a real date type as we\n                    // can't know which data type is supported by all future dialects.\n                    .addColumn('timestamp', 'varchar(255)', (col) => col.notNull())\n                    .execute();\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationLockTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n            try {\n                await this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationLockTable)\n                    .ifNotExists()\n                    .addColumn('id', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    .addColumn('is_locked', 'integer', (col) => col.notNull().defaultTo(0))\n                    .execute();\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureLockRowExists() {\n        if (!(await this.#doesLockRowExists())) {\n            try {\n                await this.#props.db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationLockTable)\n                    .values({ id: exports.MIGRATION_LOCK_ID, is_locked: 0 })\n                    .execute();\n            }\n            catch (error) {\n                if (!(await this.#doesLockRowExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #doesSchemaExists() {\n        const schemas = await this.#props.db.introspection.getSchemas();\n        return schemas.some((it) => it.name === this.#migrationTableSchema);\n    }\n    async #doesTableExists(tableName) {\n        const schema = this.#migrationTableSchema;\n        const tables = await this.#props.db.introspection.getTables({\n            withInternalKyselyTables: true,\n        });\n        return tables.some((it) => it.name === tableName && (!schema || it.schema === schema));\n    }\n    async #doesLockRowExists() {\n        const lockRow = await this.#props.db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationLockTable)\n            .where('id', '=', exports.MIGRATION_LOCK_ID)\n            .select('id')\n            .executeTakeFirst();\n        return !!lockRow;\n    }\n    async #runMigrations(getTargetMigrationIndex) {\n        const adapter = this.#props.db.getExecutor().adapter;\n        const lockOptions = (0, object_utils_js_1.freeze)({\n            lockTable: this.#props.migrationLockTableName ?? exports.DEFAULT_MIGRATION_LOCK_TABLE,\n            lockRowId: exports.MIGRATION_LOCK_ID,\n            lockTableSchema: this.#props.migrationTableSchema,\n        });\n        const run = async (db) => {\n            try {\n                await adapter.acquireMigrationLock(db, lockOptions);\n                const state = await this.#getState(db);\n                if (state.migrations.length === 0) {\n                    return { results: [] };\n                }\n                const targetIndex = getTargetMigrationIndex(state);\n                if (targetIndex === undefined) {\n                    return { results: [] };\n                }\n                if (targetIndex < state.currentIndex) {\n                    return await this.#migrateDown(db, state, targetIndex);\n                }\n                else if (targetIndex > state.currentIndex) {\n                    return await this.#migrateUp(db, state, targetIndex);\n                }\n                return { results: [] };\n            }\n            finally {\n                await adapter.releaseMigrationLock(db, lockOptions);\n            }\n        };\n        if (adapter.supportsTransactionalDdl) {\n            return this.#props.db.transaction().execute(run);\n        }\n        else {\n            return this.#props.db.connection().execute(run);\n        }\n    }\n    async #getState(db) {\n        const migrations = await this.#resolveMigrations();\n        const executedMigrations = await this.#getExecutedMigrations(db);\n        this.#ensureMigrationsNotCorrupted(migrations, executedMigrations);\n        return (0, object_utils_js_1.freeze)({\n            migrations,\n            currentIndex: migrations.findIndex((it) => it.name === (0, object_utils_js_1.getLast)(executedMigrations)),\n        });\n    }\n    async #resolveMigrations() {\n        const allMigrations = await this.#props.provider.getMigrations();\n        return Object.keys(allMigrations)\n            .sort()\n            .map((name) => ({\n            ...allMigrations[name],\n            name,\n        }));\n    }\n    async #getExecutedMigrations(db) {\n        const executedMigrations = await db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationTable)\n            .select('name')\n            .orderBy('name')\n            .execute();\n        return executedMigrations.map((it) => it.name);\n    }\n    #ensureMigrationsNotCorrupted(migrations, executedMigrations) {\n        for (const executed of executedMigrations) {\n            if (!migrations.some((it) => it.name === executed)) {\n                throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);\n            }\n        }\n        // Now we know all executed migrations exist in the `migrations` list.\n        // Next we need to make sure that the executed migratiosns are the first\n        // ones in the migration list.\n        for (let i = 0; i < executedMigrations.length; ++i) {\n            if (migrations[i].name !== executedMigrations[i]) {\n                throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);\n            }\n        }\n    }\n    async #migrateDown(db, state, targetIndex) {\n        const results = [];\n        for (let i = state.currentIndex; i > targetIndex; --i) {\n            results.push({\n                migrationName: state.migrations[i].name,\n                direction: 'Down',\n                status: 'NotExecuted',\n            });\n        }\n        for (let i = 0; i < results.length; ++i) {\n            const migration = state.migrations.find((it) => it.name === results[i].migrationName);\n            try {\n                if (migration.down) {\n                    await migration.down(db);\n                    await db\n                        .withPlugin(this.#schemaPlugin)\n                        .deleteFrom(this.#migrationTable)\n                        .where('name', '=', migration.name)\n                        .execute();\n                    results[i] = {\n                        migrationName: migration.name,\n                        direction: 'Down',\n                        status: 'Success',\n                    };\n                }\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Down',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #migrateUp(db, state, targetIndex) {\n        const results = [];\n        for (let i = state.currentIndex + 1; i <= targetIndex; ++i) {\n            results.push({\n                migrationName: state.migrations[i].name,\n                direction: 'Up',\n                status: 'NotExecuted',\n            });\n        }\n        for (let i = 0; i < results.length; ++i) {\n            const migration = state.migrations.find((it) => it.name === results[i].migrationName);\n            try {\n                await migration.up(db);\n                await db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationTable)\n                    .values({\n                    name: migration.name,\n                    timestamp: new Date().toISOString(),\n                })\n                    .execute();\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Success',\n                };\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n}\nexports.Migrator = Migrator;\nclass MigrationResultSetError extends Error {\n    #resultSet;\n    constructor(result) {\n        super();\n        this.#resultSet = result;\n    }\n    get resultSet() {\n        return this.#resultSet;\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SqliteIntrospector = void 0;\nconst migrator_js_1 = require(\"../../migration/migrator.js\");\nconst sql_js_1 = require(\"../../raw-builder/sql.js\");\nclass SqliteIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        // Sqlite doesn't support schemas.\n        return [];\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('sqlite_master')\n            .where('type', 'in', ['table', 'view'])\n            .where('name', 'not like', 'sqlite_%')\n            .select('name')\n            .orderBy('name')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('name', '!=', migrator_js_1.DEFAULT_MIGRATION_TABLE)\n                .where('name', '!=', migrator_js_1.DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const tables = await query.execute();\n        return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    async #getTableMetadata(table) {\n        const db = this.#db;\n        // Get the SQL that was used to create the table.\n        const tableDefinition = await db\n            .selectFrom('sqlite_master')\n            .where('name', '=', table)\n            .select(['sql', 'type'])\n            .$castTo()\n            .executeTakeFirstOrThrow();\n        // Try to find the name of the column that has `autoincrement` \uD83E\uDD26\n        const autoIncrementCol = tableDefinition.sql\n            ?.split(/[\\(\\),]/)\n            ?.find((it) => it.toLowerCase().includes('autoincrement'))\n            ?.trimStart()\n            ?.split(/\\s+/)?.[0]\n            ?.replace(/[\"`]/g, '');\n        const columns = await db\n            .selectFrom((0, sql_js_1.sql) `pragma_table_info(${table})`.as('table_info'))\n            .select(['name', 'type', 'notnull', 'dflt_value'])\n            .orderBy('cid')\n            .execute();\n        return {\n            name: table,\n            isView: tableDefinition.type === 'view',\n            columns: columns.map((col) => ({\n                name: col.name,\n                dataType: col.type,\n                isNullable: !col.notnull,\n                isAutoIncrementing: col.name === autoIncrementCol,\n                hasDefaultValue: col.dflt_value != null,\n            })),\n        };\n    }\n}\nexports.SqliteIntrospector = SqliteIntrospector;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SqliteAdapter = void 0;\nclass SqliteAdapter {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\nexports.SqliteAdapter = SqliteAdapter;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SqliteDialect = void 0;\nconst sqlite_driver_js_1 = require(\"./sqlite-driver.js\");\nconst sqlite_query_compiler_js_1 = require(\"./sqlite-query-compiler.js\");\nconst sqlite_introspector_js_1 = require(\"./sqlite-introspector.js\");\nconst sqlite_adapter_js_1 = require(\"./sqlite-adapter.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\n/**\n * SQLite dialect that uses the [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) library.\n *\n * The constructor takes an instance of {@link SqliteDialectConfig}.\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: new Database('db.sqlite')\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `database`\n * can be a function:\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: async () => new Database('db.sqlite')\n * })\n * ```\n */\nclass SqliteDialect {\n    #config;\n    constructor(config) {\n        this.#config = (0, object_utils_js_1.freeze)({ ...config });\n    }\n    createDriver() {\n        return new sqlite_driver_js_1.SqliteDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new sqlite_query_compiler_js_1.SqliteQueryCompiler();\n    }\n    createAdapter() {\n        return new sqlite_adapter_js_1.SqliteAdapter();\n    }\n    createIntrospector(db) {\n        return new sqlite_introspector_js_1.SqliteIntrospector(db);\n    }\n}\nexports.SqliteDialect = SqliteDialect;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgresQueryCompiler = void 0;\nconst default_query_compiler_js_1 = require(\"../../query-compiler/default-query-compiler.js\");\nconst ID_WRAP_REGEX = /\"/g;\nclass PostgresQueryCompiler extends default_query_compiler_js_1.DefaultQueryCompiler {\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n}\nexports.PostgresQueryCompiler = PostgresQueryCompiler;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgresIntrospector = void 0;\nconst migrator_js_1 = require(\"../../migration/migrator.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nconst sql_js_1 = require(\"../../raw-builder/sql.js\");\nclass PostgresIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('pg_catalog.pg_namespace')\n            .select('nspname')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.nspname }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            // column\n            .selectFrom('pg_catalog.pg_attribute as a')\n            // table\n            .innerJoin('pg_catalog.pg_class as c', 'a.attrelid', 'c.oid')\n            // table schema\n            .innerJoin('pg_catalog.pg_namespace as ns', 'c.relnamespace', 'ns.oid')\n            // column data type\n            .innerJoin('pg_catalog.pg_type as typ', 'a.atttypid', 'typ.oid')\n            // column data type schema\n            .innerJoin('pg_catalog.pg_namespace as dtns', 'typ.typnamespace', 'dtns.oid')\n            .select([\n            'a.attname as column',\n            'a.attnotnull as not_null',\n            'a.atthasdef as has_default',\n            'c.relname as table',\n            'c.relkind as table_type',\n            'ns.nspname as schema',\n            'typ.typname as type',\n            'dtns.nspname as type_schema',\n            // Detect if the column is auto incrementing by finding the sequence\n            // that is created for `serial` and `bigserial` columns.\n            this.#db\n                .selectFrom('pg_class')\n                .select((0, sql_js_1.sql) `true`.as('auto_incrementing'))\n                // Make sure the sequence is in the same schema as the table.\n                .whereRef('relnamespace', '=', 'c.relnamespace')\n                .where('relkind', '=', 'S')\n                .where('relname', '=', (0, sql_js_1.sql) `c.relname || '_' || a.attname || '_seq'`)\n                .as('auto_incrementing'),\n        ])\n            // r == normal table\n            .where((eb) => eb.or([eb('c.relkind', '=', 'r'), eb('c.relkind', '=', 'v')]))\n            .where('ns.nspname', '!~', '^pg_')\n            .where('ns.nspname', '!=', 'information_schema')\n            // No system columns\n            .where('a.attnum', '>=', 0)\n            .where('a.attisdropped', '!=', true)\n            .orderBy('ns.nspname')\n            .orderBy('c.relname')\n            .orderBy('a.attnum')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('c.relname', '!=', migrator_js_1.DEFAULT_MIGRATION_TABLE)\n                .where('c.relname', '!=', migrator_js_1.DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);\n            if (!table) {\n                table = (0, object_utils_js_1.freeze)({\n                    name: it.table,\n                    isView: it.table_type === 'v',\n                    schema: it.schema,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push((0, object_utils_js_1.freeze)({\n                name: it.column,\n                dataType: it.type,\n                dataTypeSchema: it.type_schema,\n                isNullable: !it.not_null,\n                isAutoIncrementing: !!it.auto_incrementing,\n                hasDefaultValue: it.has_default,\n            }));\n            return tables;\n        }, []);\n    }\n}\nexports.PostgresIntrospector = PostgresIntrospector;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgresAdapter = void 0;\nconst sql_js_1 = require(\"../../raw-builder/sql.js\");\nconst dialect_adapter_base_js_1 = require(\"../dialect-adapter-base.js\");\n// Random id for our transaction lock.\nconst LOCK_ID = BigInt('3853314791062309107');\nclass PostgresAdapter extends dialect_adapter_base_js_1.DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Acquire a transaction level advisory lock.\n        await (0, sql_js_1.sql) `select pg_advisory_xact_lock(${sql_js_1.sql.lit(LOCK_ID)})`.execute(db);\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // Nothing to do here. `pg_advisory_xact_lock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\nexports.PostgresAdapter = PostgresAdapter;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendStackTrace = void 0;\nconst object_utils_js_1 = require(\"./object-utils.js\");\nfunction extendStackTrace(err, stackError) {\n    if (isStackHolder(err) && stackError.stack) {\n        // Remove the first line that just says `Error`.\n        const stackExtension = stackError.stack.split('\\n').slice(1).join('\\n');\n        err.stack += `\\n${stackExtension}`;\n        return err;\n    }\n    return err;\n}\nexports.extendStackTrace = extendStackTrace;\nfunction isStackHolder(obj) {\n    return (0, object_utils_js_1.isObject)(obj) && (0, object_utils_js_1.isString)(obj.stack);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MysqlDriver = void 0;\nconst compiled_query_js_1 = require(\"../../query-compiler/compiled-query.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nconst stack_trace_utils_js_1 = require(\"../../util/stack-trace-utils.js\");\nconst PRIVATE_RELEASE_METHOD = Symbol();\nclass MysqlDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(configOrPool) {\n        this.#config = (0, object_utils_js_1.freeze)({ ...configOrPool });\n    }\n    async init() {\n        this.#pool = (0, object_utils_js_1.isFunction)(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const rawConnection = await this.#acquireConnection();\n        let connection = this.#connections.get(rawConnection);\n        if (!connection) {\n            connection = new MysqlConnection(rawConnection);\n            this.#connections.set(rawConnection, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `mysql2` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config?.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        return connection;\n    }\n    async #acquireConnection() {\n        return new Promise((resolve, reject) => {\n            this.#pool.getConnection(async (err, rawConnection) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rawConnection);\n                }\n            });\n        });\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel) {\n            // On MySQL this sets the isolation level of the next transaction.\n            await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw(`set transaction isolation level ${settings.isolationLevel}`));\n        }\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        return new Promise((resolve, reject) => {\n            this.#pool.end((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nexports.MysqlDriver = MysqlDriver;\nfunction isOkPacket(obj) {\n    return (0, object_utils_js_1.isObject)(obj) && 'insertId' in obj && 'affectedRows' in obj;\n}\nclass MysqlConnection {\n    #rawConnection;\n    constructor(rawConnection) {\n        this.#rawConnection = rawConnection;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const result = await this.#executeQuery(compiledQuery);\n            if (isOkPacket(result)) {\n                const { insertId, affectedRows, changedRows } = result;\n                const numAffectedRows = affectedRows !== undefined && affectedRows !== null\n                    ? BigInt(affectedRows)\n                    : undefined;\n                const numChangedRows = changedRows !== undefined && changedRows !== null\n                    ? BigInt(changedRows)\n                    : undefined;\n                return {\n                    insertId: insertId !== undefined &&\n                        insertId !== null &&\n                        insertId.toString() !== '0'\n                        ? BigInt(insertId)\n                        : undefined,\n                    // TODO: remove.\n                    numUpdatedOrDeletedRows: numAffectedRows,\n                    numAffectedRows,\n                    numChangedRows,\n                    rows: [],\n                };\n            }\n            else if (Array.isArray(result)) {\n                return {\n                    rows: result,\n                };\n            }\n            return {\n                rows: [],\n            };\n        }\n        catch (err) {\n            throw (0, stack_trace_utils_js_1.extendStackTrace)(err, new Error());\n        }\n    }\n    #executeQuery(compiledQuery) {\n        return new Promise((resolve, reject) => {\n            this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    async *streamQuery(compiledQuery, _chunkSize) {\n        const stream = this.#rawConnection\n            .query(compiledQuery.sql, compiledQuery.parameters)\n            .stream({\n            objectMode: true,\n        });\n        try {\n            for await (const row of stream) {\n                yield {\n                    rows: [row],\n                };\n            }\n        }\n        catch (ex) {\n            if (ex &&\n                typeof ex === 'object' &&\n                'code' in ex &&\n                // @ts-ignore\n                ex.code === 'ERR_STREAM_PREMATURE_CLOSE') {\n                // Most likely because of https://github.com/mysqljs/mysql/blob/master/lib/protocol/sequences/Query.js#L220\n                return;\n            }\n            throw ex;\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#rawConnection.release();\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MysqlQueryCompiler = void 0;\nconst default_query_compiler_js_1 = require(\"../../query-compiler/default-query-compiler.js\");\nconst ID_WRAP_REGEX = /`/g;\nclass MysqlQueryCompiler extends default_query_compiler_js_1.DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getExplainOptionAssignment() {\n        return '=';\n    }\n    getExplainOptionsDelimiter() {\n        return ' ';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '`';\n    }\n    getRightIdentifierWrapper() {\n        return '`';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '``');\n    }\n}\nexports.MysqlQueryCompiler = MysqlQueryCompiler;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MysqlIntrospector = void 0;\nconst migrator_js_1 = require(\"../../migration/migrator.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nconst sql_js_1 = require(\"../../raw-builder/sql.js\");\nclass MysqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('information_schema.schemata')\n            .select('schema_name')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.SCHEMA_NAME }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('information_schema.columns as columns')\n            .innerJoin('information_schema.tables as tables', (b) => b\n            .onRef('columns.TABLE_CATALOG', '=', 'tables.TABLE_CATALOG')\n            .onRef('columns.TABLE_SCHEMA', '=', 'tables.TABLE_SCHEMA')\n            .onRef('columns.TABLE_NAME', '=', 'tables.TABLE_NAME'))\n            .select([\n            'columns.COLUMN_NAME',\n            'columns.COLUMN_DEFAULT',\n            'columns.TABLE_NAME',\n            'columns.TABLE_SCHEMA',\n            'tables.TABLE_TYPE',\n            'columns.IS_NULLABLE',\n            'columns.DATA_TYPE',\n            'columns.EXTRA',\n        ])\n            .where('columns.TABLE_SCHEMA', '=', (0, sql_js_1.sql) `database()`)\n            .orderBy('columns.TABLE_NAME')\n            .orderBy('columns.ORDINAL_POSITION')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('columns.TABLE_NAME', '!=', migrator_js_1.DEFAULT_MIGRATION_TABLE)\n                .where('columns.TABLE_NAME', '!=', migrator_js_1.DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);\n            if (!table) {\n                table = (0, object_utils_js_1.freeze)({\n                    name: it.TABLE_NAME,\n                    isView: it.TABLE_TYPE === 'VIEW',\n                    schema: it.TABLE_SCHEMA,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push((0, object_utils_js_1.freeze)({\n                name: it.COLUMN_NAME,\n                dataType: it.DATA_TYPE,\n                isNullable: it.IS_NULLABLE === 'YES',\n                isAutoIncrementing: it.EXTRA.toLowerCase().includes('auto_increment'),\n                hasDefaultValue: it.COLUMN_DEFAULT !== null,\n            }));\n            return tables;\n        }, []);\n    }\n}\nexports.MysqlIntrospector = MysqlIntrospector;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MysqlAdapter = void 0;\nconst sql_js_1 = require(\"../../raw-builder/sql.js\");\nconst dialect_adapter_base_js_1 = require(\"../dialect-adapter-base.js\");\nconst LOCK_ID = 'ea586330-2c93-47c8-908d-981d9d270f9d';\nconst LOCK_TIMEOUT_SECONDS = 60 * 60;\nclass MysqlAdapter extends dialect_adapter_base_js_1.DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Kysely uses a single connection to run the migrations. Because of that, we\n        // can take a lock using `get_lock`. Locks acquired using `get_lock` get\n        // released when the connection is destroyed (session ends) or when the lock\n        // is released using `release_lock`. This way we know that the lock is either\n        // released by us after successfull or failed migrations OR it's released by\n        // MySQL if the process gets killed for some reason.\n        await (0, sql_js_1.sql) `select get_lock(${sql_js_1.sql.lit(LOCK_ID)}, ${sql_js_1.sql.lit(LOCK_TIMEOUT_SECONDS)})`.execute(db);\n    }\n    async releaseMigrationLock(db, _opt) {\n        await (0, sql_js_1.sql) `select release_lock(${sql_js_1.sql.lit(LOCK_ID)})`.execute(db);\n    }\n}\nexports.MysqlAdapter = MysqlAdapter;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MysqlDialect = void 0;\nconst mysql_driver_js_1 = require(\"./mysql-driver.js\");\nconst mysql_query_compiler_js_1 = require(\"./mysql-query-compiler.js\");\nconst mysql_introspector_js_1 = require(\"./mysql-introspector.js\");\nconst mysql_adapter_js_1 = require(\"./mysql-adapter.js\");\n/**\n * MySQL dialect that uses the [mysql2](https://github.com/sidorares/node-mysql2#readme) library.\n *\n * The constructor takes an instance of {@link MysqlDialectConfig}.\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: async () => createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nclass MysqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new mysql_driver_js_1.MysqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new mysql_query_compiler_js_1.MysqlQueryCompiler();\n    }\n    createAdapter() {\n        return new mysql_adapter_js_1.MysqlAdapter();\n    }\n    createIntrospector(db) {\n        return new mysql_introspector_js_1.MysqlIntrospector(db);\n    }\n}\nexports.MysqlDialect = MysqlDialect;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgresDriver = void 0;\nconst compiled_query_js_1 = require(\"../../query-compiler/compiled-query.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nconst stack_trace_utils_js_1 = require(\"../../util/stack-trace-utils.js\");\nconst PRIVATE_RELEASE_METHOD = Symbol();\nclass PostgresDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(config) {\n        this.#config = (0, object_utils_js_1.freeze)({ ...config });\n    }\n    async init() {\n        this.#pool = (0, object_utils_js_1.isFunction)(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const client = await this.#pool.connect();\n        let connection = this.#connections.get(client);\n        if (!connection) {\n            connection = new PostgresConnection(client, {\n                cursor: this.#config.cursor ?? null,\n            });\n            this.#connections.set(client, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `pg` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config?.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        return connection;\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel) {\n            await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`));\n        }\n        else {\n            await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('begin'));\n        }\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(compiled_query_js_1.CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        if (this.#pool) {\n            const pool = this.#pool;\n            this.#pool = undefined;\n            await pool.end();\n        }\n    }\n}\nexports.PostgresDriver = PostgresDriver;\nclass PostgresConnection {\n    #client;\n    #options;\n    constructor(client, options) {\n        this.#client = client;\n        this.#options = options;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const result = await this.#client.query(compiledQuery.sql, [\n                ...compiledQuery.parameters,\n            ]);\n            if (result.command === 'INSERT' ||\n                result.command === 'UPDATE' ||\n                result.command === 'DELETE') {\n                const numAffectedRows = BigInt(result.rowCount);\n                return {\n                    // TODO: remove.\n                    numUpdatedOrDeletedRows: numAffectedRows,\n                    numAffectedRows,\n                    rows: result.rows ?? [],\n                };\n            }\n            return {\n                rows: result.rows ?? [],\n            };\n        }\n        catch (err) {\n            throw (0, stack_trace_utils_js_1.extendStackTrace)(err, new Error());\n        }\n    }\n    async *streamQuery(compiledQuery, chunkSize) {\n        if (!this.#options.cursor) {\n            throw new Error(\"'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.\");\n        }\n        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n            throw new Error('chunkSize must be a positive integer');\n        }\n        const cursor = this.#client.query(new this.#options.cursor(compiledQuery.sql, compiledQuery.parameters.slice()));\n        try {\n            while (true) {\n                const rows = await cursor.read(chunkSize);\n                if (rows.length === 0) {\n                    break;\n                }\n                yield {\n                    rows,\n                };\n            }\n        }\n        finally {\n            await cursor.close();\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#client.release();\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgresDialect = void 0;\nconst postgres_driver_js_1 = require(\"./postgres-driver.js\");\nconst postgres_introspector_js_1 = require(\"./postgres-introspector.js\");\nconst postgres_query_compiler_js_1 = require(\"./postgres-query-compiler.js\");\nconst postgres_adapter_js_1 = require(\"./postgres-adapter.js\");\n/**\n * PostgreSQL dialect that uses the [pg](https://node-postgres.com/) library.\n *\n * The constructor takes an instance of {@link PostgresDialectConfig}.\n *\n * ```ts\n * import {\u00A0Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import {\u00A0Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: async () => new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nclass PostgresDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new postgres_driver_js_1.PostgresDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new postgres_query_compiler_js_1.PostgresQueryCompiler();\n    }\n    createAdapter() {\n        return new postgres_adapter_js_1.PostgresAdapter();\n    }\n    createIntrospector(db) {\n        return new postgres_introspector_js_1.PostgresIntrospector(db);\n    }\n}\nexports.PostgresDialect = PostgresDialect;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileMigrationProvider = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * Reads all migrations from a folder in node.js.\n *\n * ### Examples\n *\n * ```ts\n * import { promises as fs } from 'fs'\n * import path from 'path'\n *\n * new FileMigrationProvider({\n *   fs,\n *   path,\n *   migrationFolder: 'path/to/migrations/folder'\n * })\n * ```\n */\nclass FileMigrationProvider {\n    #props;\n    constructor(props) {\n        this.#props = props;\n    }\n    async getMigrations() {\n        const migrations = {};\n        const files = await this.#props.fs.readdir(this.#props.migrationFolder);\n        for (const fileName of files) {\n            if (fileName.endsWith('.js') ||\n                (fileName.endsWith('.ts') && !fileName.endsWith('.d.ts')) ||\n                fileName.endsWith('.mjs') ||\n                (fileName.endsWith('.mts') && !fileName.endsWith('.d.mts'))) {\n                const migration = await Promise.resolve(`${\n                /* webpackIgnore: true */ this.#props.path.join(this.#props.migrationFolder, fileName)}`).then(s => require(s));\n                const migrationKey = fileName.substring(0, fileName.lastIndexOf('.'));\n                // Handle esModuleInterop export's `default` prop...\n                if (isMigration(migration?.default)) {\n                    migrations[migrationKey] = migration.default;\n                }\n                else if (isMigration(migration)) {\n                    migrations[migrationKey] = migration;\n                }\n            }\n        }\n        return migrations;\n    }\n}\nexports.FileMigrationProvider = FileMigrationProvider;\nfunction isMigration(obj) {\n    return (0, object_utils_js_1.isObject)(obj) && (0, object_utils_js_1.isFunction)(obj.up);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnakeCaseTransformer = void 0;\nconst operation_node_transformer_js_1 = require(\"../../operation-node/operation-node-transformer.js\");\nclass SnakeCaseTransformer extends operation_node_transformer_js_1.OperationNodeTransformer {\n    #snakeCase;\n    constructor(snakeCase) {\n        super();\n        this.#snakeCase = snakeCase;\n    }\n    transformIdentifier(node) {\n        node = super.transformIdentifier(node);\n        return {\n            ...node,\n            name: this.#snakeCase(node.name),\n        };\n    }\n}\nexports.SnakeCaseTransformer = SnakeCaseTransformer;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCamelCaseMapper = exports.createSnakeCaseMapper = void 0;\n/**\n * Creates a function that transforms camel case strings to snake case.\n */\nfunction createSnakeCaseMapper({ upperCase = false, underscoreBeforeDigits = false, underscoreBetweenUppercaseLetters = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        const upper = str.toUpperCase();\n        const lower = str.toLowerCase();\n        let out = lower[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            const upperChar = upper[i];\n            const prevUpperChar = upper[i - 1];\n            const lowerChar = lower[i];\n            const prevLowerChar = lower[i - 1];\n            // If underScoreBeforeDigits is true then, well, insert an underscore\n            // before digits :). Only the first digit gets an underscore if\n            // there are multiple.\n            if (underscoreBeforeDigits && isDigit(char) && !isDigit(prevChar)) {\n                out += '_' + char;\n                continue;\n            }\n            // Test if `char` is an upper-case character and that the character\n            // actually has different upper and lower case versions.\n            if (char === upperChar && upperChar !== lowerChar) {\n                const prevCharacterIsUppercase = prevChar === prevUpperChar && prevUpperChar !== prevLowerChar;\n                // If underscoreBetweenUppercaseLetters is true, we always place an underscore\n                // before consecutive uppercase letters (e.g. \"fooBAR\" becomes \"foo_b_a_r\").\n                // Otherwise, we don't (e.g. \"fooBAR\" becomes \"foo_bar\").\n                if (underscoreBetweenUppercaseLetters || !prevCharacterIsUppercase) {\n                    out += '_' + lowerChar;\n                }\n                else {\n                    out += lowerChar;\n                }\n            }\n            else {\n                out += char;\n            }\n        }\n        if (upperCase) {\n            return out.toUpperCase();\n        }\n        else {\n            return out;\n        }\n    });\n}\nexports.createSnakeCaseMapper = createSnakeCaseMapper;\n/**\n * Creates a function that transforms snake case strings to camel case.\n */\nfunction createCamelCaseMapper({ upperCase = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        if (upperCase && isAllUpperCaseSnakeCase(str)) {\n            // Only convert to lower case if the string is all upper\n            // case snake_case. This allows camelCase strings to go\n            // through without changing.\n            str = str.toLowerCase();\n        }\n        let out = str[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            if (char !== '_') {\n                if (prevChar === '_') {\n                    out += char.toUpperCase();\n                }\n                else {\n                    out += char;\n                }\n            }\n        }\n        return out;\n    });\n}\nexports.createCamelCaseMapper = createCamelCaseMapper;\nfunction isAllUpperCaseSnakeCase(str) {\n    for (let i = 1, l = str.length; i < l; ++i) {\n        const char = str[i];\n        if (char !== '_' && char !== char.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isDigit(char) {\n    return char >= '0' && char <= '9';\n}\nfunction memoize(func) {\n    const cache = new Map();\n    return (str) => {\n        let mapped = cache.get(str);\n        if (!mapped) {\n            mapped = func(str);\n            cache.set(str, mapped);\n        }\n        return mapped;\n    };\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CamelCasePlugin = void 0;\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nconst camel_case_transformer_js_1 = require(\"./camel-case-transformer.js\");\nconst camel_case_js_1 = require(\"./camel-case.js\");\n/**\n * A plugin that converts snake_case identifiers in the database into\n * camelCase in the javascript side.\n *\n * For example let's assume we have a table called `person_table`\n * with columns `first_name` and `last_name` in the database. When\n * using `CamelCasePlugin` we would setup Kysely like this:\n *\n * ```ts\n * interface Person {\n *   firstName: string\n *   lastName: string\n * }\n *\n * interface Database {\n *   personTable: Person\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     database: 'kysely_test',\n *     host: 'localhost',\n *   }),\n *   plugins: [\n *     new CamelCasePlugin()\n *   ]\n * })\n *\n * const person = await db.selectFrom('personTable')\n *   .where('firstName', '=', 'Arnold')\n *   .select(['firstName', 'lastName'])\n *   .executeTakeFirst()\n *\n * // generated sql:\n * // select first_name, last_name from person_table where first_name = $1\n *\n * if (person) {\n *   console.log(person.firstName)\n * }\n * ```\n *\n * As you can see from the example, __everything__ needs to be defined\n * in camelCase in the typescript code: table names, columns, schemas,\n * __everything__. When using the `CamelCasePlugin` Kysely works as if\n * the database was defined in camelCase.\n *\n * There are various options you can give to the plugin to modify\n * the way identifiers are converted. See {@link CamelCasePluginOptions}.\n * If those options are not enough, you can override this plugin's\n * `snakeCase` and `camelCase` methods to make the conversion exactly\n * the way you like:\n *\n * ```ts\n * class MyCamelCasePlugin extends CamelCasePlugin {\n *   protected override snakeCase(str: string): string {\n *     return mySnakeCase(str)\n *   }\n *\n *   protected override camelCase(str: string): string {\n *     return myCamelCase(str)\n *   }\n * }\n * ```\n */\nclass CamelCasePlugin {\n    opt;\n    #camelCase;\n    #snakeCase;\n    #snakeCaseTransformer;\n    constructor(opt = {}) {\n        this.opt = opt;\n        this.#camelCase = (0, camel_case_js_1.createCamelCaseMapper)(opt);\n        this.#snakeCase = (0, camel_case_js_1.createSnakeCaseMapper)(opt);\n        this.#snakeCaseTransformer = new camel_case_transformer_js_1.SnakeCaseTransformer(this.snakeCase.bind(this));\n    }\n    transformQuery(args) {\n        return this.#snakeCaseTransformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        if (args.result.rows && Array.isArray(args.result.rows)) {\n            return {\n                ...args.result,\n                rows: args.result.rows.map((row) => this.mapRow(row)),\n            };\n        }\n        return args.result;\n    }\n    mapRow(row) {\n        return Object.keys(row).reduce((obj, key) => {\n            let value = row[key];\n            if (Array.isArray(value)) {\n                value = value.map((it) => (canMap(it, this.opt) ? this.mapRow(it) : it));\n            }\n            else if (canMap(value, this.opt)) {\n                value = this.mapRow(value);\n            }\n            obj[this.camelCase(key)] = value;\n            return obj;\n        }, {});\n    }\n    snakeCase(str) {\n        return this.#snakeCase(str);\n    }\n    camelCase(str) {\n        return this.#camelCase(str);\n    }\n}\nexports.CamelCasePlugin = CamelCasePlugin;\nfunction canMap(obj, opt) {\n    return (0, object_utils_js_1.isPlainObject)(obj) && !opt?.maintainNestedObjectKeys;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeduplicateJoinsTransformer = void 0;\nconst operation_node_transformer_js_1 = require(\"../../operation-node/operation-node-transformer.js\");\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\nclass DeduplicateJoinsTransformer extends operation_node_transformer_js_1.OperationNodeTransformer {\n    transformSelectQuery(node) {\n        return this.#transformQuery(super.transformSelectQuery(node));\n    }\n    transformUpdateQuery(node) {\n        return this.#transformQuery(super.transformUpdateQuery(node));\n    }\n    transformDeleteQuery(node) {\n        return this.#transformQuery(super.transformDeleteQuery(node));\n    }\n    #transformQuery(node) {\n        if (!node.joins || node.joins.length === 0) {\n            return node;\n        }\n        return (0, object_utils_js_1.freeze)({\n            ...node,\n            joins: this.#deduplicateJoins(node.joins),\n        });\n    }\n    #deduplicateJoins(joins) {\n        const out = [];\n        for (let i = 0; i < joins.length; ++i) {\n            let foundDuplicate = false;\n            for (let j = i + 1; j < joins.length; ++j) {\n                if ((0, object_utils_js_1.compare)(joins[i], joins[j])) {\n                    foundDuplicate = true;\n                    break;\n                }\n            }\n            if (!foundDuplicate) {\n                out.push(joins[i]);\n            }\n        }\n        return (0, object_utils_js_1.freeze)(out);\n    }\n}\nexports.DeduplicateJoinsTransformer = DeduplicateJoinsTransformer;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeduplicateJoinsPlugin = void 0;\nconst deduplicate_joins_transformer_js_1 = require(\"./deduplicate-joins-transformer.js\");\n/**\n * Plugin that removes duplicate joins from queries.\n *\n * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/deduplicate-joins.md)\n */\nclass DeduplicateJoinsPlugin {\n    #transformer = new deduplicate_joins_transformer_js_1.DeduplicateJoinsTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\nexports.DeduplicateJoinsPlugin = DeduplicateJoinsPlugin;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseJSONResultsPlugin = void 0;\nconst object_utils_js_1 = require(\"../../util/object-utils.js\");\n/**\n * Parses JSON strings in query results into JSON objects.\n *\n * This plugin can be useful with dialects that don't automatically parse\n * JSON into objects and arrays but return JSON strings instead.\n *\n * ```ts\n * const db = new Kysely<DB>({\n *   ...\n *   plugins: [new ParseJSONResultsPlugin()]\n * })\n * ```\n */\nclass ParseJSONResultsPlugin {\n    // noop\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return {\n            ...args.result,\n            rows: parseArray(args.result.rows),\n        };\n    }\n}\nexports.ParseJSONResultsPlugin = ParseJSONResultsPlugin;\nfunction parseArray(arr) {\n    for (let i = 0; i < arr.length; ++i) {\n        arr[i] = parse(arr[i]);\n    }\n    return arr;\n}\nfunction parse(obj) {\n    if ((0, object_utils_js_1.isString)(obj)) {\n        return parseString(obj);\n    }\n    if (Array.isArray(obj)) {\n        return parseArray(obj);\n    }\n    if ((0, object_utils_js_1.isPlainObject)(obj)) {\n        return parseObject(obj);\n    }\n    return obj;\n}\nfunction parseString(str) {\n    if (maybeJson(str)) {\n        try {\n            return parse(JSON.parse(str));\n        }\n        catch (err) {\n            // this catch block is intentionally empty.\n        }\n    }\n    return str;\n}\nfunction maybeJson(value) {\n    return value.match(/^[\\[\\{]/) != null;\n}\nfunction parseObject(obj) {\n    for (const key in obj) {\n        obj[key] = parse(obj[key]);\n    }\n    return obj;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListNode = void 0;\nconst object_utils_js_1 = require(\"../util/object-utils.js\");\n/**\n * @internal\n */\nexports.ListNode = (0, object_utils_js_1.freeze)({\n    is(node) {\n        return node.kind === 'ListNode';\n    },\n    create(items) {\n        return (0, object_utils_js_1.freeze)({\n            kind: 'ListNode',\n            items: (0, object_utils_js_1.freeze)(items),\n        });\n    },\n});\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logOnce = exports.expressionBuilder = void 0;\n__exportStar(require(\"./kysely.js\"), exports);\n__exportStar(require(\"./query-creator.js\"), exports);\n__exportStar(require(\"./expression/expression.js\"), exports);\nvar expression_builder_js_1 = require(\"./expression/expression-builder.js\");\nObject.defineProperty(exports, \"expressionBuilder\", { enumerable: true, get: function () { return expression_builder_js_1.expressionBuilder; } });\n__exportStar(require(\"./expression/expression-wrapper.js\"), exports);\n__exportStar(require(\"./query-builder/where-interface.js\"), exports);\n__exportStar(require(\"./query-builder/returning-interface.js\"), exports);\n__exportStar(require(\"./query-builder/having-interface.js\"), exports);\n__exportStar(require(\"./query-builder/select-query-builder.js\"), exports);\n__exportStar(require(\"./query-builder/insert-query-builder.js\"), exports);\n__exportStar(require(\"./query-builder/update-query-builder.js\"), exports);\n__exportStar(require(\"./query-builder/delete-query-builder.js\"), exports);\n__exportStar(require(\"./query-builder/no-result-error.js\"), exports);\n__exportStar(require(\"./query-builder/join-builder.js\"), exports);\n__exportStar(require(\"./query-builder/function-module.js\"), exports);\n__exportStar(require(\"./query-builder/insert-result.js\"), exports);\n__exportStar(require(\"./query-builder/delete-result.js\"), exports);\n__exportStar(require(\"./query-builder/update-result.js\"), exports);\n__exportStar(require(\"./query-builder/on-conflict-builder.js\"), exports);\n__exportStar(require(\"./query-builder/aggregate-function-builder.js\"), exports);\n__exportStar(require(\"./query-builder/case-builder.js\"), exports);\n__exportStar(require(\"./query-builder/json-path-builder.js\"), exports);\n__exportStar(require(\"./raw-builder/raw-builder.js\"), exports);\n__exportStar(require(\"./raw-builder/sql.js\"), exports);\n__exportStar(require(\"./query-executor/query-executor.js\"), exports);\n__exportStar(require(\"./query-executor/default-query-executor.js\"), exports);\n__exportStar(require(\"./query-executor/noop-query-executor.js\"), exports);\n__exportStar(require(\"./query-executor/query-executor-provider.js\"), exports);\n__exportStar(require(\"./query-compiler/default-query-compiler.js\"), exports);\n__exportStar(require(\"./query-compiler/compiled-query.js\"), exports);\n__exportStar(require(\"./schema/schema.js\"), exports);\n__exportStar(require(\"./schema/create-table-builder.js\"), exports);\n__exportStar(require(\"./schema/create-type-builder.js\"), exports);\n__exportStar(require(\"./schema/drop-table-builder.js\"), exports);\n__exportStar(require(\"./schema/drop-type-builder.js\"), exports);\n__exportStar(require(\"./schema/create-index-builder.js\"), exports);\n__exportStar(require(\"./schema/drop-index-builder.js\"), exports);\n__exportStar(require(\"./schema/create-schema-builder.js\"), exports);\n__exportStar(require(\"./schema/drop-schema-builder.js\"), exports);\n__exportStar(require(\"./schema/column-definition-builder.js\"), exports);\n__exportStar(require(\"./schema/foreign-key-constraint-builder.js\"), exports);\n__exportStar(require(\"./schema/alter-table-builder.js\"), exports);\n__exportStar(require(\"./schema/create-view-builder.js\"), exports);\n__exportStar(require(\"./schema/drop-view-builder.js\"), exports);\n__exportStar(require(\"./schema/alter-column-builder.js\"), exports);\n__exportStar(require(\"./dynamic/dynamic.js\"), exports);\n__exportStar(require(\"./driver/driver.js\"), exports);\n__exportStar(require(\"./driver/database-connection.js\"), exports);\n__exportStar(require(\"./driver/connection-provider.js\"), exports);\n__exportStar(require(\"./driver/default-connection-provider.js\"), exports);\n__exportStar(require(\"./driver/single-connection-provider.js\"), exports);\n__exportStar(require(\"./driver/dummy-driver.js\"), exports);\n__exportStar(require(\"./dialect/dialect.js\"), exports);\n__exportStar(require(\"./dialect/dialect-adapter.js\"), exports);\n__exportStar(require(\"./dialect/dialect-adapter-base.js\"), exports);\n__exportStar(require(\"./dialect/database-introspector.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-dialect.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-dialect-config.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-driver.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-query-compiler.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-introspector.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-adapter.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-dialect.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-dialect-config.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-driver.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-query-compiler.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-introspector.js\"), exports);\n__exportStar(require(\"./dialect/mysql/mysql-adapter.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-driver.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-dialect-config.js\"), exports);\n__exportStar(require(\"./dialect/postgres/postgres-dialect.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-query-compiler.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-introspector.js\"), exports);\n__exportStar(require(\"./dialect/sqlite/sqlite-adapter.js\"), exports);\n__exportStar(require(\"./query-compiler/default-query-compiler.js\"), exports);\n__exportStar(require(\"./query-compiler/query-compiler.js\"), exports);\n__exportStar(require(\"./migration/migrator.js\"), exports);\n__exportStar(require(\"./migration/file-migration-provider.js\"), exports);\n__exportStar(require(\"./plugin/kysely-plugin.js\"), exports);\n__exportStar(require(\"./plugin/camel-case/camel-case-plugin.js\"), exports);\n__exportStar(require(\"./plugin/deduplicate-joins/deduplicate-joins-plugin.js\"), exports);\n__exportStar(require(\"./plugin/with-schema/with-schema-plugin.js\"), exports);\n__exportStar(require(\"./plugin/parse-json-results/parse-json-results-plugin.js\"), exports);\n__exportStar(require(\"./operation-node/add-column-node.js\"), exports);\n__exportStar(require(\"./operation-node/add-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/alias-node.js\"), exports);\n__exportStar(require(\"./operation-node/alter-column-node.js\"), exports);\n__exportStar(require(\"./operation-node/alter-table-node.js\"), exports);\n__exportStar(require(\"./operation-node/and-node.js\"), exports);\n__exportStar(require(\"./operation-node/case-node.js\"), exports);\n__exportStar(require(\"./operation-node/check-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/column-definition-node.js\"), exports);\n__exportStar(require(\"./operation-node/column-node.js\"), exports);\n__exportStar(require(\"./operation-node/column-update-node.js\"), exports);\n__exportStar(require(\"./operation-node/common-table-expression-node.js\"), exports);\n__exportStar(require(\"./operation-node/common-table-expression-name-node.js\"), exports);\n__exportStar(require(\"./operation-node/constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/create-index-node.js\"), exports);\n__exportStar(require(\"./operation-node/create-schema-node.js\"), exports);\n__exportStar(require(\"./operation-node/create-table-node.js\"), exports);\n__exportStar(require(\"./operation-node/create-type-node.js\"), exports);\n__exportStar(require(\"./operation-node/create-view-node.js\"), exports);\n__exportStar(require(\"./operation-node/data-type-node.js\"), exports);\n__exportStar(require(\"./operation-node/default-value-node.js\"), exports);\n__exportStar(require(\"./operation-node/delete-query-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-column-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-index-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-schema-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-table-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-type-node.js\"), exports);\n__exportStar(require(\"./operation-node/drop-view-node.js\"), exports);\n__exportStar(require(\"./operation-node/foreign-key-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/from-node.js\"), exports);\n__exportStar(require(\"./operation-node/generated-node.js\"), exports);\n__exportStar(require(\"./operation-node/group-by-item-node.js\"), exports);\n__exportStar(require(\"./operation-node/group-by-node.js\"), exports);\n__exportStar(require(\"./operation-node/having-node.js\"), exports);\n__exportStar(require(\"./operation-node/identifier-node.js\"), exports);\n__exportStar(require(\"./operation-node/insert-query-node.js\"), exports);\n__exportStar(require(\"./operation-node/join-node.js\"), exports);\n__exportStar(require(\"./operation-node/limit-node.js\"), exports);\n__exportStar(require(\"./operation-node/list-node.js\"), exports);\n__exportStar(require(\"./operation-node/modify-column-node.js\"), exports);\n__exportStar(require(\"./operation-node/offset-node.js\"), exports);\n__exportStar(require(\"./operation-node/on-conflict-node.js\"), exports);\n__exportStar(require(\"./operation-node/on-duplicate-key-node.js\"), exports);\n__exportStar(require(\"./operation-node/on-node.js\"), exports);\n__exportStar(require(\"./operation-node/operation-node-source.js\"), exports);\n__exportStar(require(\"./operation-node/operation-node-transformer.js\"), exports);\n__exportStar(require(\"./operation-node/operation-node-visitor.js\"), exports);\n__exportStar(require(\"./operation-node/operation-node.js\"), exports);\n__exportStar(require(\"./operation-node/operator-node.js\"), exports);\n__exportStar(require(\"./operation-node/or-node.js\"), exports);\n__exportStar(require(\"./operation-node/order-by-item-node.js\"), exports);\n__exportStar(require(\"./operation-node/order-by-node.js\"), exports);\n__exportStar(require(\"./operation-node/parens-node.js\"), exports);\n__exportStar(require(\"./operation-node/primary-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/primitive-value-list-node.js\"), exports);\n__exportStar(require(\"./operation-node/query-node.js\"), exports);\n__exportStar(require(\"./operation-node/raw-node.js\"), exports);\n__exportStar(require(\"./operation-node/reference-node.js\"), exports);\n__exportStar(require(\"./operation-node/references-node.js\"), exports);\n__exportStar(require(\"./operation-node/rename-column-node.js\"), exports);\n__exportStar(require(\"./operation-node/returning-node.js\"), exports);\n__exportStar(require(\"./operation-node/select-all-node.js\"), exports);\n__exportStar(require(\"./operation-node/select-query-node.js\"), exports);\n__exportStar(require(\"./operation-node/select-query-node.js\"), exports);\n__exportStar(require(\"./operation-node/selection-node.js\"), exports);\n__exportStar(require(\"./operation-node/table-node.js\"), exports);\n__exportStar(require(\"./operation-node/unique-constraint-node.js\"), exports);\n__exportStar(require(\"./operation-node/update-query-node.js\"), exports);\n__exportStar(require(\"./operation-node/value-list-node.js\"), exports);\n__exportStar(require(\"./operation-node/value-node.js\"), exports);\n__exportStar(require(\"./operation-node/values-node.js\"), exports);\n__exportStar(require(\"./operation-node/when-node.js\"), exports);\n__exportStar(require(\"./operation-node/where-node.js\"), exports);\n__exportStar(require(\"./operation-node/with-node.js\"), exports);\n__exportStar(require(\"./operation-node/explain-node.js\"), exports);\n__exportStar(require(\"./operation-node/default-insert-value-node.js\"), exports);\n__exportStar(require(\"./operation-node/aggregate-function-node.js\"), exports);\n__exportStar(require(\"./operation-node/over-node.js\"), exports);\n__exportStar(require(\"./operation-node/partition-by-node.js\"), exports);\n__exportStar(require(\"./operation-node/partition-by-item-node.js\"), exports);\n__exportStar(require(\"./operation-node/set-operation-node.js\"), exports);\n__exportStar(require(\"./operation-node/binary-operation-node.js\"), exports);\n__exportStar(require(\"./operation-node/unary-operation-node.js\"), exports);\n__exportStar(require(\"./operation-node/using-node.js\"), exports);\n__exportStar(require(\"./operation-node/json-reference-node.js\"), exports);\n__exportStar(require(\"./operation-node/json-path-leg-node.js\"), exports);\n__exportStar(require(\"./operation-node/json-path-node.js\"), exports);\n__exportStar(require(\"./operation-node/json-operator-chain-node.js\"), exports);\n__exportStar(require(\"./operation-node/tuple-node.js\"), exports);\n__exportStar(require(\"./util/column-type.js\"), exports);\n__exportStar(require(\"./util/compilable.js\"), exports);\n__exportStar(require(\"./util/explainable.js\"), exports);\n__exportStar(require(\"./util/streamable.js\"), exports);\n__exportStar(require(\"./util/log.js\"), exports);\n__exportStar(require(\"./util/infer-result.js\"), exports);\nvar log_once_js_1 = require(\"./util/log-once.js\");\nObject.defineProperty(exports, \"logOnce\", { enumerable: true, get: function () { return log_once_js_1.logOnce; } });\n", "\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _D1Dialect_config, _D1Driver_config, _D1Connection_config;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.D1Dialect = void 0;\nconst kysely_1 = require(\"kysely\");\n/**\n * D1 dialect that adds support for [Cloudflare D1][0] in [Kysely][1].\n * The constructor takes the instance of your D1 database that you bound in `wrangler.toml`.\n *\n * ```typescript\n * new D1Dialect({\n *   database: env.DB,\n * })\n * ```\n *\n * [0]: https://blog.cloudflare.com/introducing-d1/\n * [1]: https://github.com/koskimas/kysely\n */\nclass D1Dialect {\n    constructor(config) {\n        _D1Dialect_config.set(this, void 0);\n        __classPrivateFieldSet(this, _D1Dialect_config, config, \"f\");\n    }\n    createAdapter() {\n        return new kysely_1.SqliteAdapter();\n    }\n    createDriver() {\n        return new D1Driver(__classPrivateFieldGet(this, _D1Dialect_config, \"f\"));\n    }\n    createQueryCompiler() {\n        return new kysely_1.SqliteQueryCompiler();\n    }\n    createIntrospector(db) {\n        return new kysely_1.SqliteIntrospector(db);\n    }\n}\nexports.D1Dialect = D1Dialect;\n_D1Dialect_config = new WeakMap();\nclass D1Driver {\n    constructor(config) {\n        _D1Driver_config.set(this, void 0);\n        __classPrivateFieldSet(this, _D1Driver_config, config, \"f\");\n    }\n    async init() { }\n    async acquireConnection() {\n        return new D1Connection(__classPrivateFieldGet(this, _D1Driver_config, \"f\"));\n    }\n    async beginTransaction(conn) {\n        return await conn.beginTransaction();\n    }\n    async commitTransaction(conn) {\n        return await conn.commitTransaction();\n    }\n    async rollbackTransaction(conn) {\n        return await conn.rollbackTransaction();\n    }\n    async releaseConnection(_conn) { }\n    async destroy() { }\n}\n_D1Driver_config = new WeakMap();\nclass D1Connection {\n    //   #transactionClient?: D1Connection\n    constructor(config) {\n        _D1Connection_config.set(this, void 0);\n        __classPrivateFieldSet(this, _D1Connection_config, config, \"f\");\n    }\n    async executeQuery(compiledQuery) {\n        // Transactions are not supported yet.\n        // if (this.#transactionClient) return this.#transactionClient.executeQuery(compiledQuery)\n        const results = await __classPrivateFieldGet(this, _D1Connection_config, \"f\").database\n            .prepare(compiledQuery.sql)\n            .bind(...compiledQuery.parameters)\n            .all();\n        if (results.error) {\n            throw new Error(results.error);\n        }\n        const numAffectedRows = results.meta.changes > 0 ? BigInt(results.meta.changes) : undefined;\n        return {\n            insertId: results.meta.last_row_id === undefined || results.meta.last_row_id === null\n                ? undefined\n                : BigInt(results.meta.last_row_id),\n            rows: results?.results || [],\n            numAffectedRows,\n            // @ts-ignore deprecated in kysely >= 0.23, keep for backward compatibility.\n            numUpdatedOrDeletedRows: numAffectedRows,\n        };\n    }\n    async beginTransaction() {\n        // this.#transactionClient = this.#transactionClient ?? new PlanetScaleConnection(this.#config)\n        // this.#transactionClient.#conn.execute('BEGIN')\n        throw new Error('Transactions are not supported yet.');\n    }\n    async commitTransaction() {\n        // if (!this.#transactionClient) throw new Error('No transaction to commit')\n        // this.#transactionClient.#conn.execute('COMMIT')\n        // this.#transactionClient = undefined\n        throw new Error('Transactions are not supported yet.');\n    }\n    async rollbackTransaction() {\n        // if (!this.#transactionClient) throw new Error('No transaction to rollback')\n        // this.#transactionClient.#conn.execute('ROLLBACK')\n        // this.#transactionClient = undefined\n        throw new Error('Transactions are not supported yet.');\n    }\n    async *streamQuery(_compiledQuery, _chunkSize) {\n        throw new Error('D1 Driver does not support streaming');\n    }\n}\n_D1Connection_config = new WeakMap();\n", "/**\n * Welcome to Cloudflare Workers! This is your first worker.\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\nexport interface Env {\n  // Example binding to KV. Learn more at https://developers.cloudflare.com/workers/runtime-apis/kv/\n  // MY_KV_NAMESPACE: KVNamespace;\n  //\n  // Example binding to Durable Object. Learn more at https://developers.cloudflare.com/workers/runtime-apis/durable-objects/\n  // MY_DURABLE_OBJECT: DurableObjectNamespace;\n  //\n  // Example binding to R2. Learn more at https://developers.cloudflare.com/workers/runtime-apis/r2/\n  // MY_BUCKET: R2Bucket;\n  //\n  // Example binding to a Service. Learn more at https://developers.cloudflare.com/workers/runtime-apis/service-bindings/\n  // MY_SERVICE: Fetcher;\n  //\n  // Example binding to a Queue. Learn more at https://developers.cloudflare.com/queues/javascript-apis/\n  // MY_QUEUE: Queue;\n}\n\nimport { XMLParser } from \"fast-xml-parser\";\nimport { Kysely, Generated } from 'kysely';\nimport { D1Dialect } from 'kysely-d1';\n\nexport interface Env {\n  DB: D1Database;\n}\n\ninterface EpisodesTable {\n  id: Generated<number>,\n  title: string,\n  link: string,\n  pubDate: string,\n  createdAt: Generated<number>,\n}\n\ninterface ShownotesTable {\n  id: Generated<number>,\n  episodeId: number,\n  title: string,\n  link: string,\n  createdAt: Generated<number>,\n}\n\ninterface Database {\n  episodes: EpisodesTable,\n  shownotes: ShownotesTable,\n}\n\nconst alwaysArray = ['ul', 'ul.li'];\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const response = await (await fetch('https://ossan.fm/feed.xml')).text();\n    const options = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '__',\n      textNodeName: '$text',\n      isArray: (name, jpath, isLeafNode, isAttribute) => {\n        return alwaysArray.indexOf(jpath) !== -1 ? true : false\n      }\n    }\n\n    const parser = new XMLParser(options);\n    const feedObj = parser.parse(response);\n\n    const db = new Kysely<Database>({ dialect: new D1Dialect({ database: env.DB }) });\n\n    for (const elm of feedObj.rss.channel.item) {\n      const descObj = parser.parse(elm.description);\n\n      const pubDate = new Date(elm.pubDate);\n\n      const selectResult = await db\n        .selectFrom('episodes')\n        .select(({ fn, val, ref }) => [\n          fn.count<string>('episodes.title').as('title_count')\n        ])\n        .where('title', '=', elm.title)\n        .where('pubDate', '=', pubDate.toISOString())\n        .executeTakeFirstOrThrow();\n\n      if (parseInt(selectResult.title_count) > 0) {\n        continue;\n      }\n\n      const insertResult = await db\n        .insertInto('episodes')\n        .values({\n          title: elm.title,\n          link: elm.link,\n          pubDate: pubDate.toISOString(),\n        })\n        .returning(['id'])\n        .executeTakeFirstOrThrow();\n\n      for (const ulElm of descObj.ul) {\n        for (const liElm of ulElm.li) {\n          if (liElm.a) {\n            if (liElm.a.$text === undefined) {\n              console.log(\"========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B \" + elm.title + \" \" + JSON.stringify(liElm));\n              continue;\n            }\n            await db\n              .insertInto('shownotes')\n              .values({\n                episodeId: insertResult.id,\n                title: liElm.a.$text,\n                link: liElm.a.__href,\n              })\n              .executeTakeFirstOrThrow();\n          } else {\n            if (typeof (liElm) === 'object') {\n              console.log(\"========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B \" + elm.title + \" \" + JSON.stringify(liElm));\n              continue;\n            }\n          }\n        }\n      }\n    }\n    return new Response(\"OK\");\n  },\n};\n\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 244. \u3084\u3063\u3066\u3044\u3066\u697D\u3057\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u304F\uFF08\u30B2\u30B9\u30C8:\u30BB\u30B3\u30F3\u3055\u3093\uFF09 {\"ul\":{\"li\":{\"a\":{\"$text\":\"\u30B5\u30A4\u30CA\u30B9\u30FB\u30EA\u30F3\u30B9 \u30AD\u30C3\u30C860\u5305 - \u9F3B\u6D17\u6D44\u306A\u3089\u30CB\u30FC\u30EB\u30E1\u30C3\u30C9\",\"__href\":\"https://www.neilmed.jp/product/sinusrinse_k_60/\"}}}}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 233. \u6642\u9593\u306E\u4F7F\u3044\u65B9 {\"table\":{\"tbody\":{\"tr\":{\"td\":[\"[#15 \u7DE0\u3081\u5207\u308A\u99C6\u52D5\u3067\u672C\u3092\u8AAD\u3093\u3067\u3044\u308B\u8A71 - \u3086\u308B\u30C6\u30AF\",\"Podcast on Spotify](https://open.spotify.com/episode/0ZFheltV1B5r2PNZVDeZw8)\"]}}}}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 64. \u66F8\u985E\u304C\u82E6\u624B {\"a\":[{\"$text\":\"\u3053\u3061\u3089\",\"__href\":\"https://twitter.com/ossanfm/status/1208676989478957056\"},{\"$text\":\"\u3053\u3061\u3089\",\"__href\":\"https://www.youtube.com/watch?v=2o3GLKynRcU\"}],\"$text\":\"17:43 \u300C\u5E74\u672B\u7279\u5225\u516C\u958B\u9332\u97F3&\u5E74\u521D\u30B2\u30B9\u30C8\u56DE\u306E\u6848\u5185\u300D:\u3067\u3082\u544A\u77E5\u3057\u307E\u3057\u305F\u304C\u30012019/12/27 20:00\u301C\u516C\u958B\u9332\u97F3\u3057\u307E\u3059\u3002\u4F1A\u5834\u306F\u3002\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 50. \u90E8\u5C4B\u3068\u30D1\u30BD\u30B3\u30F3\u901A\u4FE1\u3068\u79C1 {\"a\":[{\"$text\":\"Twitter\u306E#ossanfm\",\"__href\":\"https://twitter.com/search?q=%23ossanfm&src=typed_query&f=live\"},{\"$text\":\"\u304A\u305F\u3088\u308A\u30D5\u30A9\u30FC\u30E0\",\"__href\":\"https://forms.gle/LU6iX1XoprZPpLFx7\"}],\"$text\":\"01:00:28 \u300C\u30EA\u30B9\u30CA\u30FC\u304B\u3089\u306E\u304A\u305F\u3088\u308A\u300D:\u3078\u306E\u6295\u7A3F\u3084\uD83D\uDCEE\u304B\u3089\u306E \u6295\u7A3F\u3092\u3054\u7D39\u4ECB\u3002\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 49. \u3053\u3053\u306B\u3042\u3063\u305F\u306F\u305A\u306A\u306E\u306B... {\"a\":[{\"$text\":\"Twitter\u306E#ossanfm\",\"__href\":\"https://twitter.com/search?q=%23ossanfm&src=typed_query&f=live\"},{\"$text\":\"\u304A\u305F\u3088\u308A\u30D5\u30A9\u30FC\u30E0\",\"__href\":\"https://forms.gle/LU6iX1XoprZPpLFx7\"}],\"$text\":\"00:00 \u300C\u30AA\u30FC\u30D7\u30CB\u30F3\u30B0\u30C8\u30FC\u30AF\u300D:\u3078\u306E\u6295\u7A3F\u3084\uD83D\uDCEE\u304B\u3089\u306E\u6295\u7A3F \u3092\u3054\u7D39\u4ECB\u3002\u8A71\u984C\u306ENetflix\u306B\u3064\u3044\u3066\u306E\u611F\u60F3\u306A\u3069\u3002\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 15. \u6700\u5F8C\u306B\u3057\u3066\u6700\u521D\u306E... {\"a\":[{\"$text\":\"\u6700\u5F8C\u306B\u3057\u3066\u6700\u521D\u306E\u30A2\u30A4\u30C9\u30EB - Amazon\",\"__href\":\"https://www.amazon.co.jp/dp/B0798S7N12/\"},{\"$text\":\"\u77ED\u7DE8\u7248\",\"__href\":\"https://www.amazon.co.jp/dp/B01NCA4FBB\"}],\"$text\":\"/\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 11. \u30DE\u30A4\u30AF\u304C\u6765\u305F\u308A\u3066\u6CE1\u3092\u98F2\u3080 {\"a\":[{\"$text\":\"Ultravoice XM8500\",\"__href\":\"https://www.soundhouse.co.jp/products/detail/item/19370/\"},{\"$text\":\"UMC202HD\",\"__href\":\"https://www.soundhouse.co.jp/products/detail/item/212161/\"}],\"ul\":{\"li\":{\"a\":[{\"$text\":\"PreSonus Studio One Prime\",\"__href\":\"https://www.mi7.co.jp/products/presonus/studioone/prime/\"},{\"$text\":\"Auphonic\",\"__href\":\"https://auphonic.com/\"}],\"$text\":\"\u9332\u97F3\u306F\u3067\u3057\u3066\u3001\u3042\u3068\u306F\u306B\u5168\u3066\u3092\u59D4\u306D\u3066\u3044\u307E\u3059\u3002\"}},\"$text\":\"\u30DE\u30A4\u30AF\u3092x2\u672C\u306B\u3001\u30AA\u30FC\u30C7\u30A3\u30AAI/F\u3092\u306B\u3057\u307E\u3057\u305F\u3002\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 7. \u30DD\u30BB\u30A4\u30C9\u30F3\u30FB\u77F3\u5DDD\u3092\u5FDC\u63F4\u3057\u3088\u3046 {\"ul\":{\"li\":[{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3 - Wikipedia\",\"__href\":\"https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%95%E3%82%A7%E3%82%A4%E3%83%B3\"}},{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3\u4E2D\u6BD2 - Wikipedia\",\"__href\":\"https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%95%E3%82%A7%E3%82%A4%E3%83%B3%E4%B8%AD%E6%AF%92\"}},{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3\u4F9D\u5B58\u75C7\u3000\u524D\u7DE8\",\"__href\":\"http://mimorimisa.com/%E5%AE%9F%E4%BD%93%E9%A8%93/20181020/763/\"}}]},\"$text\":\"\u7981\u30AB\u30D5\u30A7\u30A4\u30F3\"}\n// ========================== TODO: \u3053\u308C\u3092\u6368\u3066\u3066\u308B 5. \u7981\u30AB\u30D5\u30A7\u30A4\u30F3\u3092\u304A\u8A66\u3057\u4E2D {\"ul\":{\"li\":[{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3 - Wikipedia\",\"__href\":\"https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%95%E3%82%A7%E3%82%A4%E3%83%B3\"}},{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3\u4E2D\u6BD2 - Wikipedia\",\"__href\":\"https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%95%E3%82%A7%E3%82%A4%E3%83%B3%E4%B8%AD%E6%AF%92\"}},{\"a\":{\"$text\":\"\u30AB\u30D5\u30A7\u30A4\u30F3\u4F9D\u5B58\u75C7\u3000\u524D\u7DE8\",\"__href\":\"http://mimorimisa.com/%E5%AE%9F%E4%BD%93%E9%A8%93/20181020/763/\"}}]},\"$text\":\"\u7981\u30AB\u30D5\u30A7\u30A4\u30F3\"}\n", "/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject, isUndefined } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { TRANSACTION_ISOLATION_LEVELS, } from './driver/driver.js';\nimport { preventAwait } from './util/prevent-await.js';\nimport { createFunctionModule, } from './query-builder/function-module.js';\nimport { Log } from './util/log.js';\nimport { createQueryId } from './util/query-id.js';\nimport { isCompilable } from './util/compilable.js';\nimport { CaseBuilder } from './query-builder/case-builder.js';\nimport { CaseNode } from './operation-node/case-node.js';\nimport { parseExpression } from './parser/expression-parser.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains it's own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has tables `person` and `pet`:\n *\n * ```ts\n * import {\u00A0Kysely, Generated, PostgresDialect } from 'kysely'\n *\n * interface PersonTable {\n *   id: Generated<number>\n *   first_name: string\n *   last_name: string\n * }\n *\n * interface PetTable {\n *   id: Generated<number>\n *   owner_id: number\n *   name: string\n *   species: 'cat' | 'dog'\n * }\n *\n * interface Database {\n *   person: PersonTable,\n *   pet: PetTable\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     host: 'localhost',\n *     database: 'kysely_test',\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new CaseBuilder({\n            node: CaseNode.create(isUndefined(value) ? undefined : parseExpression(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write type safe function\n     * calls.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return createFunctionModule();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws, the transaction is rolled back. Otherwise\n     * the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an error is thrown inside\n     * the callback passed to the `execute` method, the transaction is rolled back.\n     * Otherwise it's committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * @example\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/koskimas/kysely/blob/master/site/docs/recipes/splitting-build-compile-and-execute-code.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, queryId = createQueryId()) {\n        const compiledQuery = isCompilable(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery, queryId);\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\npreventAwait(ConnectionBuilder, \"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method\");\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                await this.#props.driver.rollbackTransaction(connection);\n                throw error;\n            }\n        });\n    }\n}\npreventAwait(TransactionBuilder, \"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method\");\nfunction validateTransactionSettings(settings) {\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n", "/// <reference types=\"./schema.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { CreateIndexNode } from '../operation-node/create-index-node.js';\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { AlterTableBuilder } from './alter-table-builder.js';\nimport { CreateIndexBuilder } from './create-index-builder.js';\nimport { CreateSchemaBuilder } from './create-schema-builder.js';\nimport { CreateTableBuilder } from './create-table-builder.js';\nimport { DropIndexBuilder } from './drop-index-builder.js';\nimport { DropSchemaBuilder } from './drop-schema-builder.js';\nimport { DropTableBuilder } from './drop-table-builder.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { CreateViewBuilder } from './create-view-builder.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { DropViewBuilder } from './drop-view-builder.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nimport { CreateTypeBuilder } from './create-type-builder.js';\nimport { DropTypeBuilder } from './drop-type-builder.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { parseSchemableIdentifier } from '../parser/identifier-parser.js';\n/**\n * Provides methods for building database schema.\n */\nexport class SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new CreateTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new DropTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new CreateIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new DropIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new CreateSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new DropSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name', (ac) => ac.setDataType('text'))\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new AlterTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: AlterTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new CreateViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new DropViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * Create a new type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createType('species')\n     *   .asEnum(['dog', 'cat', 'frog'])\n     *   .execute()\n     * ```\n     */\n    createType(typeName) {\n        return new CreateTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Drop a type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropType('species')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropType(typeName) {\n        return new DropTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Returns a copy of this schema module with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SchemaModule(this.#executor.withPlugin(plugin));\n    }\n    /**\n     * Returns a copy of this schema module  without any plugins.\n     */\n    withoutPlugins() {\n        return new SchemaModule(this.#executor.withoutPlugins());\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n    }\n}\n", "/// <reference types=\"./alter-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AlterTableNode = freeze({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'AlterTableNode',\n            table,\n        });\n    },\n    cloneWithTableProps(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumnAlteration(node, columnAlteration) {\n        return freeze({\n            ...node,\n            columnAlterations: node.columnAlterations\n                ? [...node.columnAlterations, columnAlteration]\n                : [columnAlteration],\n        });\n    },\n});\n", "/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    return (isObject(obj) &&\n        !Array.isArray(obj) &&\n        !isDate(obj) &&\n        !isBuffer(obj) &&\n        !isArrayBufferOrView(obj));\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (Array.isArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n", "/// <reference types=\"./create-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateIndexNode = freeze({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n", "/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n", "/// <reference types=\"./create-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'CreateSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return freeze({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? freeze([...createTable.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? freeze([...createTable.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropIndexNode = freeze({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return freeze({\n            kind: 'DropIndexNode',\n            name: SchemableIdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return freeze({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./schemable-identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const SchemableIdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            schema: IdentifierNode.create(schema),\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n});\n", "/// <reference types=\"./drop-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'DropSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return freeze({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTableNode = freeze({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return freeze({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return freeze({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n", "/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n", "/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n", "/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n", "/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n", "/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, parseValueExpressionOrList, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { parseSelectArg, } from '../parser/select-parser.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        selectNoFrom(selection) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(), parseSelectArg(selection)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpressionOrList(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        // @deprecated\n        cmpr(lhs, op, rhs) {\n            return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n        },\n        // @deprecated\n        bxp(lhs, op, rhs) {\n            return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n", "/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { SelectModifierNode } from '../operation-node/select-modifier-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { parseSetOperations, } from '../parser/set-operation-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForUpdate')),\n        });\n    }\n    forShare() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForShare')),\n        });\n    }\n    forKeyShare() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForKeyShare')),\n        });\n    }\n    forNoKeyUpdate() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForNoKeyUpdate')),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    innerJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralInnerJoin', args)),\n        });\n    }\n    leftJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralLeftJoin', args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(limit)),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(offset)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(SelectQueryBuilderImpl, \"don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\nexport function createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\npreventAwait(AliasedSelectQueryBuilderImpl, \"don't await AliasedSelectQueryBuilder instances directly. AliasedSelectQueryBuilder should never be executed directly since it's always a part of another query.\");\n", "/// <reference types=\"./select-modifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectModifierNode = freeze({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            modifier,\n        });\n    },\n    createWithExpression(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n", "/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseTableExpression, } from './table-parser.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\n", "/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : OnNode.create(operation),\n        });\n    },\n});\n", "/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return freeze({\n            ...onNode,\n            on: operator === 'And'\n                ? AndNode.create(onNode.on, operation)\n                : OrNode.create(onNode.on, operation),\n        });\n    },\n});\n", "/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return ValueNode.createImmediate(combinator === 'and');\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n", "/// <reference types=\"./binary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const BinaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return freeze({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n", "/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze, isString } from '../util/object-utils.js';\nexport const COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '&&',\n    '?',\n    '?&',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n];\nexport const ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexport const JSON_OPERATORS = ['->', '->>'];\nexport const BINARY_OPERATORS = [\n    ...COMPARISON_OPERATORS,\n    ...ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexport const UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexport const UNARY_OPERATORS = ['not', '-', ...UNARY_FILTER_OPERATORS];\nexport const OPERATORS = [\n    ...BINARY_OPERATORS,\n    ...JSON_OPERATORS,\n    ...UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nexport function isOperator(op) {\n    return isString(op) && OPERATORS.includes(op);\n}\nexport function isBinaryOperator(op) {\n    return isString(op) && BINARY_OPERATORS.includes(op);\n}\nexport function isComparisonOperator(op) {\n    return isString(op) && COMPARISON_OPERATORS.includes(op);\n}\nexport function isArithmeticOperator(op) {\n    return isString(op) && ARITHMETIC_OPERATORS.includes(op);\n}\nexport function isJSONOperator(op) {\n    return isString(op) && JSON_OPERATORS.includes(op);\n}\n", "/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./reference-node.d.ts\" />\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column: SelectAllNode.create(),\n        });\n    },\n});\n", "/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n", "/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder } from '../dynamic/dynamic-reference-builder.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { isExpressionOrFactory, parseExpression } from './expression-parser.js';\nimport { parseStringReference } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(ref, direction) {\n    const parsedRef = parseOrderByExpression(ref);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (direction) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return OrderByItemNode.create(parsedRef, parseOrderByDirectionExpression(direction));\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        if (!isOrderByDirection(direction)) {\n            throw new Error(`Invalid order by direction: ${direction}`);\n        }\n        return OrderByItemNode.create(parseStringReference(ref), parseOrderByDirectionExpression(direction));\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByDirectionExpression(expr) {\n    if (!expr) {\n        return undefined;\n    }\n    if (expr === 'asc' || expr === 'desc') {\n        return RawNode.createWithSql(expr);\n    }\n    return expr.toOperationNode();\n}\n", "/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n", "/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n});\n", "/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            parameters: freeze(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n", "/// <reference types=\"./json-reference-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return freeze({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return freeze({\n            ...node,\n            traversal,\n        });\n    },\n});\n", "/// <reference types=\"./json-operator-chain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONOperatorChainNode = freeze({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: freeze([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return freeze({\n            ...node,\n            values: freeze([...node.values, value]),\n        });\n    },\n});\n", "/// <reference types=\"./json-path-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return freeze({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: freeze([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return freeze({\n            ...jsonPathNode,\n            pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n", "/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n", "/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n", "/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n", "/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n", "/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n", "/// <reference types=\"./over-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { PartitionByNode } from './partition-by-node.js';\n/**\n * @internal\n */\nexport const OverNode = freeze({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : PartitionByNode.create(items),\n        });\n    },\n});\n", "/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./partition-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'PartitionByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return freeze({\n            ...partitionBy,\n            items: freeze([...partitionBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return freeze({\n            ...select,\n            distinctOn: select.distinctOn\n                ? freeze([...select.distinctOn, ...expressions])\n                : freeze(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return freeze({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? freeze([...select.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(select, modifier) {\n        return freeze({\n            ...select,\n            endModifiers: select.endModifiers\n                ? freeze([...select.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithOrderByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            orderBy: selectNode.orderBy\n                ? OrderByNode.cloneWithItems(selectNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return freeze({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? freeze([...selectNode.setOperations, ...setOperations])\n                : freeze([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return freeze({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return freeze({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return freeze({\n            ...select,\n            offset: undefined,\n        });\n    },\n    cloneWithoutOrderBy(select) {\n        return freeze({\n            ...select,\n            orderBy: undefined,\n        });\n    },\n});\n", "/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n", "/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return freeze({\n            ...groupBy,\n            items: freeze([...groupBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return freeze({\n            ...havingNode,\n            having: operator === 'And'\n                ? AndNode.create(havingNode.having, operation)\n                : OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n", "/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\npreventAwait(JoinBuilder, \"don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "/// <reference types=\"./prevent-await.d.ts\" />\nexport function preventAwait(clazz, message) {\n    Object.defineProperties(clazz.prototype, {\n        then: {\n            enumerable: false,\n            value: () => {\n                throw new Error(message);\n            },\n        },\n    });\n}\n", "/// <reference types=\"./over-builder.d.ts\" />\nimport { OverNode } from '../operation-node/over-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parsePartitionBy, } from '../parser/partition-by-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds an order by clause item inside the over function.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.orderBy('first_name', 'asc').orderBy('last_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(order by \"first_name\" asc, \"last_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\npreventAwait(OverBuilder, \"don't await OverBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n", "/// <reference types=\"./partition-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByItemNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return freeze({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n", "/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpression, parseTableExpressionOrList, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirst()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a replace query.\n     *\n     * A MySQL-only statement similar to {@link InsertQueryBuilder.onDuplicateKeyUpdate}\n     * that deletes and inserts values on collision instead of updating existing rows.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    deleteFrom(tables) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    updateTable(table) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpression(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n", "/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateExpression, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseExpression, } from '../parser/expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    values(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method:\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.val(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"first_name\", $2 as \"last_name\" from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * This is only supported on some dialects like MySQL. On most dialects you should\n     * use the {@link onConflict} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values(values)\n     *   .execute()\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                ignore: true,\n            }),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (lower(name))\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto'')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * where \"excluded\".\"name\" != $4\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values(values)\n     *   .onDuplicateKeyUpdate({ species: 'hamster' })\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateExpression(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (qb) => qb\n     *     .insertInto('person')\n     *     .values(person)\n     *     .returning('id')\n     *     .$assertType<{ id: string }>()\n     *   )\n     *   .with('new_pet', (qb) => qb\n     *     .insertInto('pet')\n     *     .values((eb) => ({ owner_id: eb.selectFrom('new_person').select('id'), ...pet }))\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new InsertResult(result.insertId, \n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(InsertQueryBuilder, \"don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n", "/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n", "/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = rowColumns.length < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n", "/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./default-insert-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultInsertValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return freeze({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n", "/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\nimport { ExplainNode } from './explain-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (SelectQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            DeleteQueryNode.is(node));\n    },\n    cloneWithWhere(node, operation) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutWhere(node) {\n        return freeze({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return freeze({\n            ...node,\n            explain: ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n});\n", "/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(table, withNode) {\n        return freeze({\n            kind: 'UpdateQueryNode',\n            table,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return freeze({\n            ...updateQuery,\n            from: updateQuery.from\n                ? FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n});\n", "/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { UsingNode } from './using-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithOrderByItems(deleteNode, items) {\n        return freeze({\n            ...deleteNode,\n            orderBy: deleteNode.orderBy\n                ? OrderByNode.cloneWithItems(deleteNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithLimit(deleteNode, limit) {\n        return freeze({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return freeze({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? UsingNode.cloneWithTables(deleteNode.using, tables)\n                : UsingNode.create(tables),\n        });\n    },\n});\n", "/// <reference types=\"./using-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UsingNode = freeze({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return freeze({\n            kind: 'UsingNode',\n            tables: freeze(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return freeze({\n            ...using,\n            tables: freeze([...using.tables, ...tables]),\n        });\n    },\n});\n", "/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return freeze({\n            ...whereNode,\n            where: operator === 'And'\n                ? AndNode.create(whereNode.where, operation)\n                : OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n", "/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n", "/// <reference types=\"./explain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ExplainNode = freeze({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return freeze({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n", "/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nexport function parseUpdateExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n", "/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n", "/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n", "/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * const result = await db\n *   .insertInto('person')\n *   .values(person)\n *   .executeTakeFirst()\n *\n * console.log(result.insertId)\n * ```\n */\nexport class InsertResult {\n    /**\n     * The auto incrementing primary key\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\n", "/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexport function isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\n", "/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseUpdateExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doNothing()\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doUpdateSet({ first_name })\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet((eb) => ({\n     *       first_name: eb.ref('excluded.first_name'),\n     *       last_name: eb.ref('excluded.last_name')\n     *     }))\n     *   )\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateExpression(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\npreventAwait(OnConflictBuilder, \"don't await OnConflictBuilder instances.\");\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictDoNothingBuilder, \"don't await OnConflictDoNothingBuilder instances.\");\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictUpdateBuilder, \"don't await OnConflictUpdateBuilder instances.\");\n", "/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return freeze({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return freeze({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n", "/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nimport { DeleteQueryNode } from '../operation-node/delete-query-node.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Adds an `order by` clause to the query.\n     *\n     * `orderBy` calls are additive. To order by multiple columns, call `orderBy`\n     * multiple times.\n     *\n     * The first argument is the expression to order by and the second is the\n     * order (`asc` or `desc`).\n     *\n     * An `order by` clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * See {@link SelectQueryBuilder.orderBy} for more examples.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet`\n     * order by `created_at`\n     * limit ?\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(limit)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('deleted_person', (qb) => qb\n     *     .deleteFrom('person')\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('deleted_pet', (qb) => qb\n     *     .deleteFrom('pet')\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['deleted_person', 'deleted_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new DeleteResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(DeleteQueryBuilder, \"don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\n", "/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit: ValueNode.create(limit),\n        });\n    },\n});\n", "/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdateExpression, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from)),\n        });\n    }\n    innerJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    set(update) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdateExpression(update)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deletedAt: Date; nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new UpdateResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            // TODO: https://github.com/kysely-org/kysely/pull/431#discussion_r1172330899\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(UpdateQueryBuilder, \"don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    numUpdatedRows;\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\n", "/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n", "/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./cte-builder.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\npreventAwait(CTEBuilder, \"don't await CTEBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n", "/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n", "/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n", "/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n", "/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n});\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node) {\n        const transformed = super.transformSchemableIdentifier(node);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node) {\n        const transformed = super.transformReferences(node);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        const table = TableNode.is(node)\n            ? node\n            : AliasNode.is(node) && TableNode.is(node.node)\n                ? node.node\n                : null;\n        if (table) {\n            this.#collectSchemableId(table.table, schemableIds);\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n", "/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { requireAllProps } from '../util/require-all-props.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node),\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n * const tree = transformer.transformNode(tree)\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n    });\n    transformNode(node) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node);\n        this.nodeStack.pop();\n        return freeze(out);\n    }\n    transformNodeImpl(node) {\n        return this.#transformers[node.kind](node);\n    }\n    transformNodeList(list) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map((node) => this.transformNode(node)));\n    }\n    transformSelectQuery(node) {\n        return requireAllProps({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from),\n            selections: this.transformNodeList(node.selections),\n            distinctOn: this.transformNodeList(node.distinctOn),\n            joins: this.transformNodeList(node.joins),\n            groupBy: this.transformNode(node.groupBy),\n            orderBy: this.transformNode(node.orderBy),\n            where: this.transformNode(node.where),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            limit: this.transformNode(node.limit),\n            offset: this.transformNode(node.offset),\n            with: this.transformNode(node.with),\n            having: this.transformNode(node.having),\n            explain: this.transformNode(node.explain),\n            setOperations: this.transformNodeList(node.setOperations),\n        });\n    }\n    transformSelection(node) {\n        return requireAllProps({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection),\n        });\n    }\n    transformColumn(node) {\n        return requireAllProps({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAlias(node) {\n        return requireAllProps({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node),\n            alias: this.transformNode(node.alias),\n        });\n    }\n    transformTable(node) {\n        return requireAllProps({\n            kind: 'TableNode',\n            table: this.transformNode(node.table),\n        });\n    }\n    transformFrom(node) {\n        return requireAllProps({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms),\n        });\n    }\n    transformReference(node) {\n        return requireAllProps({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column),\n            table: this.transformNode(node.table),\n        });\n    }\n    transformAnd(node) {\n        return requireAllProps({\n            kind: 'AndNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformOr(node) {\n        return requireAllProps({\n            kind: 'OrNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformValueList(node) {\n        return requireAllProps({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformParens(node) {\n        return requireAllProps({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node),\n        });\n    }\n    transformJoin(node) {\n        return requireAllProps({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table),\n            on: this.transformNode(node.on),\n        });\n    }\n    transformRaw(node) {\n        return requireAllProps({\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters),\n        });\n    }\n    transformWhere(node) {\n        return requireAllProps({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where),\n        });\n    }\n    transformInsertQuery(node) {\n        return requireAllProps({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into),\n            columns: this.transformNodeList(node.columns),\n            values: this.transformNode(node.values),\n            returning: this.transformNode(node.returning),\n            onConflict: this.transformNode(node.onConflict),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey),\n            with: this.transformNode(node.with),\n            ignore: node.ignore,\n            replace: node.replace,\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformValues(node) {\n        return requireAllProps({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDeleteQuery(node) {\n        return requireAllProps({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from),\n            using: this.transformNode(node.using),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            orderBy: this.transformNode(node.orderBy),\n            limit: this.transformNode(node.limit),\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformReturning(node) {\n        return requireAllProps({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections),\n        });\n    }\n    transformCreateTable(node) {\n        return requireAllProps({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            constraints: this.transformNodeList(node.constraints),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n        });\n    }\n    transformColumnDefinition(node) {\n        return requireAllProps({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            references: this.transformNode(node.references),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo),\n            check: this.transformNode(node.check),\n            generated: this.transformNode(node.generated),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n        });\n    }\n    transformAddColumn(node) {\n        return requireAllProps({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformDropTable(node) {\n        return requireAllProps({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node) {\n        return requireAllProps({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformOrderByItem(node) {\n        return requireAllProps({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy),\n            direction: this.transformNode(node.direction),\n        });\n    }\n    transformGroupBy(node) {\n        return requireAllProps({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformGroupByItem(node) {\n        return requireAllProps({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy),\n        });\n    }\n    transformUpdateQuery(node) {\n        return requireAllProps({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table),\n            from: this.transformNode(node.from),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            updates: this.transformNodeList(node.updates),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            explain: this.transformNode(node.explain),\n        });\n    }\n    transformColumnUpdate(node) {\n        return requireAllProps({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column),\n            value: this.transformNode(node.value),\n        });\n    }\n    transformLimit(node) {\n        return requireAllProps({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit),\n        });\n    }\n    transformOffset(node) {\n        return requireAllProps({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset),\n        });\n    }\n    transformOnConflict(node) {\n        return requireAllProps({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns),\n            constraint: this.transformNode(node.constraint),\n            indexExpression: this.transformNode(node.indexExpression),\n            indexWhere: this.transformNode(node.indexWhere),\n            updates: this.transformNodeList(node.updates),\n            updateWhere: this.transformNode(node.updateWhere),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node) {\n        return requireAllProps({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates),\n        });\n    }\n    transformCreateIndex(node) {\n        return requireAllProps({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where),\n        });\n    }\n    transformList(node) {\n        return requireAllProps({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformDropIndex(node) {\n        return requireAllProps({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformUniqueConstraint(node) {\n        return requireAllProps({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformForeignKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            references: this.transformNode(node.references),\n            name: this.transformNode(node.name),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformSetOperation(node) {\n        return requireAllProps({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression),\n            all: node.all,\n        });\n    }\n    transformReferences(node) {\n        return requireAllProps({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node) {\n        return requireAllProps({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformWith(node) {\n        return requireAllProps({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformCommonTableExpressionName(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n        });\n    }\n    transformHaving(node) {\n        return requireAllProps({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having),\n        });\n    }\n    transformCreateSchema(node) {\n        return requireAllProps({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node) {\n        return requireAllProps({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node) {\n        return requireAllProps({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table),\n            renameTo: this.transformNode(node.renameTo),\n            setSchema: this.transformNode(node.setSchema),\n            columnAlterations: this.transformNodeList(node.columnAlterations),\n            addConstraint: this.transformNode(node.addConstraint),\n            dropConstraint: this.transformNode(node.dropConstraint),\n        });\n    }\n    transformDropColumn(node) {\n        return requireAllProps({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformRenameColumn(node) {\n        return requireAllProps({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column),\n            renameTo: this.transformNode(node.renameTo),\n        });\n    }\n    transformAlterColumn(node) {\n        return requireAllProps({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression),\n            setDefault: this.transformNode(node.setDefault),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node) {\n        return requireAllProps({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAddConstraint(node) {\n        return requireAllProps({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint),\n        });\n    }\n    transformDropConstraint(node) {\n        return requireAllProps({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformCreateView(node) {\n        return requireAllProps({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns),\n            as: this.transformNode(node.as),\n        });\n    }\n    transformDropView(node) {\n        return requireAllProps({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node) {\n        return requireAllProps({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformDefaultValue(node) {\n        return requireAllProps({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue),\n        });\n    }\n    transformOn(node) {\n        return requireAllProps({\n            kind: 'OnNode',\n            on: this.transformNode(node.on),\n        });\n    }\n    transformSelectModifier(node) {\n        return requireAllProps({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier),\n        });\n    }\n    transformCreateType(node) {\n        return requireAllProps({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name),\n            enum: this.transformNode(node.enum),\n        });\n    }\n    transformDropType(node) {\n        return requireAllProps({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node) {\n        return requireAllProps({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options),\n        });\n    }\n    transformSchemableIdentifier(node) {\n        return requireAllProps({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema),\n            identifier: this.transformNode(node.identifier),\n        });\n    }\n    transformAggregateFunction(node) {\n        return requireAllProps({\n            kind: 'AggregateFunctionNode',\n            aggregated: this.transformNodeList(node.aggregated),\n            distinct: node.distinct,\n            filter: this.transformNode(node.filter),\n            func: node.func,\n            over: this.transformNode(node.over),\n        });\n    }\n    transformOver(node) {\n        return requireAllProps({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy),\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformPartitionBy(node) {\n        return requireAllProps({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformPartitionByItem(node) {\n        return requireAllProps({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformBinaryOperation(node) {\n        return requireAllProps({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand),\n            operator: this.transformNode(node.operator),\n            rightOperand: this.transformNode(node.rightOperand),\n        });\n    }\n    transformUnaryOperation(node) {\n        return requireAllProps({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator),\n            operand: this.transformNode(node.operand),\n        });\n    }\n    transformUsing(node) {\n        return requireAllProps({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables),\n        });\n    }\n    transformFunction(node) {\n        return requireAllProps({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments),\n        });\n    }\n    transformCase(node) {\n        return requireAllProps({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value),\n            when: this.transformNodeList(node.when),\n            else: this.transformNode(node.else),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node) {\n        return requireAllProps({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition),\n            result: this.transformNode(node.result),\n        });\n    }\n    transformJSONReference(node) {\n        return requireAllProps({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference),\n            traversal: this.transformNode(node.traversal),\n        });\n    }\n    transformJSONPath(node) {\n        return requireAllProps({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator),\n            pathLegs: this.transformNodeList(node.pathLegs),\n        });\n    }\n    transformJSONPathLeg(node) {\n        return requireAllProps({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node) {\n        return requireAllProps({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator),\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformTuple(node) {\n        return requireAllProps({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDataType(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n", "/// <reference types=\"./require-all-props.d.ts\" />\n/**\n * Helper function to check listed properties according to given type. Check if all properties has been used when object is initialised.\n *\n * Example use:\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n *\n * // propB has to be mentioned even it is optional. It still should be initialized with undefined.\n * const a: SomeType = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n *\n * // checked type is implicit for variable.\n * const b = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n * ```\n *\n * Wrong use of this helper:\n *\n * 1. Omit checked type - all checked properties will be expect as of type never\n *\n * ```ts\n * const z: SomeType = requireAllProps({ propC: \"no type will work\" });\n * ```\n *\n * 2. Apply to spreaded object - there is no way how to check in compile time if spreaded object contains all properties\n *\n * ```ts\n * const y: SomeType = { propA: \"\" }; // valid object according to SomeType declaration\n * const x = requireAllProps<SomeType>( { ... y } );\n * ```\n *\n * @param obj object to check if all properties has been used\n * @returns untouched obj parameter is returned\n */\nexport function requireAllProps(obj) {\n    return obj;\n}\n", "/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n", "/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { Deferred } from '../util/deferred.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery, queryId) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            const transformedResult = await this.#transformResult(result, queryId);\n            // TODO: remove.\n            warnOfOutdatedDriverOrPlugins(result, transformedResult);\n            return transformedResult;\n        });\n    }\n    async *stream(compiledQuery, chunkSize, queryId) {\n        const connectionDefer = new Deferred();\n        const connectionReleaseDefer = new Deferred();\n        this.provideConnection(async (connection) => {\n            connectionDefer.resolve(connection);\n            // Lets wait until we don't need connection before returning here (returning releases connection)\n            return await connectionReleaseDefer.promise;\n        }).catch((ex) => connectionDefer.reject(ex));\n        const connection = await connectionDefer.promise;\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, queryId);\n            }\n        }\n        finally {\n            connectionReleaseDefer.resolve();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n// TODO: remove.\nfunction warnOfOutdatedDriverOrPlugins(result, transformedResult) {\n    const { numAffectedRows } = result;\n    if ((numAffectedRows === undefined &&\n        result.numUpdatedOrDeletedRows === undefined) ||\n        (numAffectedRows !== undefined &&\n            transformedResult.numAffectedRows !== undefined)) {\n        return;\n    }\n    logOnce('kysely:warning: outdated driver/plugin detected! QueryResult.numUpdatedOrDeletedRows is deprecated and will be removed in a future release.');\n}\n", "/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n", "/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n", "/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset: ValueNode.create(offset),\n        });\n    },\n});\n", "/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n", "/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n", "/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n", "/// <reference types=\"./set-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SetOperationNode = freeze({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return freeze({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n", "/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n", "/// <reference types=\"./function-module.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { FunctionNode } from '../operation-node/function-node.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { parseSelectAll } from '../parser/select-parser.js';\nimport { AggregateFunctionBuilder } from './aggregate-function-builder.js';\nexport function createFunctionModule() {\n    const fn = (name, args) => {\n        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args)));\n    };\n    const agg = (name, args) => {\n        return new AggregateFunctionBuilder({\n            aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(value, ...otherValues) {\n            return fn('coalesce', [value, ...otherValues]);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n    });\n}\n", "/// <reference types=\"./aggregate-function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const AggregateFunctionNode = freeze({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return freeze({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return freeze({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return freeze({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n", "/// <reference types=\"./function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FunctionNode = freeze({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return freeze({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n", "/// <reference types=\"./aggregate-function-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { createOverBuilder } from '../parser/parse-utils.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = createOverBuilder();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\npreventAwait(AggregateFunctionBuilder, \"don't await AggregateFunctionBuilder instances. They are never executed directly and are always just a part of a query.\");\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nexport class AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n", "/// <reference types=\"./unary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return freeze({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n", "/// <reference types=\"./case-builder.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { isSafeImmediateValue, parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nexport class CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n}\nexport class CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression)\n                ? parseSafeImmediateValue(valueExpression)\n                : parseValueExpression(valueExpression)),\n        });\n    }\n}\nexport class CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWith(this.#props.node, {\n                else: isSafeImmediateValue(valueExpression)\n                    ? parseSafeImmediateValue(valueExpression)\n                    : parseValueExpression(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexport class CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\n", "/// <reference types=\"./case-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const CaseNode = freeze({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return freeze({\n            ...caseNode,\n            when: freeze(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return freeze({\n            ...caseNode,\n            when: caseNode.when\n                ? freeze([\n                    ...caseNode.when.slice(0, -1),\n                    WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return freeze({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./when-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WhenNode = freeze({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return freeze({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return freeze({\n            ...whenNode,\n            result,\n        });\n    },\n});\n", "/// <reference types=\"./json-path-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathLegNode, } from '../operation-node/json-path-leg-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport class JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     * )\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal)\n            ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value))\n            : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));\n    }\n}\nexport class TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new JSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./json-path-leg-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathLegNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return freeze({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n", "/// <reference types=\"./tuple-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TupleNode = freeze({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'TupleNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-builder.d.ts\" />\nimport { AddColumnNode } from '../operation-node/add-column-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { DropColumnNode } from '../operation-node/drop-column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RenameColumnNode } from '../operation-node/rename-column-node.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder, } from './column-definition-builder.js';\nimport { ModifyColumnNode } from '../operation-node/modify-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { AlterColumnBuilder, } from './alter-column-builder.js';\nimport { AlterTableExecutor } from './alter-table-executor.js';\nimport { AlterTableAddForeignKeyConstraintBuilder } from './alter-table-add-foreign-key-constraint-builder.js';\nimport { AlterTableDropConstraintBuilder } from './alter-table-drop-constraint-builder.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\n/**\n * This builder can be used to create a `alter table` query.\n */\nexport class AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    renameTo(newTableName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameTo: parseTable(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                setSchema: IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addUniqueConstraint}\n     */\n    addUniqueConstraint(constraintName, columns) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(UniqueConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addCheckConstraint}\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addForeignKeyConstraint}\n     *\n     * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns\n     * the constraint builder and doesn't take a callback as the last argument. This\n     * is because you can only add one column per `ALTER TABLE` query.\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addPrimaryKeyConstraint}\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(PrimaryConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    dropConstraint(constraintName) {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * See {@link CreateTableBuilder.$call}\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexport class AlterTableColumnAlteringBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableBuilder, \"don't await AlterTableBuilder instances\");\npreventAwait(AlterColumnBuilder, \"don't await AlterColumnBuilder instances\");\npreventAwait(AlterTableColumnAlteringBuilder, \"don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./add-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./column-definition-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const ColumnDefinitionNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return freeze({\n            kind: 'ColumnDefinitionNode',\n            column: ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWithFrontModifier(node, modifier) {\n        return freeze({\n            ...node,\n            frontModifiers: node.frontModifiers\n                ? freeze([...node.frontModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./drop-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const DropColumnNode = freeze({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'DropColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./rename-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const RenameColumnNode = freeze({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return freeze({\n            kind: 'RenameColumnNode',\n            column: ColumnNode.create(column),\n            renameTo: ColumnNode.create(newColumn),\n        });\n    },\n});\n", "/// <reference types=\"./column-definition-builder.d.ts\" />\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ReferencesNode, } from '../operation-node/references-node.js';\nimport { SelectAllNode } from '../operation-node/select-all-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { GeneratedNode } from '../operation-node/generated-node.js';\nimport { DefaultValueNode } from '../operation-node/default-value-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nexport class ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `auto_increment` or `autoincrement` to the column definition\n     * depending on the dialect.\n     *\n     * Some dialects like PostgreSQL don't support this. On PostgreSQL\n     * you can use the `serial` or `bigserial` data type instead.\n     */\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    /**\n     * Makes the column the primary key.\n     *\n     * If you want to specify a composite primary key use the\n     * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.\n     */\n    primaryKey() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    /**\n     * Adds a foreign key constraint for the column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id')\n     * ```\n     */\n    references(ref) {\n        const references = parseStringReference(ref);\n        if (!references.table || SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    /**\n     * Adds an `on delete` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onDelete('cascade')\n     * ```\n     */\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete)),\n        }));\n    }\n    /**\n     * Adds an `on update` constraint for the foreign key column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onUpdate('cascade')\n     * ```\n     */\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate)),\n        }));\n    }\n    /**\n     * Adds a unique constraint for the column.\n     */\n    unique() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    /**\n     * Adds a `not null` constraint for the column.\n     */\n    notNull() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    /**\n     * Adds a `unsigned` modifier for the column.\n     *\n     * This only works on some dialects like MySQL.\n     */\n    unsigned() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    /**\n     * Adds a default value constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))\n     *   .execute()\n     * ```\n     *\n     * Values passed to `defaultTo` are interpreted as value literals by default. You can define\n     * an arbitrary SQL expression using the {@link sql} template tag:\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'number_of_legs',\n     *     'integer',\n     *     (col) => col.defaultTo(sql`any SQL here`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value)),\n        }));\n    }\n    /**\n     * Adds a check constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) =>\n     *     col.check(sql`number_of_legs < 5`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    check(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            check: CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Makes the column a generated column using a `generated always as` statement.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)',\n     *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Adds the `generated always as identity` specifier on supported dialects.\n     */\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    /**\n     * Adds the `generated by default as identity` specifier on supported dialects.\n     */\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    /**\n     * Makes a generated column stored instead of virtual. This method can only\n     * be used with {@link generatedAlwaysAs}\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)', (col) => col\n     *     .generatedAlwaysAs(\"concat(first_name, ' ', last_name)\")\n     *     .stored()\n     *   )\n     *   .execute()\n     * ```\n     */\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    /**\n     * This can be used to add any additional SQL right after the column's data type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(36)', col => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(36) collate utf8mb4_general_ci not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the column definition.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('age', 'integer', col => col.unsigned().notNull().modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`))\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'\n     * )\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ColumnDefinitionBuilder, \"don't await ColumnDefinitionBuilder instances directly.\");\n", "/// <reference types=\"./check-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CheckConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return freeze({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./references-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_MODIFY_FOREIGN_ACTIONS = [\n    'no action',\n    'restrict',\n    'cascade',\n    'set null',\n    'set default',\n];\n/**\n * @internal\n */\nexport const ReferencesNode = freeze({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return freeze({\n            kind: 'ReferencesNode',\n            table,\n            columns: freeze([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return freeze({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return freeze({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n", "/// <reference types=\"./default-value-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseDefaultValueExpression(value) {\n    return isOperationNodeSource(value)\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n", "/// <reference types=\"./generated-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GeneratedNode = freeze({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return freeze({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return freeze({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return freeze({\n            ...node,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./default-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return freeze({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n", "/// <reference types=\"./on-modify-action-parser.d.ts\" />\nimport { ON_MODIFY_FOREIGN_ACTIONS, } from '../operation-node/references-node.js';\nexport function parseOnModifyForeignAction(action) {\n    if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\n", "/// <reference types=\"./modify-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ModifyColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    return isOperationNodeSource(dataType)\n        ? dataType.toOperationNode()\n        : DataTypeNode.create(dataType);\n}\n", "/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\n", "/// <reference types=\"./foreign-key-constraint-builder.d.ts\" />\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete: parseOnModifyForeignAction(onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate: parseOnModifyForeignAction(onUpdate),\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ForeignKeyConstraintBuilder, \"don't await ForeignKeyConstraintBuilder instances directly.\");\n", "/// <reference types=\"./foreign-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\nimport { ReferencesNode } from './references-node.js';\n/**\n * @internal\n */\nexport const ForeignKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return freeze({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./add-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return freeze({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n", "/// <reference types=\"./unique-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const UniqueConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'UniqueConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./drop-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return freeze({\n            kind: 'DropConstraintNode',\n            constraintName: IdentifierNode.create(constraintName),\n        });\n    },\n    cloneWith(dropConstraint, props) {\n        return freeze({\n            ...dropConstraint,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./alter-column-builder.d.ts\" />\nimport { AlterColumnNode } from '../operation-node/alter-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nexport class AlterColumnBuilder {\n    #column;\n    constructor(column) {\n        this.#column = column;\n    }\n    setDataType(dataType) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dataType', parseDataTypeExpression(dataType)));\n    }\n    setDefault(value) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setDefault', parseDefaultValueExpression(value)));\n    }\n    dropDefault() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropDefault', true));\n    }\n    setNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setNotNull', true));\n    }\n    dropNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropNotNull', true));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\n/**\n * Allows us to force consumers to do exactly one alteration to a column.\n *\n * Basically, deny the following:\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac)\n * ```\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac.dropNotNull().setNotNull())\n * ```\n *\n * Which would now throw a compilation error, instead of a runtime error.\n */\nexport class AlteredColumnBuilder {\n    #alterColumnNode;\n    constructor(alterColumnNode) {\n        this.#alterColumnNode = alterColumnNode;\n    }\n    toOperationNode() {\n        return this.#alterColumnNode;\n    }\n}\n", "/// <reference types=\"./alter-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const AlterColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column, prop, value) {\n        return freeze({\n            kind: 'AlterColumnNode',\n            column: ColumnNode.create(column),\n            [prop]: value,\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-executor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableExecutor, \"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./alter-table-add-foreign-key-constraint-builder.d.ts\" />\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {\n            addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableAddForeignKeyConstraintBuilder, \"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./alter-table-drop-constraint-builder.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableDropConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    ifExists: true,\n                }),\n            }),\n        });\n    }\n    cascade() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'cascade',\n                }),\n            }),\n        });\n    }\n    restrict() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'restrict',\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableDropConstraintBuilder, \"don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./primary-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const PrimaryConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./create-index-builder.d.ts\" />\nimport { CreateIndexNode, } from '../operation-node/create-index-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { ImmediateValueTransformer } from '../plugin/immediate-value/immediate-value-transformer.js';\nexport class CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the index already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                parseOrderedColumnName(column),\n            ]),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName)),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(sql`first_name COLLATE \"fi_FI\"`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\" on \"person\" (first_name COLLATE \"fi_FI\")\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                expression.toOperationNode(),\n            ]),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                using: RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    where(...args) {\n        const transformer = new ImmediateValueTransformer();\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateIndexBuilder, \"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformValue(node) {\n        return {\n            ...super.transformValue(node),\n            immediate: true,\n        };\n    }\n}\n", "/// <reference types=\"./create-schema-builder.d.ts\" />\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateSchemaBuilder, \"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./create-table-builder.d.ts\" />\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { CreateTableNode, } from '../operation-node/create-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder } from './column-definition-builder.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseOnCommitAction } from '../parser/on-commit-action-parse.js';\n/**\n * This builder can be used to create a `create table` query.\n */\nexport class CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                onCommit: parseOnCommitAction(onCommit),\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   // You can specify any data type using the `sql` tag if the types\n     *   // don't include it.\n     *   .addColumn('data', sql`any_type_here`)\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade'))\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the\n     * query and doesn't provide the same API for all databses. For example, some\n     * databases like older MySQL don't support the `references` statement in the\n     * column definition. Instead foreign key constraints need to be defined in the\n     * `create table` query. See the next example:\n     *\n     * ```ts\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey()),\n     * ```\n     */\n    addColumn(columnName, dataType, build = noop) {\n        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, PrimaryConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, UniqueConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import {\u00A0sql } from 'kysely'\n     *\n     * addCheckConstraint('check_legs', sql`number_of_legs < 5`)\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id'],\n     *   'person',\n     *   ['id'],\n     * )\n     * ```\n     *\n     * Add constraint for multiple columns:\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id1', 'owner_id2'],\n     *   'person',\n     *   ['id1', 'id2'],\n     *   (cb) => cb.onDelete('cascade')\n     * )\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.\n     *\n     * Also see {@link temporary}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .modifyFront(sql`global temporary`)\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (Postgres):\n     *\n     * ```sql\n     * create global temporary table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(64) not null,\n     *   \"last_name\" varchar(64) not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * Also see {@link onCommit}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .addColumn('id', 'integer', col => col => primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .modifyEnd(sql`collate utf8_unicode_ci`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(64) not null,\n     *   `last_name` varchar(64) not null\n     * ) collate utf8_unicode_ci\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('test')\n     *   .$call((builder) => builder.addColumn('id', 'integer'))\n     *   .execute()\n     * ```\n     *\n     * ```ts\n     * const addDefaultColumns = <T extends string, C extends string = never>(\n     *   builder: CreateTableBuilder<T, C>\n     * ) => {\n     *   return builder\n     *     .addColumn('id', 'integer', (col) => col.notNull())\n     *     .addColumn('created_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     *     .addColumn('updated_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     * }\n     *\n     * db.schema\n     *   .createTable('test')\n     *   .$call(addDefaultColumns)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTableBuilder, \"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./on-commit-action-parse.d.ts\" />\nimport { ON_COMMIT_ACTIONS, } from '../operation-node/create-table-node.js';\nexport function parseOnCommitAction(action) {\n    if (ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\n", "/// <reference types=\"./drop-index-builder.d.ts\" />\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropIndexBuilder, \"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-schema-builder.d.ts\" />\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropSchemaBuilder, \"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-table-builder.d.ts\" />\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTableBuilder, \"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./create-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { ImmediateValuePlugin } from '../plugin/immediate-value/immediate-value-plugin.js';\nexport class CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                columns: columns.map(parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or raw {@link sql } expression passed here is interpolated into a single\n     * string opening an SQL injection vulnerability. DO NOT pass unchecked user input\n     * into the query or raw expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                as: queryNode,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateViewBuilder, \"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n", "/// <reference types=\"./drop-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nexport class DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropViewBuilder, \"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropViewNode = freeze({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return freeze({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./create-type-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nexport class CreateTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    /**\n     * Creates an anum type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])\n     * ```\n     */\n    asEnum(values) {\n        return new CreateTypeBuilder({\n            ...this.#props,\n            node: CreateTypeNode.cloneWithEnum(this.#props.node, values),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTypeBuilder, \"don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./create-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueListNode } from './value-list-node.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const CreateTypeNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateTypeNode',\n            name,\n        });\n    },\n    cloneWithEnum(createType, values) {\n        return freeze({\n            ...createType,\n            enum: ValueListNode.create(values.map((value) => ValueNode.createImmediate(value))),\n        });\n    },\n});\n", "/// <reference types=\"./drop-type-builder.d.ts\" />\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTypeBuilder({\n            ...this.#props,\n            node: DropTypeNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTypeBuilder, \"don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DropTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropTypeNode',\n            name,\n        });\n    },\n    cloneWith(dropType, params) {\n        return freeze({\n            ...dropType,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./identifier-parser.d.ts\" />\nimport { SchemableIdentifierNode } from '../operation-node/schemable-identifier-node.js';\nexport function parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return SchemableIdentifierNode.create(id);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by typescript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput = req.query.select;\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | undefined = person.last_name\n     * const firstName: string | undefined = person.first_name\n     * const birthDate: string | undefined = person.birth_date\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n}\n", "/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n", "/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\nexport class DefaultQueryExecutor extends QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node) {\n        return this.#compiler.compileQuery(node);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\n", "/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        connection.executeQuery = async (compiledQuery) => {\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                await this.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                await this.#logQuery(compiledQuery, startTime);\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime) {\n        await this.#log.query(() => ({\n            level: 'query',\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n", "/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n", "/// <reference types=\"./single-connection-provider.d.ts\" />\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise;\n        }\n        const promise = this.#run(consumer);\n        this.#runningPromise = promise\n            .then(() => {\n            this.#runningPromise = undefined;\n        })\n            .catch(() => {\n            this.#runningPromise = undefined;\n        });\n        return promise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n", "/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n];\n", "/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        console.log(`kysely:query: ${event.query.sql}`);\n        console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${event}`);\n        }\n    }\n}\n", "/// <reference types=\"./compilable.d.ts\" />\nimport { isFunction, isObject } from './object-utils.js';\nexport function isCompilable(value) {\n    return isObject(value) && isFunction(value.compile);\n}\n"],
  "mappings": "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",
  "names": ["val", "val", "entityName", "val", "val", "result", "entityName", "val", "XMLParser", "attStr", "val", "XMLParser", "isString", "isUndefined", "isNumber", "isBoolean", "isNull", "isFunction", "isObject", "freeze", "isReadonlyArray", "noop", "isOperationNodeSource", "isExpression", "isAliasedExpression", "isJSONOperator", "DynamicReferenceBuilder", "isDynamicReferenceBuilder", "isOrderByDirection", "parseOrderBy", "parseOrderByItem", "parseOrderByExpression", "parseOrderByDirectionExpression", "parseSimpleReferenceExpression", "parseStringReference", "parseReferenceExpressionOrList", "parseReferenceExpression", "parseJSONReference", "trim", "parseStringReferenceWithTableAndSchema", "parseStringReferenceWithTable", "parseAliasedStringReference", "parseColumnName", "parseOrderedColumnName", "parseValueExpressionOrList", "parseValueExpressionList", "parseValueExpression", "isSafeImmediateValue", "parseSafeImmediateValue", "parseValueBinaryOperationOrExpression", "parseValueBinaryOperation", "isIsOperator", "needsIsOperator", "parseOperator", "parseReferentialBinaryOperation", "parseFilterObject", "parseFilterList", "toOperationNode", "preventAwait", "JoinBuilder", "parsePartitionBy", "OverBuilder", "parseSelectArg", "parseSelectExpression", "parseSelectAll", "parseSelectAllArg", "parseInsertExpression", "parseInsertColumnsAndValues", "parseColumnNamesAndIndexes", "parseRowValues", "parseUpdateExpression", "InsertResult", "NoResultError", "isNoResultErrorConstructor", "OnConflictBuilder", "OnConflictDoNothingBuilder", "OnConflictUpdateBuilder", "InsertQueryBuilder", "DeleteResult", "DeleteQueryBuilder", "UpdateResult", "UpdateQueryBuilder", "CTEBuilder", "parseCommonTableExpression", "cteBuilderFactory", "parseCommonTableExpressionName", "CHARS", "randomString", "randomChar", "createQueryId", "LazyQueryId", "requireAllProps", "OperationNodeTransformer", "ROOT_OPERATION_NODES", "WithSchemaTransformer", "WithSchemaPlugin", "QueryCreator", "Deferred", "LOGGED_MESSAGES", "logOnce", "NO_PLUGINS", "QueryExecutorBase", "warnOfOutdatedDriverOrPlugins", "connection", "NoopQueryExecutor", "createSelectQueryBuilder", "createQueryCreator", "createJoinBuilder", "createOverBuilder", "parseJoin", "parseSingleOnJoin", "parseCallbackJoin", "parseGroupBy", "parseSetOperations", "ExpressionWrapper", "AliasedExpressionWrapper", "OrWrapper", "AndWrapper", "SelectQueryBuilderImpl", "AliasedSelectQueryBuilderImpl", "createSelectQueryBuilder", "AggregateFunctionBuilder", "AliasedAggregateFunctionBuilder", "createFunctionModule", "parseUnaryOperation", "CaseBuilder", "CaseThenBuilder", "CaseWhenBuilder", "CaseEndBuilder", "JSONPathBuilder", "TraversedJSONPathBuilder", "AliasedJSONPathBuilder", "createExpressionBuilder", "expressionBuilder", "parseExpression", "parseAliasedExpression", "isExpressionOrFactory", "parseTableExpressionOrList", "parseTableExpression", "parseAliasedTable", "trim", "parseTable", "parseDefaultValueExpression", "parseOnModifyForeignAction", "ColumnDefinitionBuilder", "parseDataTypeExpression", "ForeignKeyConstraintBuilder", "AlterColumnBuilder", "AlteredColumnBuilder", "AlterTableExecutor", "AlterTableAddForeignKeyConstraintBuilder", "AlterTableDropConstraintBuilder", "AlterTableBuilder", "AlterTableColumnAlteringBuilder", "ImmediateValueTransformer", "CreateIndexBuilder", "CreateSchemaBuilder", "parseOnCommitAction", "CreateTableBuilder", "DropIndexBuilder", "DropSchemaBuilder", "DropTableBuilder", "ImmediateValuePlugin", "CreateViewBuilder", "DropViewBuilder", "CreateTypeBuilder", "DropTypeBuilder", "parseSchemableIdentifier", "trim", "SchemaModule", "DynamicModule", "DefaultConnectionProvider", "DefaultQueryExecutor", "performanceNow", "RuntimeDriver", "SingleConnectionProvider", "Log", "defaultLogger", "isCompilable", "Kysely", "isKyselyProps", "TransactionBuilder", "ConnectionBuilder", "Transaction", "validateTransactionSettings", "exports", "D1Dialect", "connection", "trim", "trim", "val"]
}
